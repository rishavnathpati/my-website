This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where comments have been removed, empty lines have been removed.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Empty lines have been removed from all files
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
public/
  blog/
    thumbnails/
      mac-terminal.png.html
  portfolio/
    games/
      beatrex-ball.jpg.html
  file.svg
  globe.svg
  next.svg
  profile-img.jpg.html
  robots.txt
  sitemap.xml
  vercel.svg
  window.svg
scripts/
  generate-sitemap.mjs
src/
  app/
    blog/
      [slug]/
        page.tsx
      page.tsx
    portfolio/
      [slug]/
        page.tsx
      page.tsx
    globals.css
    layout.tsx
    no-animations.css
    not-found.tsx
    page.tsx
  components/
    easter-eggs/
      KonamiCode.tsx
    effects/
      BackgroundEffects.tsx
      FloatingParticles.tsx
      ParallaxBackground.tsx
    sections/
      AboutSection.tsx
      BlogHighlights.tsx
      ContactCTA.tsx
      ExperienceSection.tsx
      HeroSection.tsx
      PortfolioHighlights.tsx
      SkillsSection.tsx
    ui/
      mdx/
        Card.tsx
        Note.tsx
        Steps.tsx
      badge.tsx
      button.tsx
      card.tsx
      console-provider.tsx
      console.tsx
      loading-overlay.tsx
      skeleton.tsx
      toast.tsx
      toaster.tsx
      use-toast.ts
    analytics.tsx
    BlogCardSkeleton.tsx
    Footer.tsx
    Header.tsx
    PortfolioCardSkeleton.tsx
    ScrollToTop.tsx
    SkipLink.tsx
    tailwind-indicator.tsx
    theme-provider.tsx
  content/
    blogs/
      mac-terminal-setup.mdx
  lib/
    data/
      blog.ts
      portfolio.json
      portfolio.ts
      skills.ts
    utils/
      sound.ts
    blog.ts
    mdx-components.tsx
    utils.ts
.gitignore
components.json
eslint.config.mjs
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/blog/thumbnails/mac-terminal.png.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Mac Terminal Setup</title>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      background: linear-gradient(135deg, #333333, #111111);
      color: white;
      font-family: 'SF Mono', monospace;
      text-align: center;
    }
    .terminal-container {
      width: 600px;
      height: 400px;
      display: flex;
      flex-direction: column;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
    }
    .terminal-header {
      display: flex;
      align-items: center;
      background: #3c3c3c;
      padding: 10px;
      height: 30px;
    }
    .window-controls {
      display: flex;
      gap: 6px;
      margin-right: 15px;
    }
    .control {
      width: 12px;
      height: 12px;
      border-radius: 50%;
    }
    .close {
      background-color: #ff5f56;
    }
    .minimize {
      background-color: #ffbd2e;
    }
    .maximize {
      background-color: #27c93f;
    }
    .terminal-title {
      flex-grow: 1;
      text-align: center;
      font-size: 14px;
    }
    .terminal-body {
      background-color: #1e1e1e;
      color: #33ff33;
      flex-grow: 1;
      padding: 15px;
      text-align: left;
      overflow: hidden;
      font-size: 14px;
    }
    .command-line {
      margin: 0 0 10px 0;
      display: flex;
    }
    .prompt {
      color: #33ccff;
      margin-right: 10px;
    }
    .cursor {
      display: inline-block;
      width: 10px;
      height: 18px;
      background-color: #33ff33;
      animation: blink 1s step-end infinite;
      vertical-align: middle;
      margin-left: 2px;
    }
    @keyframes blink {
      0%, 100% { opacity: 1; }
      50% { opacity: 0; }
    }
  </style>
</head>
<body>
  <div class="terminal-container">
    <div class="terminal-header">
      <div class="window-controls">
        <div class="control close"></div>
        <div class="control minimize"></div>
        <div class="control maximize"></div>
      </div>
      <div class="terminal-title">Terminal</div>
    </div>
    <div class="terminal-body">
      <div class="command-line">
        <span class="prompt">rishav@macbook ~ %</span>
        <span>ls -la</span>
      </div>
      <div class="command-line">
        <span class="prompt">rishav@macbook ~ %</span>
        <span>brew install zsh</span>
      </div>
      <div class="command-line">
        <span class="prompt">rishav@macbook ~ %</span>
        <span>oh-my-zsh install</span>
      </div>
      <div class="command-line">
        <span class="prompt">rishav@macbook ~ %</span>
        <span>echo "Terminal setup complete!"</span>
      </div>
      <div class="command-line">
        <span class="prompt">rishav@macbook ~ %</span>
        <span class="cursor"></span>
      </div>
    </div>
  </div>
</body>
</html>
</file>

<file path="public/portfolio/games/beatrex-ball.jpg.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Beatrex Ball</title>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      background: linear-gradient(135deg, #8844ee, #4466ee);
      color: white;
      font-family: system-ui, -apple-system, sans-serif;
      text-align: center;
    }
    .container {
      width: 600px;
      height: 400px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      border: 2px solid rgba(255, 255, 255, 0.2);
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
      background: rgba(0, 0, 0, 0.3);
    }
    h1 {
      margin: 0 0 20px 0;
      font-size: 36px;
    }
    p {
      margin: 0;
      font-size: 18px;
      max-width: 80%;
    }
    .game-icon {
      font-size: 60px;
      margin-bottom: 20px;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="game-icon">🎮</div>
    <h1>Beatrex Ball</h1>
    <p>A rhythm-based mobile game developed with Unity</p>
  </div>
</body>
</html>
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/profile-img.jpg.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Rishav Nath Pati</title>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      background: linear-gradient(135deg, #8844ee, #4466ee);
      color: white;
      font-family: system-ui, -apple-system, sans-serif;
      text-align: center;
    }
    .profile-container {
      width: 800px;
      height: 800px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      border-radius: 50%;
      padding: 20px;
      background: rgba(0, 0, 0, 0.3);
      box-shadow: 0 4px 30px rgba(0, 0, 0, 0.2);
    }
    h1 {
      margin: 0 0 10px 0;
      font-size: 42px;
    }
    p {
      margin: 10px 0;
      font-size: 24px;
      max-width: 80%;
    }
    .avatar {
      font-size: 120px;
      margin-bottom: 20px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 50%;
      width: 200px;
      height: 200px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
  </style>
</head>
<body>
  <div class="profile-container">
    <div class="avatar">👨‍💻</div>
    <h1>Rishav Nath Pati</h1>
    <p>Game & Interactive Media Developer</p>
  </div>
</body>
</html>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="src/app/not-found.tsx">
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Home, Search } from 'lucide-react';
import { Metadata } from 'next';
export const metadata: Metadata = {
  title: '404 - Page Not Found | Rishav Nath Pati',
  description: "Oops! The page you're looking for doesn't seem to exist.",
};
export default function NotFound() {
  return (
    <div className="flex flex-col items-center justify-center min-h-[calc(100vh-200px)] text-center px-4 lg:ml-[300px]">
      <div className="max-w-md">
        <h1 className="text-6xl md:text-9xl font-bold text-primary mb-4 font-raleway">
          404
        </h1>
        <h2 className="text-2xl md:text-3xl font-semibold mb-4 text-foreground font-poppins">
          Page Not Found
        </h2>
        <p className="text-lg text-muted-foreground mb-8">
          Sorry, we couldn't find the page you were looking for. It might have been moved, deleted, or maybe it never existed.
        </p>
        <div className="flex flex-col sm:flex-row justify-center gap-4">
          <Button asChild size="lg">
            <Link href="/">
              <Home className="mr-2 h-5 w-5" /> Go Back Home
            </Link>
          </Button>
          <Button variant="outline" size="lg" asChild>
            <Link href="/portfolio">
              <Search className="mr-2 h-5 w-5" /> Explore Portfolio
            </Link>
          </Button>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/effects/BackgroundEffects.tsx">
'use client';
import dynamic from 'next/dynamic';
const FloatingParticles = dynamic(() => import("./FloatingParticles"), {
  ssr: false,
  loading: () => null
});
export default function BackgroundEffects() {
  return <FloatingParticles />;
}
</file>

<file path="src/components/ui/mdx/Card.tsx">
'use client';
interface CardProps {
  title?: string;
  icon?: React.ReactNode;
  children: React.ReactNode;
}
export function Card({ title, icon, children }: CardProps) {
  return (
    <div className="my-6 rounded-lg border bg-card text-card-foreground shadow-sm">
      {(title || icon) && (
        <div className="flex items-center border-b border-border p-4">
          {icon && <div className="mr-2">{icon}</div>}
          {title && <h3 className="font-semibold">{title}</h3>}
        </div>
      )}
      <div className="p-4">{children}</div>
    </div>
  );
}
</file>

<file path="src/components/ui/mdx/Note.tsx">
'use client';
import { cn } from "@/lib/utils";
import { AlertCircle, Info, CheckCircle2 } from "lucide-react";
interface NoteProps {
  type?: 'info' | 'warning' | 'success';
  children: React.ReactNode;
}
const icons = {
  info: Info,
  warning: AlertCircle,
  success: CheckCircle2,
};
const styles = {
  info: 'border-blue-200 bg-blue-50 dark:border-blue-900/50 dark:bg-blue-900/20 text-blue-900 dark:text-blue-200',
  warning: 'border-yellow-200 bg-yellow-50 dark:border-yellow-900/50 dark:bg-yellow-900/20 text-yellow-900 dark:text-yellow-200',
  success: 'border-green-200 bg-green-50 dark:border-green-900/50 dark:bg-green-900/20 text-green-900 dark:text-green-200',
};
export function Note({ type = 'info', children }: NoteProps) {
  const Icon = icons[type];
  return (
    <div className={cn(
      'my-6 flex gap-2 rounded-lg border p-4',
      styles[type]
    )}>
      <Icon className="h-5 w-5 mt-1 flex-shrink-0" />
      <div>{children}</div>
    </div>
  );
}
</file>

<file path="src/components/ui/mdx/Steps.tsx">
'use client';
interface StepsProps {
  children: React.ReactNode;
}
export function Steps({ children }: StepsProps) {
  return (
    <div className="steps ml-4 border-l border-border pl-8 [counter-reset:step] my-8">
      {children}
    </div>
  );
}
export function Step({ children }: { children: React.ReactNode }) {
  return (
    <div className="step mb-8 relative">
      <div className="absolute -left-[50px] flex h-8 w-8 items-center justify-center rounded-full bg-muted text-muted-foreground font-mono text-sm font-medium before:content-[counter(step)] before:[counter-increment:step]" />
      {children}
    </div>
  );
}
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)
function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"
  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}
export { Badge, badgeVariants }
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)
function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"
  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}
export { Button, buttonVariants }
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}
function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}
function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}
function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}
function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}
function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}
export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
</file>

<file path="src/components/ui/console-provider.tsx">
'use client';
import { createContext, useContext, useCallback, ReactNode } from 'react';
import { Console } from './console';
interface ConsoleContextType {
  log: (message: string) => void;
  warn: (message: string) => void;
  error: (message: string) => void;
  success: (message: string) => void;
}
const ConsoleContext = createContext<ConsoleContextType | null>(null);
interface ConsoleProviderProps {
  children: ReactNode;
}
let logCallback: ((message: string, type: 'info' | 'warning' | 'error' | 'success') => void) | null = null;
export function ConsoleProvider({ children }: ConsoleProviderProps) {
  const setLogCallback = useCallback((callback: typeof logCallback) => {
    logCallback = callback;
  }, []);
  const log = useCallback((message: string) => {
    logCallback?.(message, 'info');
  }, []);
  const warn = useCallback((message: string) => {
    logCallback?.(message, 'warning');
  }, []);
  const error = useCallback((message: string) => {
    logCallback?.(message, 'error');
  }, []);
  const success = useCallback((message: string) => {
    logCallback?.(message, 'success');
  }, []);
  return (
    <ConsoleContext.Provider value={{ log, warn, error, success }}>
      {children}
      <Console onInit={setLogCallback} />
    </ConsoleContext.Provider>
  );
}
export function useConsole() {
  const context = useContext(ConsoleContext);
  if (!context) {
    throw new Error('useConsole must be used within a ConsoleProvider');
  }
  return context;
}
</file>

<file path="src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"
function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}
export { Skeleton }
</file>

<file path="src/components/ui/toast.tsx">
"use client"
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import { cn } from "@/lib/utils"
const ToastProvider = ToastPrimitives.Provider
const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName
const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)
const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName
const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName
const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName
const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName
const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName
type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>
type ToastActionElement = React.ReactElement<typeof ToastAction>
export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="src/components/ui/toaster.tsx">
"use client"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"
import { useToast } from "@/components/ui/use-toast"
export function Toaster() {
  const { toasts } = useToast()
  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="src/components/ui/use-toast.ts">
import * as React from "react"
import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"
const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000
type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}
const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const
let count = 0
function genId() {
  count = (count + 1) % Number.MAX_VALUE
  return count.toString()
}
type ActionType = typeof actionTypes
type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }
interface State {
  toasts: ToasterToast[]
}
const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()
const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }
  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)
  toastTimeouts.set(toastId, timeout)
}
export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }
    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }
    case "DISMISS_TOAST": {
      const { toastId } = action
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}
const listeners: Array<(state: State) => void> = []
let memoryState: State = { toasts: [] }
function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}
type Toast = Omit<ToasterToast, "id">
function toast({ ...props }: Toast) {
  const id = genId()
  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })
  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })
  return {
    id: id,
    dismiss,
    update,
  }
}
function useToast() {
  const [state, setState] = React.useState<State>(memoryState)
  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])
  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}
export { useToast, toast }
</file>

<file path="src/components/analytics.tsx">
'use client';
import Script from 'next/script';
export function Analytics() {
  return (
    <>
      {}
      <Script
        src="https://www.googletagmanager.com/gtag/js?id=YOUR-GA-ID"
        strategy="afterInteractive"
      />
      <Script id="google-analytics" strategy="afterInteractive">
        {`
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);}
          gtag('js', new Date());
          gtag('config', 'YOUR-GA-ID');
        `}
      </Script>
    </>
  );
}
</file>

<file path="src/components/BlogCardSkeleton.tsx">
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
export function BlogCardSkeleton() {
  return (
    <Card className="flex flex-col overflow-hidden">
      <CardHeader className="p-0">
        <Skeleton className="aspect-video w-full" />
      </CardHeader>
      <CardContent className="flex-grow p-5">
        <div className="flex items-center space-x-4 text-xs mb-2">
          <Skeleton className="h-4 w-24" /> {}
          <Skeleton className="h-4 w-20" /> {}
        </div>
        <Skeleton className="h-6 w-full mb-2" /> {}
        <Skeleton className="h-6 w-5/6 mb-4" /> {}
        <Skeleton className="h-4 w-full mb-1" /> {}
        <Skeleton className="h-4 w-full mb-1" /> {}
        <Skeleton className="h-4 w-3/4 mb-4" /> {}
        <div className="flex flex-wrap gap-2">
          <Skeleton className="h-5 w-16" />
          <Skeleton className="h-5 w-20" />
          <Skeleton className="h-5 w-14" />
        </div>
      </CardContent>
      {}
    </Card>
  );
}
</file>

<file path="src/components/PortfolioCardSkeleton.tsx">
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
export function PortfolioCardSkeleton() {
  return (
    <Card className="flex flex-col overflow-hidden">
      <CardHeader className="p-0">
        <Skeleton className="aspect-video w-full" />
      </CardHeader>
      <CardContent className="flex-grow p-5">
        <Skeleton className="h-6 w-3/4 mb-2" />
        <Skeleton className="h-4 w-full mb-4" />
        <div className="flex flex-wrap gap-2">
          <Skeleton className="h-5 w-16" />
          <Skeleton className="h-5 w-20" />
          <Skeleton className="h-5 w-14" />
        </div>
      </CardContent>
      <CardFooter className="p-5 bg-muted/30 border-t border-border flex justify-between items-center">
        <Skeleton className="h-8 w-24" />
        <div className="flex items-center space-x-2">
          <Skeleton className="h-8 w-8 rounded-md" />
          <Skeleton className="h-8 w-8 rounded-md" />
        </div>
      </CardFooter>
    </Card>
  );
}
</file>

<file path="src/components/SkipLink.tsx">
export function SkipLink() {
  return (
    <a
      href="#main"
      className="sr-only focus:not-sr-only focus:fixed focus:top-4 focus:left-4 focus:z-[10000] focus:p-4 focus:bg-background focus:text-foreground focus:outline-none focus:ring-2 focus:ring-primary"
    >
      Skip to main content
    </a>
  );
}
</file>

<file path="src/components/tailwind-indicator.tsx">
export function TailwindIndicator() {
  if (process.env.NODE_ENV === "production") return null;
  return (
    <div className="fixed bottom-1 left-1 z-50 flex h-6 w-6 items-center justify-center rounded-full bg-gray-800 p-3 font-mono text-xs text-white">
      <div className="block sm:hidden">xs</div>
      <div className="hidden sm:block md:hidden">sm</div>
      <div className="hidden md:block lg:hidden">md</div>
      <div className="hidden lg:block xl:hidden">lg</div>
      <div className="hidden xl:block 2xl:hidden">xl</div>
      <div className="hidden 2xl:block">2xl</div>
    </div>
  );
}
</file>

<file path="src/components/theme-provider.tsx">
"use client"
import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"
import { type ThemeProviderProps } from "next-themes/dist/types"
export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
</file>

<file path="src/lib/blog.ts">
import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';
export interface BlogPostMeta {
  title: string;
  date: string;
  excerpt: string;
  tags: string[];
  imageUrl: string;
  readTimeMinutes?: number;
  slug: string;
  externalUrl?: string;
}
export interface BlogPost extends BlogPostMeta {
  content: string;
}
const postsDirectory = path.join(process.cwd(), 'src/content/blogs');
export function getSortedPostsData(): BlogPostMeta[] {
  try {
    const fileNames = fs.readdirSync(postsDirectory).filter(name => name.endsWith('.mdx'));
    const allPostsData = fileNames.map((fileName): BlogPostMeta => {
      const slug = fileName.replace(/\.mdx$/, '');
      const fullPath = path.join(postsDirectory, fileName);
      const fileContents = fs.readFileSync(fullPath, 'utf8');
      const matterResult = matter(fileContents);
      return {
        slug,
        title: matterResult.data.title as string,
        date: matterResult.data.date as string,
        excerpt: matterResult.data.excerpt as string,
        tags: matterResult.data.tags as string[],
        imageUrl: matterResult.data.imageUrl as string,
        readTimeMinutes: matterResult.data.readTimeMinutes as number | undefined,
        externalUrl: matterResult.data.externalUrl as string | undefined,
      };
    });
    return allPostsData.sort((a, b) => {
      return new Date(b.date).getTime() - new Date(a.date).getTime();
    });
  } catch (error) {
    console.error("Error reading blog posts:", error);
    return [];
  }
}
export function getAllPostSlugs(): { params: { slug: string } }[] {
  try {
    const fileNames = fs.readdirSync(postsDirectory).filter(name => name.endsWith('.mdx'));
    return fileNames.map(fileName => ({
      params: {
        slug: fileName.replace(/\.mdx$/, '')
      }
    }));
  } catch (error) {
    console.error("Error getting post slugs:", error);
    return [];
  }
}
// Function to get specific post data by slug
export async function getPostData(slug: string): Promise<BlogPost | null> {
  const fullPath = path.join(postsDirectory, `${slug}.mdx`);
  try {
    const fileContents = fs.readFileSync(fullPath, 'utf8');
    const matterResult = matter(fileContents);
    const postData: BlogPost = {
      slug,
      title: matterResult.data.title as string,
      date: matterResult.data.date as string,
      excerpt: matterResult.data.excerpt as string,
      tags: matterResult.data.tags as string[],
      imageUrl: matterResult.data.imageUrl as string,
      readTimeMinutes: matterResult.data.readTimeMinutes as number | undefined,
      externalUrl: matterResult.data.externalUrl as string | undefined,
      content: matterResult.content,
    };
    return postData;
  } catch (error) {
    console.error(`Error reading blog post ${slug}:`, error);
    return null;
  }
}
</file>

<file path="src/lib/mdx-components.tsx">
import { Card } from '@/components/ui/mdx/Card';
import { Note } from '@/components/ui/mdx/Note';
import { Steps, Step } from '@/components/ui/mdx/Steps';
import { MDXComponents } from 'mdx/types';
export function useMDXComponents(components: MDXComponents): MDXComponents {
  return {
    Card,
    Note,
    Steps,
    Step,
    ...components,
  };
}
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="public/sitemap.xml">
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>https://yourdomain.com/</loc>
    <priority>1.0</priority>
    <changefreq>monthly</changefreq>
  </url>
  <url>
    <loc>https://yourdomain.com/blog</loc>
    <priority>0.8</priority>
    <changefreq>monthly</changefreq>
  </url>
  <url>
    <loc>https://yourdomain.com/portfolio</loc>
    <priority>0.8</priority>
    <changefreq>monthly</changefreq>
  </url>
  <url>
    <loc>https://yourdomain.com/portfolio/unity-game-1</loc>
    <priority>0.8</priority>
    <changefreq>monthly</changefreq>
  </url>
  <url>
    <loc>https://yourdomain.com/portfolio/ar-experience</loc>
    <priority>0.8</priority>
    <changefreq>monthly</changefreq>
  </url>
  <url>
    <loc>https://yourdomain.com/portfolio/interactive-vr</loc>
    <priority>0.8</priority>
    <changefreq>monthly</changefreq>
  </url>
  <url>
    <loc>https://yourdomain.com/blog/mac-terminal-setup</loc>
    <priority>0.8</priority>
    <changefreq>weekly</changefreq>
  </url>
</urlset>
</file>

<file path="src/app/no-animations.css">
*:not(.allow-animation) {
  animation: none !important;
  transition: none !important;
  transform: none !important;
  animation-delay: 0s !important;
  animation-duration: 0s !important;
  transition-delay: 0s !important;
  transition-duration: 0s !important;
}
@keyframes fadeInOut { 0%, 100% { opacity: 1; } }
@keyframes float { 0%, 100% { transform: none; } }
@keyframes spin { 0%, 100% { transform: none; } }
@keyframes rainbow { 0%, 100% { filter: none; } }
@keyframes pulse { 0%, 100% { transform: none; opacity: 1; } }
@keyframes glitch { 0%, 100% { transform: none; } }
@keyframes scanline { 0%, 100% { transform: none; } }
@keyframes blink { 0%, 100% { opacity: 1; } }
@keyframes fadeIn { 0%, 100% { opacity: 1; transform: none; } }
@keyframes skillLoad { 0%, 100% { width: 100%; opacity: 1; } }
@keyframes skillPulse { 0%, 100% { transform: none; } }
@keyframes skillSelect { 0%, 100% { transform: none; box-shadow: none; } }
@keyframes skillGlow { 0%, 100% { filter: none; } }
.animate-blink {
  animation: none !important;
}
[data-aos] {
  opacity: 1 !important;
  transform: none !important;
  transition: none !important;
}
</file>

<file path="src/components/effects/ParallaxBackground.tsx">
'use client';
import { useRef } from 'react';
interface Particle {
  x: number;
  y: number;
  size: number;
  speedX: number;
  speedY: number;
  color: string;
}
export default function ParallaxBackground() {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  return (
    <canvas
      ref={canvasRef}
      className="fixed inset-0 pointer-events-none z-[0]"
      style={{ mixBlendMode: "soft-light", opacity: 0.5 }}
    />
  );
}
</file>

<file path="src/components/sections/ExperienceSection.tsx">
import React from 'react';
import { Briefcase, Terminal, GraduationCap, Calendar } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
interface ExperienceItem {
  title: string;
  company: string;
  location: string;
  period: string;
  description: string[];
  skills?: string[];
}
interface EducationItem {
  degree: string;
  institution: string;
  location: string;
  period: string;
  description: string;
}
const professionalExperience: ExperienceItem[] = [
  {
    title: "Interactive Media Developer",
    company: "Convai",
    location: "San Jose, California",
    period: "July 2022 - Present",
    description: [
      "Designed and integrated Conversational AI solutions within Unity Engine.",
      "Engineered prompts to fine-tune deep learning models, ensuring optimal performance and user engagement.",
      "Worked extensively on gRPC networking to ensure efficient communication and data exchange within applications.",
      "Implemented game optimization techniques to enhance performance and user experience.",
      "Applied various design patterns to create robust and maintainable code.",
      "Engineered system design implementations to ensure scalability and reliability of applications.",
      "Designed and developed interactive experiences integrated with conversational AI in Unity and C#.",
      "Developing end-to-end speech solutions for virtual worlds in Unity."
    ],
    skills: ["Unity", "C#", "Conversational AI", "gRPC", "System Design", "Game Optimization"]
  },
  {
    title: "Freelance Software Engineer, Game Developer",
    company: "Self-employed",
    location: "Vellore, Tamil Nadu",
    period: "November 2021 - April 2022",
    description: [
      "Developing games, apps, and experiences in Unity"
    ],
    skills: ["Unity", "C#", "Game Development", "Mobile Development"]
  },
  {
    title: "Game Developer",
    company: "IDZ Digital Private Limited",
    location: "Mumbai, Maharashtra",
    period: "May 2021 - November 2021",
    description: [
      "Designed game prototypes and incorporated game mechanics in Unity."
    ],
    skills: ["Unity", "C#", "Game Design", "Prototyping"]
  }
];
const education: EducationItem[] = [
  {
    degree: "Master of Computer Applications",
    institution: "Vellore Institute of Technology",
    location: "Vellore, Tamil Nadu, India",
    period: "2022 - 2024",
    description: "Focus on computer science, application and statistics. Pursuing advanced knowledge in computing principles and and a published paper on hand gesture recognition."
  },
  {
    degree: "Bachelor of Science in Computer Science",
    institution: "Ramakrishna Mission Residential College",
    location: "Kolkata, West Bengal, India",
    period: "2018 - 2021",
    description: "Specialized in theoritical computer science, mathematics and statistics, including a published research papers on brain tumor segmentation."
  },
  {
    degree: "School Level Courses",
    institution: "Julien Day School",
    location: "Kalyani, West Bengal, India",
    period: "Upto 2018",
    description: "Selected as School Captain for academic year 2017-2018. Courses: Programming, Computer Science, Mathematics, Physics, Chemistry, Biology, English, History, Geography and Literature."
  }
];
export function ExperienceSection() {
  return (
    <section id="experience" className="py-20 lg:py-28 bg-black/30">
      <div className="container mx-auto px-4">
        <div className="max-w-4xl mx-auto">
          <div className="bg-black/40 rounded-lg border border-border p-6 mb-12">
            <div className="flex items-center gap-2 mb-6">
              <Terminal className="w-5 h-5 text-primary" />
              <h2 className="text-2xl font-bold font-mono text-foreground">
                cat resume.md
              </h2>
            </div>
            <div className="space-y-8 text-muted-foreground">
              <p className="leading-relaxed mb-6">
                Detail-oriented and innovative Interactive Media Developer with a passion for game development and extensive experience in developing user-centered digital content. Skilled in Unity, C#, Python, Java, C, and C++, with a proven track record of creating engaging games and applications. Committed to leveraging problem-solving skills and technical expertise to deliver high-performing interactive media solutions.
              </p>
              {}
              <div>
                <div className="flex items-center gap-2 mb-6">
                  <Briefcase className="w-5 h-5 text-primary" />
                  <h3 className="text-xl font-bold font-mono text-foreground">
                    Professional Experience
                  </h3>
                </div>
                <div className="space-y-8">
                  {professionalExperience.map((exp, index) => (
                    <div key={index} className="border-l border-border pl-5 relative">
                      <div className="absolute w-2 h-2 bg-primary rounded-full -left-1 top-2"></div>
                      <div className="flex flex-col sm:flex-row sm:justify-between mb-2">
                        <h4 className="text-lg font-semibold text-foreground">{exp.title}</h4>
                        <div className="flex items-center text-sm text-primary">
                          <Calendar className="w-3 h-3 mr-1" />
                          <span>{exp.period}</span>
                        </div>
                      </div>
                      <div className="text-sm text-muted-foreground mb-2">{exp.company} | {exp.location}</div>
                      <ul className="list-disc pl-4 space-y-1 mb-3 text-sm">
                        {exp.description.map((desc, i) => (
                          <li key={i}>{desc}</li>
                        ))}
                      </ul>
                      {exp.skills && (
                        <div className="flex flex-wrap gap-2 mt-3">
                          {exp.skills.map((skill, i) => (
                            <Badge key={i} variant="outline" className="text-xs font-mono">{skill}</Badge>
                          ))}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>
              {}
              <div>
                <div className="flex items-center gap-2 mb-6">
                  <GraduationCap className="w-5 h-5 text-primary" />
                  <h3 className="text-xl font-bold font-mono text-foreground">
                    Education
                  </h3>
                </div>
                <div className="space-y-8">
                  {education.map((edu, index) => (
                    <div key={index} className="border-l border-border pl-5 relative">
                      <div className="absolute w-2 h-2 bg-primary rounded-full -left-1 top-2"></div>
                      <div className="flex flex-col sm:flex-row sm:justify-between mb-2">
                        <h4 className="text-lg font-semibold text-foreground">{edu.degree}</h4>
                        <div className="flex items-center text-sm text-primary">
                          <Calendar className="w-3 h-3 mr-1" />
                          <span>{edu.period}</span>
                        </div>
                      </div>
                      <div className="text-sm text-muted-foreground mb-2">{edu.institution} | {edu.location}</div>
                      <p className="text-sm">{edu.description}</p>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/ui/console.tsx">
'use client';
import { useEffect, useState, useCallback } from 'react';
import { Terminal } from 'lucide-react';
interface LogMessage {
  type: 'info' | 'warning' | 'error' | 'success';
  message: string;
  timestamp: string;
}
interface ConsoleProps {
  onInit?: (callback: (message: string, type: LogMessage['type']) => void) => void;
}
export function Console({ onInit }: ConsoleProps) {
  const [logs, setLogs] = useState<LogMessage[]>([]);
  const [isMinimized, setIsMinimized] = useState(true);
  const addLog = useCallback((message: string, type: LogMessage['type'] = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => {
      const newLogs = [...prev, { message, type, timestamp }];
      if (newLogs.length > 50) return newLogs.slice(-50);
      return newLogs;
    });
  }, []);
  useEffect(() => {
    if (typeof window === 'undefined') return;
    if (onInit) {
      onInit(addLog);
    }
    addLog('System initialized', 'info');
    addLog('Assets loaded successfully', 'success');
    const popstateHandler = () => {
      const path = window.location.pathname;
      addLog(`Loading section: ${path === '/' ? 'hero' : path.slice(1)}`, 'info');
    };
    window.addEventListener('popstate', popstateHandler, { passive: true });
    return () => {
      window.removeEventListener('popstate', popstateHandler);
    };
  }, [addLog]);
  const getMessageColor = (type: LogMessage['type']) => {
    switch (type) {
      case 'error': return 'text-red-500';
      case 'warning': return 'text-yellow-500';
      case 'success': return 'text-green-500';
      default: return 'text-blue-500';
    }
  };
  if (isMinimized) {
    return (
      <button
        onClick={() => setIsMinimized(false)}
        className="fixed bottom-4 right-4 z-50 p-2 bg-black/30 backdrop-blur-sm border border-border rounded-md text-primary hover:text-primary/80 transition-colors"
        aria-label="Open console"
      >
        <Terminal size={20} />
      </button>
    );
  }
  return (
    <div className="fixed bottom-4 right-4 z-50 w-72 max-h-60 bg-black/20 backdrop-blur-sm border border-border rounded-lg overflow-hidden font-mono text-sm">
      <div className="flex items-center justify-between p-2 border-b border-border">
        <div className="flex items-center gap-2">
          <Terminal size={16} className="text-primary" />
          <span className="text-muted-foreground">debug.console</span>
        </div>
        <button
          onClick={() => setIsMinimized(true)}
          className="text-muted-foreground hover:text-primary transition-colors"
          aria-label="Minimize console"
        >
          _
        </button>
      </div>
      <div className="p-2 max-h-40 overflow-y-auto space-y-1">
        {}
        {logs.slice(-15).map((log, index) => (
          <div key={`log-${index}-${log.timestamp}`} className="flex items-start gap-2">
            <span className="text-muted-foreground text-xs">{log.timestamp}</span>
            <span className={getMessageColor(log.type)}>{log.message}</span>
          </div>
        ))}
      </div>
    </div>
  );
}
</file>

<file path="src/components/ui/loading-overlay.tsx">
'use client';
import { useEffect, useState } from 'react';
interface LoadingOverlayProps {
  isLoading: boolean;
  text?: string;
}
export function LoadingOverlay({ isLoading, text = 'Loading...' }: LoadingOverlayProps) {
  const [progress, setProgress] = useState(0);
  const [dots, setDots] = useState('');
  useEffect(() => {
    if (!isLoading || typeof window === 'undefined') {
      setProgress(0);
      return;
    }
    let animationFrameId: number;
    let lastTime = Date.now();
    let currentProgress = 0;
    const updateProgress = () => {
      const now = Date.now();
      const deltaTime = now - lastTime;
      if (deltaTime > 150) {
        lastTime = now;
        if (deltaTime > 600) {
          setDots(prev => prev.length >= 3 ? '' : prev + '.');
        }
        // Update progress
        if (currentProgress < 100) {
          // More predictable progress increments
          currentProgress += 5 + Math.random() * 10;
          if (currentProgress > 100) currentProgress = 100;
          setProgress(Math.min(100, currentProgress));
        }
      }
      if (currentProgress < 100) {
        animationFrameId = requestAnimationFrame(updateProgress);
      }
    };
    animationFrameId = requestAnimationFrame(updateProgress);
    return () => {
      cancelAnimationFrame(animationFrameId);
    };
  }, [isLoading]);
  if (!isLoading) return null;
  return (
    <div className="absolute inset-0 bg-black/30 flex items-center justify-center z-50">
      <div className="bg-black/50 border border-primary/20 p-4 rounded-lg max-w-xs w-full font-mono">
        <div className="flex items-center justify-between mb-3">
          <span className="text-primary text-sm">{text}{dots}</span>
          <span className="text-primary text-sm">{Math.min(100, Math.round(progress))}%</span>
        </div>
        <div className="h-2 bg-black/40 rounded-full overflow-hidden">
          <div
            className="h-full bg-primary relative"
            style={{ width: `${progress}%` }}
          />
        </div>
        <div className="mt-3 text-xs text-muted-foreground">
          {progress < 100 ? 'Loading...' : 'Complete'}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/content/blogs/mac-terminal-setup.mdx">
---
title: 'Ultimate Mac Terminal Setup Guide'
date: '2024-03-15'
excerpt: 'A comprehensive guide to setting up a modern, efficient terminal environment on macOS with iTerm2, Oh My Zsh, and essential tools.'
tags: ['Development', 'Terminal', 'macOS', 'CLI', 'Productivity']
imageUrl: '/blog/thumbnails/mac-terminal.png'
readTimeMinutes: 15
slug: 'mac-terminal-setup'
---

import { Steps, Step } from '@/components/ui/mdx/Steps';
import { Note } from '@/components/ui/mdx/Note';
import { Card } from '@/components/ui/mdx/Card';
import { Terminal, Package, Shell, Tool, Plugin } from 'lucide-react';

A powerful terminal setup is essential for any developer working on macOS. This comprehensive guide will walk you through creating a modern, efficient terminal environment using iTerm2, Oh My Zsh, and other essential tools.

<Note>
This guide assumes you're using macOS and are comfortable with basic terminal operations. If you're new to the terminal, don't worry – we'll go through each step in detail.
</Note>

<Card title="What You'll Learn" icon={<Terminal className="h-5 w-5" />}>
- Setting up iTerm2 with optimal configurations
- Package management with Homebrew
- Shell customization using Oh My Zsh and Powerlevel10k
- Essential development tools for productivity
- Must-have Zsh plugins for better workflow
</Card>

## Setting Up iTerm2

<Card title="Why Choose iTerm2?" icon={<Terminal className="h-5 w-5" />}>
The default macOS Terminal is functional, but iTerm2 offers significant improvements:

- ✨ Split panes (Cmd+D vertical, Cmd+Shift+D horizontal)
- 🔑 Hotkey window access
- 🔍 Better search & autocomplete
- 🎨 Customizable triggers and profiles
- 🎯 Improved color support
</Card>

<Steps>
<Step>
### Install iTerm2

```bash
brew install --cask iterm2
```
</Step>

<Step>
### Configure Key Settings

1. **Natural Text Editing**
   - Open iTerm2 Preferences
   - Navigate to Profiles → Keys
   - Load Preset... → Natural Text Editing

2. **Enable GPU Rendering**
   - Go to Advanced Settings
   - Search for "GPU"
   - Enable GPU renderer

3. **Unlimited History**
   - Go to Profiles → Terminal
   - Check "Unlimited scrollback"
</Step>
</Steps>

## Package Management with Homebrew

<Card title="About Homebrew" icon={<Package className="h-5 w-5" />}>
Homebrew is the missing package manager for macOS, making it easy to install and manage software packages from the command line.
</Card>

<Steps>
<Step>
### Install Homebrew

```bash
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
```
</Step>

<Step>
### Configure PATH

Add Homebrew to your PATH by adding these lines to your `~/.zprofile`:

```bash
echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
eval "$(/opt/homebrew/bin/brew shellenv)"
```
</Step>
</Steps>

## Shell Customization

<Card title="Oh My Zsh & Powerlevel10k" icon={<Shell className="h-5 w-5" />}>
Transform your terminal with a powerful shell framework and a beautiful theme that provides:
- Rich command-line completion
- Useful aliases and functions
- Git integration
- Customizable prompts
</Card>

<Steps>
<Step>
### Install Prerequisites

```bash
brew install git
```
</Step>

<Step>
### Install Oh My Zsh

```bash
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
```
</Step>

<Step>
### Set Up Powerlevel10k

1. Install the theme:
```bash
git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
```

2. Configure theme in `~/.zshrc`:
```bash
ZSH_THEME="powerlevel10k/powerlevel10k"
```
</Step>

<Step>
### Install Required Font

```bash
brew tap homebrew/cask-fonts
brew install --cask font-meslo-lg-nerd-font
```

Then set MesloLGS NF as your font in iTerm2 (Preferences → Profiles → Text → Font).
</Step>
</Steps>

## Essential Development Tools

<Card title="Modern CLI Tools" icon={<Tool className="h-5 w-5" />}>
Replace traditional Unix tools with modern alternatives that provide better features and user experience.
</Card>

```bash
# File Operations
brew install eza         # Modern ls replacement
brew install bat         # Better cat with syntax highlighting
brew install fd         # Faster find alternative

# Search Tools
brew install ripgrep     # Fast grep replacement
brew install fzf         # Fuzzy finder

# Git Enhancements
brew install delta       # Better git diff

# System Tools
brew install tldr        # Simplified man pages
brew install jq          # JSON processor
brew install htop        # Interactive process viewer
brew install ncdu        # Disk usage analyzer
```

<Note type="info">
These modern alternatives are designed to be drop-in replacements for traditional Unix tools, with better features and more intuitive interfaces.
</Note>

## Zsh Plugins

<Card title="Essential Plugins" icon={<Plugin className="h-5 w-5" />}>
Enhance your shell experience with plugins that provide auto-suggestions, syntax highlighting, and improved history search.
</Card>

<Steps>
<Step>
### Install Plugins

```bash
# Auto-suggestions
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

# Syntax highlighting
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting

# History substring search
git clone https://github.com/zsh-users/zsh-history-substring-search ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-history-substring-search
```
</Step>

<Step>
### Configure Plugins

Add these plugins to your `~/.zshrc`:

```bash
plugins=(
    git                             # Git shortcuts
    zsh-autosuggestions            # Fish-like suggestions
    zsh-syntax-highlighting        # Command syntax highlighting
    zsh-history-substring-search   # Better history search
    web-search                     # Quick web searches
    copypath                       # Copy current directory
    dirhistory                     # Directory navigation
    sudo                          # Double ESC to add sudo
)
```
</Step>
</Steps>

<Note type="warning">
Remember to run `source ~/.zshrc` after making any changes to your configuration file.
</Note>

## Next Steps

<Card>
Now that you have a powerful terminal setup, consider:
- Customizing your Powerlevel10k theme
- Exploring additional Zsh plugins
- Setting up custom aliases and functions
- Configuring keyboard shortcuts
</Card>

<Note type="success">
Congratulations! You now have a modern, efficient terminal environment that will significantly boost your productivity. Take some time to explore each tool's features and customize the setup to match your workflow.
</Note>
</file>

<file path="src/lib/data/portfolio.json">
{
  "portfolioItems": [
    {
      "slug": "beatrex-ball",
      "title": "Beatrex Ball",
      "description": "A rhythm-based mobile game developed with Unity",
      "date": "2023-06-15",
      "category": "games",
      "techStack": ["Unity", "C#", "Mobile Development"],
      "thumbnail": "/portfolio/games/beatrex-ball.jpg"
    },
    {
      "slug": "itch-io-collection",
      "title": "Itch.io Game Collection",
      "description": "Collection of games published on the Itch.io platform",
      "date": "2023-05-20",
      "category": "games",
      "techStack": ["Unity", "C#", "Game Design"],
      "thumbnail": "/portfolio/games/itch-collection.jpg"
    },
    {
      "slug": "journey-under-sea",
      "title": "Journey Under the Sea",
      "description": "An immersive underwater adventure game",
      "date": "2023-02-10",
      "category": "games",
      "techStack": ["Unity", "C#", "3D Modeling"],
      "thumbnail": "/portfolio/games/journey-sea.jpg"
    },
    {
      "slug": "hand-gesture-gui",
      "title": "Hand Gesture Controlled GUI",
      "description": "Computer vision project for controlling GUI with hand gestures",
      "date": "2023-04-15",
      "category": "ml",
      "techStack": ["Python", "OpenCV", "MediaPipe", "Computer Vision"],
      "thumbnail": "/portfolio/ml/hand-gesture-gui.jpg"
    },
    {
      "slug": "yoga-asana-trainer",
      "title": "Yoga Asana Trainer",
      "description": "AI-powered application to guide and correct yoga poses",
      "date": "2022-11-28",
      "category": "ml",
      "techStack": ["Python", "TensorFlow", "Computer Vision", "Unity"],
      "thumbnail": "/portfolio/ml/yoga-trainer.jpg"
    },
    {
      "slug": "brain-tumor-extraction",
      "title": "Brain Tumor Segmentation",
      "description": "Research publication on brain tumor segmentation using U-Net architecture",
      "date": "2023-03-20",
      "category": "publications",
      "techStack": ["Python", "Deep Learning", "U-Net", "Medical Imaging"],
      "thumbnail": "/portfolio/publications/brain-tumor.jpg"
    }
  ]
}
</file>

<file path="next.config.mjs">
import createMDX from '@next/mdx';
import remarkGfm from 'remark-gfm';
import rehypePrettyCode from 'rehype-pretty-code';

/** @type {import('next').NextConfig} */
const nextConfig = {
  pageExtensions: ['js', 'jsx', 'mdx', 'ts', 'tsx'],
  compress: true,
  poweredByHeader: false,
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'placehold.co',
        port: '',
        pathname: '/**',
      },
    ],
    formats: ['image/avif', 'image/webp'],
    deviceSizes: [640, 750, 828, 1080, 1200],
    imageSizes: [16, 32, 48, 64, 96, 128, 256],
  },
  async headers() {
    return [
      {
        source: '/:path*',
        headers: [
          {
            key: 'Cache-Control',
            value: 'public, max-age=31536000, immutable',
          },
        ],
      },
      {
        source: '/_next/image/:path*',
        headers: [
          {
            key: 'Cache-Control',
            value: 'public, max-age=31536000, immutable',
          },
        ],
      },
    ];
  },
};

const withMDX = createMDX({
  options: {
    remarkPlugins: [remarkGfm],
    rehypePlugins: [
      [
        rehypePrettyCode,
        {
          theme: 'one-dark-pro',
          keepBackground: true,
          defaultLang: 'typescript',
          // Optimize code blocks
          grid: false,
          lineNumbers: false,
          filterMetaString: (string) => string.replace(/scale=\d*\.?\d+/, ''),
        },
      ],
    ],
  },
});

export default withMDX(nextConfig);
</file>

<file path="public/robots.txt">
# Allow all web crawlers
User-agent: *
Allow: /

# Sitemap location - IMPORTANT: Replace 'https://yourdomain.com' with your actual domain before deployment
Sitemap: https://yourdomain.com/sitemap.xml
</file>

<file path="scripts/generate-sitemap.mjs">
import fs from 'fs';
import path from 'path';
import { globby } from 'globby';

// Replace with your actual domain before deployment
const SITE_URL = 'https://yourdomain.com';

async function generateSitemap() {
  console.log('Generating sitemap...');

  const pagesDir = path.resolve(process.cwd(), 'src/app');
  const contentDir = path.resolve(process.cwd(), 'src/content');

  // 1. Get static pages from app router
  const pages = await globby([
    `${pagesDir}/**/page.tsx`,
    `!${pagesDir}/layout.tsx`,
    `!${pagesDir}/template.tsx`,
    `!${pagesDir}/not-found.tsx`,
    `!${pagesDir}/api/**`,
    `!${pagesDir}/**/\\[*\\]/**`,
  ]);

  const staticPageUrls = pages.map((page) => {
    const route = page
      .replace(pagesDir, '')
      .replace('/page.tsx', '')
      .replace(/^\/index$/, '/');
    return route === '' ? '/' : route;
  });

  // 2. Get dynamic portfolio pages
  const portfolioDir = path.join(pagesDir, 'portfolio/[slug]');
  // Read portfolio data from JSON file instead of importing TypeScript
  const portfolioData = JSON.parse(fs.readFileSync(path.join(process.cwd(), 'src/lib/data/portfolio.json'), 'utf8'));
  const portfolioUrls = portfolioData.portfolioItems.map(item => `/portfolio/${item.slug}`);

  // 3. Get dynamic blog pages
  const blogPostsDir = path.join(contentDir, 'blogs');
  const blogFiles = await globby(`${blogPostsDir}/**/*.mdx`);
  const blogUrls = blogFiles.map((file) => {
    const slug = path.basename(file, path.extname(file));
    return `/blog/${slug}`;
  });

  // Combine all URLs
  const allUrls = [
    '/',
    ...staticPageUrls.filter(url => url !== '/'),
    ...portfolioUrls,
    ...blogUrls,
  ];
  const uniqueUrls = [...new Set(allUrls)];

  // Create sitemap XML content
  const sitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${uniqueUrls
  .map((url) => {
    const priority = url === '/' ? '1.0' : '0.8';
    const changefreq = url.startsWith('/blog/') ? 'weekly' : 'monthly';
    return `
  <url>
    <loc>${`${SITE_URL}${url}`}</loc>
    <priority>${priority}</priority>
    <changefreq>${changefreq}</changefreq>
  </url>`;
  })
  .join('')}
</urlset>`;

  // Write sitemap file to public directory
  const sitemapPath = path.join(process.cwd(), 'public/sitemap.xml');
  fs.writeFileSync(sitemapPath, sitemap);

  console.log(`Sitemap generated successfully at ${sitemapPath} with ${uniqueUrls.length} URLs.`);
}

generateSitemap().catch((error) => {
  console.error('Error generating sitemap:', error);
  process.exit(1);
});
</file>

<file path="src/app/blog/page.tsx">
import Link from 'next/link';
import Image from 'next/image';
import { Metadata } from 'next';
import { getSortedPostsData } from '@/lib/blog';
import { Suspense } from 'react';
import { BlogCardSkeleton } from '@/components/BlogCardSkeleton';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { CalendarDays, Clock } from 'lucide-react';
function BlogGrid() {
  const allPosts = getSortedPostsData();
  if (allPosts.length === 0) {
    return <p className="text-center text-muted-foreground">No blog posts found.</p>;
  }
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {allPosts.map((post) => (
        <Card
          key={post.slug}
          className="flex flex-col overflow-hidden transition-transform duration-300 ease-in-out hover:-translate-y-1 hover:shadow-lg bg-neutral-800/50 group"
        >
          <CardHeader className="p-0">
            <Link href={post.externalUrl || `/blog/${post.slug}`} target={post.externalUrl ? '_blank' : '_self'} rel={post.externalUrl ? 'noopener noreferrer' : ''} aria-label={`Read more about ${post.title}`}>
              <div className="aspect-video overflow-hidden">
                <Image
                  src={post.imageUrl}
                  alt={`Thumbnail for ${post.title}`}
                  width={600}
                  height={338}
                  className="object-cover w-full h-full transition-transform duration-300 ease-in-out group-hover:scale-105"
                  loading="lazy" // Keep lazy loading for blog list images
                />
              </div>
            </Link>
          </CardHeader>
          <CardContent className="flex-grow p-5">
            <div className="flex items-center space-x-4 text-xs text-muted-foreground mb-2">
              <span className="flex items-center gap-1.5">
                <CalendarDays className="w-3.5 h-3.5" /> {formatDate(post.date)}
              </span>
              {post.readTimeMinutes && (
                <span className="flex items-center gap-1.5">
                  <Clock className="w-3.5 h-3.5" /> {post.readTimeMinutes} min read
                </span>
              )}
            </div>
            <CardTitle className="text-xl font-semibold mb-2 font-poppins line-clamp-2 group-hover:text-primary transition-colors">
              <Link href={post.externalUrl || `/blog/${post.slug}`} target={post.externalUrl ? '_blank' : '_self'} rel={post.externalUrl ? 'noopener noreferrer' : ''}>
                {post.title}
              </Link>
            </CardTitle>
            <CardDescription className="text-muted-foreground mb-4 text-sm line-clamp-3">
              {post.excerpt}
            </CardDescription>
            <div className="flex flex-wrap gap-2">
              {post.tags?.slice(0, 3).map((tag) => (
                <Badge key={tag} variant="secondary">{tag}</Badge>
              ))}
              {post.tags && post.tags.length > 3 && <Badge variant="outline">...</Badge>}
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}
export const metadata: Metadata = {
  title: 'Blog | Rishav Nath Pati',
  description: 'Read articles and insights on game development, interactive media, AI, and technology by Rishav Nath Pati.',
};
const formatDate = (dateString: string): string => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};
export default function BlogListPage() {
  return (
    <div className="container mx-auto px-4 py-16 lg:py-24">
      <div className="max-w-3xl mx-auto text-center mb-12 lg:mb-16">
        <h1 className="text-4xl lg:text-5xl font-bold mb-4 font-raleway text-foreground">
          Blog Posts
        </h1>
        <p className="text-lg lg:text-xl text-muted-foreground leading-relaxed">
          Exploring ideas and sharing knowledge on topics I'm passionate about.
        </p>
      </div>
      {}
      <Suspense fallback={<BlogSkeletonFallback />}>
        <BlogGrid />
      </Suspense>
    </div>
  );
}
function BlogSkeletonFallback() {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {Array.from({ length: 6 }).map((_, index) => (
        <BlogCardSkeleton key={index} />
      ))}
    </div>
  );
}
</file>

<file path="src/app/portfolio/[slug]/page.tsx">
import { notFound } from 'next/navigation';
import { Metadata } from 'next';
import Link from 'next/link';
import Image from 'next/image';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { ArrowLeft, Github, ExternalLink } from 'lucide-react';
import { portfolioItems } from '@/lib/data/portfolio';
type Props = {
  params: { slug: string };
};
export async function generateStaticParams() {
  return portfolioItems.map((item) => ({
    slug: item.slug,
  }));
}
export async function generateMetadata(props: Props): Promise<Metadata> {
  const project = portfolioItems.find(item => item.slug === props.params.slug);
  if (!project) {
    return { title: 'Project Not Found' };
  }
  return {
    title: `${project.title} | Rishav Nath Pati Portfolio`,
    description: project.description,
    openGraph: {
      title: project.title,
      description: project.description,
      images: [{ url: project.imageUrl, alt: project.title }],
      type: 'article',
    },
    twitter: {
      card: 'summary_large_image',
      title: project.title,
      description: project.description,
      images: [project.imageUrl],
    },
  };
}
export default async function PortfolioDetailPage(props: Props) {
  const project = portfolioItems.find(item => item.slug === props.params.slug);
  if (!project) {
    notFound();
  }
  const relatedProjects = portfolioItems
    .filter(item => item.category === project.category && item.slug !== project.slug)
    .slice(0, 3);
  return (
    <div className="container mx-auto px-4 py-16 lg:py-24">
      <div className="mb-8">
        <Button variant="outline" size="sm" asChild>
          <Link href="/portfolio">
            <ArrowLeft className="mr-2 h-4 w-4" /> Back to Portfolio
          </Link>
        </Button>
      </div>
      <article className="max-w-4xl mx-auto">
        <header className="mb-8">
          <h1 className="text-4xl lg:text-5xl font-bold mb-4 font-raleway text-foreground">
            {project.title}
          </h1>
          <div className="flex flex-wrap gap-2 mb-6">
            {project.tags.map((tag) => (
              <Badge key={tag} variant="secondary">
                {tag}
              </Badge>
            ))}
          </div>
        </header>
        <div className="aspect-video relative mb-8 rounded-lg overflow-hidden border border-border">
          <Image
            src={project.imageUrl}
            alt={project.title}
            fill
            className="object-cover"
            priority
          />
        </div>
        <div className="prose prose-invert max-w-none mb-8">
          <p className="text-lg text-muted-foreground leading-relaxed">
            {project.description}
          </p>
        </div>
        <div className="flex flex-wrap gap-4 mb-12">
          {project.githubUrl && (
            <Button asChild>
              <a href={project.githubUrl} target="_blank" rel="noopener noreferrer">
                <Github className="mr-2 h-5 w-5" /> View on GitHub
              </a>
            </Button>
          )}
          {project.liveUrl && (
            <Button variant="outline" asChild>
              <a href={project.liveUrl} target="_blank" rel="noopener noreferrer">
                <ExternalLink className="mr-2 h-5 w-5" /> Live Demo
              </a>
            </Button>
          )}
        </div>
        {relatedProjects.length > 0 && (
          <section className="border-t border-border pt-12">
            <h2 className="text-2xl font-bold mb-6 font-raleway">Related Projects</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {relatedProjects.map((item) => (
                <Link
                  key={item.slug}
                  href={`/portfolio/${item.slug}`}
                  className="group block"
                >
                  <div className="aspect-video relative rounded-lg overflow-hidden border border-border mb-3">
                    <Image
                      src={item.imageUrl}
                      alt={item.title}
                      fill
                      className="object-cover transition-transform duration-300 group-hover:scale-105"
                    />
                  </div>
                  <h3 className="font-semibold text-lg mb-2 group-hover:text-primary transition-colors">
                    {item.title}
                  </h3>
                  <p className="text-sm text-muted-foreground line-clamp-2">
                    {item.description}
                  </p>
                </Link>
              ))}
            </div>
          </section>
        )}
      </article>
    </div>
  );
}
</file>

<file path="src/app/portfolio/page.tsx">
import Link from 'next/link';
import Image from 'next/image';
import { Metadata } from 'next';
import { Suspense } from 'react';
import { PortfolioCardSkeleton } from '@/components/PortfolioCardSkeleton';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { portfolioItems } from "@/lib/data/portfolio";
import { ArrowRight, Github, ExternalLink } from 'lucide-react';
function PortfolioGrid() {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {portfolioItems.map((item, index) => (
        <Card
          key={item.slug}
          className="flex flex-col overflow-hidden transition-transform duration-300 ease-in-out hover:-translate-y-1 hover:shadow-lg bg-neutral-800/50 group"
        >
          <CardHeader className="p-0">
            <Link href={item.detailsUrl ?? '#'} aria-label={`View details for ${item.title}`}>
              <div className="aspect-video overflow-hidden">
                <Image
                  src={item.imageUrl}
                  alt={item.title}
                  width={600}
                  height={338}
                  className="object-cover w-full h-full transition-transform duration-300 ease-in-out group-hover:scale-105"
                  loading="lazy"
                />
              </div>
            </Link>
          </CardHeader>
          <CardContent className="flex-grow p-5">
            <CardTitle className="text-xl font-semibold mb-2 font-poppins group-hover:text-primary transition-colors">
              <Link href={item.detailsUrl ?? '#'}>
                {item.title}
              </Link>
            </CardTitle>
            <CardDescription className="text-muted-foreground mb-4 text-sm line-clamp-3">
              {item.description}
            </CardDescription>
            <div className="flex flex-wrap gap-2">
              {item.tags.slice(0, 4).map((tag) => (
                <Badge key={tag} variant="secondary">
                  {tag}
                </Badge>
              ))}
              {item.tags.length > 4 && <Badge variant="outline">...</Badge>}
            </div>
          </CardContent>
          <CardFooter className="p-5 bg-muted/30 bg-neutral-800/30 border-t border-border flex justify-between items-center">
            {item.detailsUrl ? (
              <Button variant="ghost" size="sm" asChild>
                <Link href={item.detailsUrl} className="text-sm">
                  Details <ArrowRight className="ml-1 h-4 w-4" />
                </Link>
              </Button>
            ) : <div></div>}
            <div className="flex items-center space-x-2">
              {item.githubUrl && (
                <Button variant="outline" size="icon" className="h-8 w-8" asChild>
                  <a href={item.githubUrl} target="_blank" rel="noopener noreferrer" aria-label="GitHub Repository">
                    <Github className="h-4 w-4" />
                  </a>
                </Button>
              )}
              {item.liveUrl && (
                <Button variant="outline" size="icon" className="h-8 w-8" asChild>
                  <a href={item.liveUrl} target="_blank" rel="noopener noreferrer" aria-label="Live Demo">
                    <ExternalLink className="h-4 w-4" />
                  </a>
                </Button>
              )}
            </div>
          </CardFooter>
        </Card>
      ))}
    </div>
  );
}
export const metadata: Metadata = {
  title: 'Portfolio | Rishav Nath Pati',
  description: 'Explore the full portfolio of games, machine learning projects, and publications by Rishav Nath Pati.',
};
export default function PortfolioPage() {
  return (
    <div className="container mx-auto px-4 py-16 lg:py-24">
      <div className="max-w-3xl mx-auto text-center mb-12 lg:mb-16">
        <h1 className="text-4xl lg:text-5xl font-bold mb-4 font-raleway text-foreground">
          My Portfolio
        </h1>
        <p className="text-lg lg:text-xl text-muted-foreground leading-relaxed">
          A collection of projects demonstrating my skills across game development, machine learning, interactive media, and research.
        </p>
      </div>
      {}
      <Suspense fallback={<PortfolioSkeletonFallback />}>
        <PortfolioGrid />
      </Suspense>
    </div>
  );
}
function PortfolioSkeletonFallback() {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {Array.from({ length: 6 }).map((_, index) => (
        <PortfolioCardSkeleton key={index} />
      ))}
    </div>
  );
}
</file>

<file path="src/app/page.tsx">
import { HeroSection } from '@/components/sections/HeroSection';
import { AboutSection } from '@/components/sections/AboutSection';
import { ExperienceSection } from '@/components/sections/ExperienceSection';
import { SkillsSection } from '@/components/sections/SkillsSection';
import { PortfolioHighlights } from '@/components/sections/PortfolioHighlights';
import { BlogHighlights } from '@/components/sections/BlogHighlights';
import { ContactCTA } from '@/components/sections/ContactCTA';
export default function Home() {
  return (
    <main className="flex flex-col">
      <HeroSection />
      <AboutSection />
      <ExperienceSection />
      <SkillsSection />
      <PortfolioHighlights />
      <BlogHighlights />
      <ContactCTA />
      {}
      <div className="h-20"></div>
    </main>
  );
}
</file>

<file path="src/components/sections/BlogHighlights.tsx">
import Link from 'next/link';
import Image from 'next/image';
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { getSortedPostsData } from "@/lib/blog";
import { ArrowRight, CalendarDays, Clock, FileText, Terminal, BookOpen } from 'lucide-react';
const formatDate = (dateString: string): string => {
  const date = new Date(dateString);
  return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
};
export function BlogHighlights() {
  const recentPosts = getSortedPostsData().slice(0, 3);
  return (
    <section id="blogs" className="py-20 lg:py-28 bg-black/20 backdrop-blur-sm">
      <div className="container mx-auto px-4">
        <div className="max-w-4xl mx-auto mb-12">
          <div className="flex items-center gap-3 mb-6">
            <BookOpen className="w-6 h-6 text-primary" />
            <h2 className="text-2xl font-bold font-mono text-foreground">
              tech_blog.md
            </h2>
          </div>
          <div className="bg-black/30 rounded-lg border border-border p-6">
            <div className="flex items-center gap-2 mb-6 text-muted-foreground">
              <Terminal size={18} />
              <span className="font-mono text-sm">cat recent_posts/</span>
            </div>
            <div className="space-y-6">
              {recentPosts.map((post, index) => (
                <div
                  key={post.slug}
                  className="bg-black/20 rounded-lg border border-border/50 overflow-hidden hover:border-primary/50"
                >
                  <div className="border-b border-border/50 p-4">
                    <div className="flex items-center gap-2 mb-3">
                      <FileText className="w-4 h-4 text-primary" />
                      <Link
                        href={post.externalUrl || `/blog/${post.slug}`}
                        target={post.externalUrl ? '_blank' : '_self'}
                        rel={post.externalUrl ? 'noopener noreferrer' : ''}
                        className="font-mono text-lg text-foreground hover:text-primary"
                      >
                        {post.title}
                      </Link>
                    </div>
                    <div className="flex items-center space-x-4 text-xs text-muted-foreground mb-3 font-mono">
                      <span className="flex items-center gap-1.5">
                        <CalendarDays className="w-3.5 h-3.5" /> {formatDate(post.date)}
                      </span>
                      {post.readTimeMinutes && (
                        <span className="flex items-center gap-1.5">
                          <Clock className="w-3.5 h-3.5" /> ~{post.readTimeMinutes}min
                        </span>
                      )}
                    </div>
                    <p className="text-sm text-muted-foreground font-mono line-clamp-2">
                      {post.excerpt}
                    </p>
                  </div>
                  <div className="aspect-video overflow-hidden border-b border-border/50">
                    <Image
                      src={post.imageUrl}
                      alt={`Thumbnail for ${post.title}`}
                      width={400}
                      height={225}
                      className="object-cover w-full h-full"
                      loading="lazy"
                      sizes="(max-width: 768px) 100vw, 400px"
                    />
                  </div>
                  <div className="p-4">
                    <div className="flex flex-wrap gap-2">
                      {post.tags?.map((tag) => (
                        <Badge key={tag} variant="outline" className="font-mono text-xs">
                          {tag}
                        </Badge>
                      ))}
                    </div>
                  </div>
                </div>
              ))}
            </div>
            <div className="mt-8 text-center">
              <Button size="lg" className="font-mono" asChild>
                <Link href="/blog">
                  cd ./all_posts <ArrowRight className="ml-2 h-5 w-5" />
                </Link>
              </Button>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/sections/ContactCTA.tsx">
import { Button } from '@/components/ui/button';
import { Mail, Terminal, MessageSquare, Send, Laptop, Phone, MapPin } from 'lucide-react';
export function ContactCTA() {
  return (
    <section
      id="contact-cta"
      className="py-20 lg:py-28 bg-black/20 backdrop-blur-sm"
    >
      <div className="container mx-auto px-4">
        <div className="max-w-4xl mx-auto">
          <div className="bg-black/30 rounded-lg border border-border p-6">
            <div className="flex items-center gap-2 mb-6">
              <Terminal className="w-5 h-5 text-primary" />
              <span className="font-mono text-sm text-muted-foreground">contact.sh</span>
            </div>
            <div className="space-y-6" data-aos="fade-up">
              <div className="font-mono">
                <p className="text-muted-foreground mb-2">$ echo "status"</p>
                <p className="text-foreground mb-4 pl-4">
                  <span className="text-green-500">●</span> Available for freelance projects and collaborations
                </p>
                <p className="text-muted-foreground mb-2">$ cat contact_info.txt</p>
                <div className="bg-black/20 rounded border border-border/50 p-4 mb-6">
                  <div className="flex items-center gap-2 mb-3">
                    <MessageSquare className="w-4 h-4 text-primary" />
                    <span className="text-foreground">Let's create something amazing together!</span>
                  </div>
                  <div className="flex items-center gap-2 mb-3">
                    <Laptop className="w-4 h-4 text-primary" />
                    <span className="text-muted-foreground">Open for: Game Dev, XR, AR/VR, AI Integration, Interactive Media</span>
                  </div>
                  <div className="flex items-center gap-2 mb-3">
                    <Phone className="w-4 h-4 text-primary" />
                    <span className="text-muted-foreground">Phone: +91 9123877594</span>
                  </div>
                  <div className="flex items-center gap-2 mb-3">
                    <MapPin className="w-4 h-4 text-primary" />
                    <span className="text-muted-foreground">Kalyani, West Bengal, India</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Send className="w-4 h-4 text-primary" />
                    <span className="text-muted-foreground">Response Time: &lt; 24 hours</span>
                  </div>
                </div>
                <p className="text-muted-foreground mb-2">$ ./send_message.sh</p>
                <div className="pl-4">
                  <Button size="lg" asChild className="font-mono">
                    <a href="mailto:patirishavnath@gmail.com">
                      <Mail className="mr-2 h-5 w-5" /> initialize_conversation.js
                    </a>
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/Footer.tsx">
'use client';
import { Terminal, Heart, Coffee } from 'lucide-react';
export function Footer() {
  return (
    <footer id="footer" className="bg-black/30 backdrop-blur-sm py-6 text-center">
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-center gap-2 text-sm text-muted-foreground font-mono">
          <Terminal size={14} className="text-primary" />
          <span>echo "Made with</span>
          <Heart size={14} className="text-red-500 animate-pulse" />
          <span>and</span>
          <Coffee size={14} className="text-amber-500" />
          <span>in India"</span>
        </div>
        <div className="mt-2 text-xs text-muted-foreground/60 font-mono">
          <span className="text-primary">&gt; </span>
          <span className="typing-animation">Feel free to fork, star, or contribute!</span>
        </div>
        <div className="mt-4 text-sm text-muted-foreground font-mono">
          © Copyright Rishav Nath Pati
        </div>
      </div>
      <style jsx>{`
        @keyframes typing {
          from { width: 0 }
          to { width: 100% }
        }
        .typing-animation {
          display: inline-block;
          overflow: hidden;
          white-space: nowrap;
          animation: typing 3s steps(40, end);
        }
      `}</style>
    </footer>
  );
}
</file>

<file path="src/components/ScrollToTop.tsx">
'use client';
import { useState, useEffect, useRef } from 'react';
import { ArrowUp } from 'lucide-react';
import { Button } from '@/components/ui/button';
export function ScrollToTop() {
  const [isVisible, setIsVisible] = useState(false);
  const [scrollProgress, setScrollProgress] = useState(0);
  const animationFrameId = useRef<number | null>(null);
  useEffect(() => {
    const handleScroll = () => {
      if (animationFrameId.current) {
        cancelAnimationFrame(animationFrameId.current);
      }
      animationFrameId.current = requestAnimationFrame(() => {
        const scrolled = document.documentElement.scrollTop;
        const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
        const newProgress = height > 0 ? Math.round((scrolled / height) * 100) : 0;
        const newVisibility = scrolled > 300;
        setScrollProgress(newProgress);
        if (newVisibility !== isVisible) {
          setIsVisible(newVisibility);
        }
        animationFrameId.current = null;
      });
    };
    window.addEventListener('scroll', handleScroll, { passive: true });
    handleScroll();
    return () => {
      window.removeEventListener('scroll', handleScroll);
      if (animationFrameId.current) {
        cancelAnimationFrame(animationFrameId.current);
      }
    };
  }, [isVisible]);
  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth',
    });
  };
  if (!isVisible) return null;
  return (
    <div className="fixed bottom-24 right-4 z-50">
      <div className="relative h-12 w-12">
        {}
        <svg
          className="absolute inset-0 -rotate-90"
          viewBox="0 0 100 100"
        >
          <circle
            className="text-muted stroke-current"
            strokeWidth="4"
            fill="transparent"
            r="44"
            cx="50"
            cy="50"
          />
          <circle
            className="text-primary stroke-current"
            strokeWidth="4"
            strokeLinecap="round"
            fill="transparent"
            r="44"
            cx="50"
            cy="50"
            style={{
              strokeDasharray: 276.46,
              strokeDashoffset: 276.46 * (1 - scrollProgress / 100),
            }}
          />
        </svg>
        {}
        <div className="absolute inset-0 flex items-center justify-center">
          <Button
            onClick={scrollToTop}
            size="icon"
            className="h-8 w-8 rounded-full hover:bg-primary/80"
            aria-label="Scroll to top"
          >
            <ArrowUp className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/lib/data/blog.ts">
export interface BlogPostHighlight {
  slug: string;
  title: string;
  date: string;
  excerpt: string;
  imageUrl: string;
  tags: string[];
  readTimeMinutes?: number;
  externalUrl?: string;
}
export const blogPostsData: BlogPostHighlight[] = [
  {
    slug: 'mac-terminal-setup',
    title: 'Ultimate Mac Terminal Setup Guide',
    date: '2024-03-15',
    excerpt: 'A comprehensive guide to setting up a modern, efficient terminal environment on macOS with iTerm2, Oh My Zsh, and essential tools.',
    imageUrl: 'https://placehold.co/600x400/444444/ffffff.png?text=Mac+Terminal+Setup',
    tags: ['Development', 'Terminal', 'macOS'],
    readTimeMinutes: 15,
  },
  {
    slug: 'beatrex-ball-dev-journey',
    title: 'Beatrex Ball: A Unity Game Development Journey',
    date: '2023-06-15',
    excerpt: 'Deep dive into the development process of Beatrex Ball, exploring the technical challenges and solutions in creating this rhythm-based mobile game.',
    imageUrl: 'https://placehold.co/600x400/8844ee/ffffff.png?text=Beatrex+Ball+Journey',
    tags: ['GameDev', 'Unity', 'Mobile'],
    readTimeMinutes: 8,
  },
  {
    slug: 'hand-gesture-recognition-research',
    title: 'Real-time Hand Gesture Recognition Research',
    date: '2023-05-20',
    excerpt: 'Research publication on developing an efficient hand gesture recognition system using deep learning and computer vision techniques.',
    imageUrl: 'https://placehold.co/600x400/44aaee/ffffff.png?text=Hand+Gesture+Recognition',
    tags: ['ML', 'Computer Vision', 'Research'],
    readTimeMinutes: 12,
  },
  {
    slug: 'hand-gesture-gui-mediapipe',
    title: 'Realtime Hand Gesture Controlled GUI (Medium)',
    date: '2023-04-15',
    excerpt: 'Learn how to create a hand gesture-controlled interface using computer vision and machine learning with MediaPipe and Python.',
    imageUrl: 'https://placehold.co/600x400/ee4488/ffffff.png?text=Hand+Gesture+GUI+Tutorial',
    tags: ['CV', 'Python', 'MediaPipe'],
    readTimeMinutes: 10,
    externalUrl: 'https://medium.com/@patirishavnath/realtime-hand-gesture-controlled-gui-using-mediapipe-and-python-c80f3a295fb',
  },
  {
    slug: 'brain-tumor-segmentation-unet',
    title: 'Brain Tumor Segmentation Using U-Net (Medium)',
    date: '2023-03-20',
    excerpt: 'Explore how deep learning, specifically the U-Net architecture, can be used for accurate brain tumor detection and segmentation.',
    imageUrl: 'https://placehold.co/600x400/4488ee/ffffff.png?text=Brain+Tumor+Segmentation',
    tags: ['Deep Learning', 'Medical Imaging', 'U-Net'],
    readTimeMinutes: 15,
    externalUrl: 'https://medium.com/@patirishavnath/brain-tumor-segmentation-using-u-net-architecture-d6c32bc9fa82',
  },
];
export const highlightedBlogPosts: BlogPostHighlight[] = blogPostsData
  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
  .slice(0, 3);
</file>

<file path="src/lib/utils/sound.ts">
'use client';
const SOUNDS = {
  select: '',  // '/sounds/select.mp3',
  hover: '',   // '/sounds/hover.mp3',
  success: '', // '/sounds/success.mp3',
} as const;
const VOLUMES = {
  select: 0.2,
  hover: 0.1,
  success: 0.3,
} as const;
type SoundType = keyof typeof SOUNDS;
class SoundManager {
  private static instance: SoundManager;
  private audioElements: Map<SoundType, HTMLAudioElement>;
  private enabled: boolean = true;
  private initialized: boolean = false;
  private constructor() {
    this.audioElements = new Map();
  }
  public static getInstance(): SoundManager {
    if (!SoundManager.instance) {
      SoundManager.instance = new SoundManager();
    }
    return SoundManager.instance;
  }
  private initialize() {
    if (this.initialized || typeof window === 'undefined') return;
    this.initialized = true;
  }
  public play(type: SoundType) {
    return;
  }
  public toggle(enabled: boolean) {
    this.enabled = enabled;
  }
}
export const soundManager = SoundManager.getInstance();
</file>

<file path="src/app/blog/[slug]/page.tsx">
import { getPostData, getAllPostSlugs } from '@/lib/blog';
import { notFound } from 'next/navigation';
import { Metadata } from 'next';
import { MDXRemote } from 'next-mdx-remote/rsc';
import Link from 'next/link';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { CalendarDays, Clock, ArrowLeft } from 'lucide-react';
import rehypePrettyCode from 'rehype-pretty-code';
type Props = {
  params: { slug: string };
};
export async function generateStaticParams() {
  const paths = getAllPostSlugs();
  return paths;
}
export async function generateMetadata(props: Props): Promise<Metadata> {
  const post = await getPostData(props.params.slug);
  if (!post) {
    return { title: 'Post Not Found' };
  }
  return {
    title: `${post.title} | Rishav Nath Pati Blog`,
    description: post.excerpt,
    openGraph: {
      title: post.title,
      description: post.excerpt,
      images: [{ url: post.imageUrl, alt: post.title }],
      type: 'article',
      publishedTime: post.date,
      authors: ['Rishav Nath Pati'],
      tags: post.tags,
    },
    twitter: {
      card: 'summary_large_image',
      title: post.title,
      description: post.excerpt,
      images: [post.imageUrl],
    },
  };
}
const formatDate = (dateString: string): string => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};
const options = {
  theme: 'github-dark',
  keepBackground: true,
  defaultLang: 'plaintext',
  onVisitLine(node: any) {
    if (node.children.length === 0) {
      node.children = [{ type: 'text', value: ' ' }];
    }
  },
  onVisitHighlightedLine(node: any) {
    node.properties.className.push('highlighted');
  },
  onVisitHighlightedWord(node: any) {
    node.properties.className = ['word'];
  },
};
export default async function BlogPostPage(props: Props) {
  const post = await getPostData(props.params.slug);
  if (!post) {
    notFound();
  }
  const components = {
    pre: ({ children, ...props }: React.ComponentProps<'pre'>) => (
      <div className="relative">
        <pre className="overflow-x-auto rounded-lg border bg-neutral-900 py-4 px-2" {...props}>
          {children}
        </pre>
      </div>
    ),
    code: ({ children, ...props }: React.ComponentProps<'code'>) => (
      <code className="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-sm" {...props}>
        {children}
      </code>
    ),
  };
  return (
    <div className="container mx-auto px-4 py-16 lg:py-24 max-w-4xl">
      <div className="mb-8">
        <Button variant="outline" size="sm" asChild>
          <Link href="/blog">
            <ArrowLeft className="mr-2 h-4 w-4" /> Back to Blog
          </Link>
        </Button>
      </div>
      <article>
        <header className="mb-10 border-b border-border pb-8">
          <h1 className="text-4xl lg:text-5xl font-bold mb-4 font-raleway text-foreground leading-tight">
            {post.title}
          </h1>
          <div className="flex flex-wrap items-center gap-x-6 gap-y-2 text-sm text-muted-foreground mb-4">
            <span className="flex items-center gap-1.5">
              <CalendarDays className="w-4 h-4" /> {formatDate(post.date)}
            </span>
            {post.readTimeMinutes && (
              <span className="flex items-center gap-1.5">
                <Clock className="w-4 h-4" /> {post.readTimeMinutes} min read
              </span>
            )}
          </div>
          <div className="flex flex-wrap gap-2">
            {post.tags?.map((tag) => (
              <Badge key={tag} variant="secondary">{tag}</Badge>
            ))}
          </div>
        </header>
        <div className="prose prose-invert max-w-none prose-neutral prose-lg
          prose-headings:font-semibold /* Using prose-invert by default since we're in forced dark mode */
          prose-h1:text-3xl prose-h1:mt-8 prose-h1:mb-4
          prose-h2:text-2xl prose-h2:mt-8 prose-h2:mb-4
          prose-h3:text-xl prose-h3:mt-6 prose-h3:mb-3
          prose-p:mb-4 prose-p:leading-relaxed
          prose-a:text-primary prose-a:no-underline hover:prose-a:text-primary/80
          prose-code:before:content-none prose-code:after:content-none
          prose-pre:my-8 prose-pre:bg-[#1a1a1a] prose-pre:border prose-pre:border-[#333]
          prose-pre:rounded-lg prose-pre:shadow-lg
          prose-img:rounded-lg prose-img:shadow-md
          prose-blockquote:border-l-4 prose-blockquote:border-primary/50
          prose-blockquote:pl-4 prose-blockquote:italic prose-blockquote:text-muted-foreground
          prose-ul:list-disc prose-ul:pl-6 prose-ol:list-decimal prose-ol:pl-6
          prose-li:mb-2 prose-li:pl-2
          prose-strong:font-semibold prose-strong:text-foreground
          prose-em:italic prose-em:text-foreground">
          <MDXRemote
            source={post.content}
            options={{
              mdxOptions: {
                rehypePlugins: [[rehypePrettyCode, {
                  theme: 'one-dark-pro',
                  keepBackground: true,
                  defaultLang: 'plaintext',
                  grid: true,
                }] as any],
              },
            }}
            components={components}
          />
        </div>
      </article>
    </div>
  );
}
</file>

<file path="src/lib/data/portfolio.ts">
export interface PortfolioItem {
  slug: string;
  title: string;
  description: string;
  imageUrl: string;
  tags: string[];
  detailsUrl?: string;
  liveUrl?: string;
  githubUrl?: string;
  category: 'Games' | 'Machine Learning' | 'Publications' | 'Web';
  date?: string;
}
export const portfolioItems: PortfolioItem[] = [
  {
    slug: 'beatrex-ball',
    title: 'Beatrex Ball Game',
    description: 'A rhythm-based mobile game developed with Unity. Features dynamic gameplay that synchronizes with music beats for an immersive gaming experience. This project showcases my expertise in game mechanics, sound integration, and responsive UI design.',
    imageUrl: 'https://placehold.co/600x400/8844ee/ffffff.png?text=Beatrex+Ball',
    tags: ['Unity', 'C#', 'Mobile Game', 'Rhythm', 'iOS', 'Android'],
    detailsUrl: '/portfolio/beatrex-ball',
    githubUrl: 'https://github.com/rishavnathpati/BeatRex-Ball',
    category: 'Games',
    date: '2023-06-15'
  },
  {
    slug: 'itch-io-collection',
    title: 'Collection of games on Itch.io',
    description: 'A diverse collection of games published on the Itch.io platform, showcasing various game mechanics and design principles implemented across different projects. These games demonstrate my versatility in developing across various genres from casual to educational games.',
    imageUrl: 'https://placehold.co/600x400/44aaee/ffffff.png?text=Itch.io+Collection',
    tags: ['Unity', 'C#', 'Game Design', 'Game Development', 'Casual Games', 'Hyper-casual'],
    detailsUrl: '/portfolio/itch-io-collection',
    liveUrl: 'https://rishavnathpati.itch.io/',
    category: 'Games',
    date: '2023-05-20'
  },
  {
    slug: 'journey-under-the-sea',
    title: 'Journey Under the Sea Game',
    description: 'An immersive underwater adventure game with stunning visuals and engaging gameplay that takes players on an exploration journey beneath the ocean. This project highlights my ability to create atmospheric environments and engaging player experiences.',
    imageUrl: 'https://placehold.co/600x400/44ee99/ffffff.png?text=Journey+Under+the+Sea',
    tags: ['Unity', 'C#', 'Game Development', '3D', 'Adventure', 'Immersive Experience'],
    detailsUrl: '/portfolio/journey-under-the-sea',
    category: 'Games',
    date: '2023-02-10'
  },
  {
    slug: 'hand-gesture-gui',
    title: 'Hand Gesture Controlled GUI',
    description: 'Computer vision project utilizing MediaPipe and OpenCV to create a real-time hand gesture recognition system that allows controlling graphical interfaces with hand movements. This project demonstrates my expertise in combining computer vision with interactive applications.',
    imageUrl: 'https://placehold.co/600x400/ee4488/ffffff.png?text=Hand+Gesture+GUI',
    tags: ['Python', 'OpenCV', 'MediaPipe', 'Computer Vision', 'HCI', 'Machine Learning'],
    detailsUrl: '/portfolio/hand-gesture-gui',
    githubUrl: 'https://github.com/rishavnathpati/Hand-Gesture-Control',
    category: 'Machine Learning',
    date: '2023-04-15'
  },
  {
    slug: 'yoga-asana-trainer',
    title: 'Yoga Asana Trainer',
    description: 'AI-powered application that guides users through yoga poses and provides real-time feedback on posture and alignment using computer vision and pose estimation techniques. This project combines my interest in wellness with technical expertise in machine learning.',
    imageUrl: 'https://placehold.co/600x400/eeaa44/ffffff.png?text=Yoga+Asana+Trainer',
    tags: ['Python', 'TensorFlow', 'MediaPipe', 'AI', 'Fitness Tech', 'Pose Estimation'],
    detailsUrl: '/portfolio/yoga-asana-trainer',
    githubUrl: 'https://github.com/rishavnathpati/Yoga-Asana-Trainer',
    category: 'Machine Learning',
    date: '2022-11-28'
  },
  {
    slug: 'brain-tumor-segmentation',
    title: 'Brain Tumor Extraction Publication',
    description: 'Research publication on brain tumor segmentation using U-Net architecture for automated detection and segmentation of tumors in MRI scans, improving diagnostic accuracy. This paper highlights my ability to apply deep learning techniques to solve complex medical imaging problems.',
    imageUrl: 'https://placehold.co/600x400/4488ee/ffffff.png?text=Brain+Tumor+Segmentation',
    tags: ['Deep Learning', 'U-Net', 'Medical Imaging', 'Python', 'Research', 'Publication'],
    detailsUrl: '/portfolio/brain-tumor-publication',
    category: 'Publications',
    date: '2023-03-20'
  },
  {
    slug: 'convai-integration',
    title: 'Conversational AI in Unity',
    description: 'Developed end-to-end speech solutions and integrated conversational AI within Unity environments. This project showcases my work at Convai, where I designed and implemented AI-driven interactive character systems using gRPC networking and advanced prompt engineering.',
    imageUrl: 'https://placehold.co/600x400/44ccee/ffffff.png?text=Convai+Integration',
    tags: ['Unity', 'C#', 'AI', 'Conversational AI', 'gRPC', 'Speech Recognition'],
    detailsUrl: '/portfolio/convai-integration',
    category: 'Games',
    date: '2023-09-15'
  },
];
export const highlightedPortfolioItems: PortfolioItem[] = [
  portfolioItems[0],
  portfolioItems[6],
  portfolioItems[3],
  portfolioItems[5],
];
</file>

<file path="package.json">
{
  "name": "my-portfolio",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "npm run sitemap && next build",
    "start": "next start",
    "lint": "next lint",
    "sitemap": "node ./scripts/generate-sitemap.mjs"
  },
  "dependencies": {
    "@mdx-js/loader": "^3.1.0",
    "@mdx-js/react": "^3.1.0",
    "@next/mdx": "^15.2.4",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-toast": "^1.2.6",
    "@tailwindcss/typography": "^0.5.16",
    "@types/mdx": "^2.0.13",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "geist": "^1.3.1",
    "gray-matter": "^4.0.3",
    "lucide-react": "^0.485.0",
    "next": "15.2.4",
    "next-mdx-remote": "^5.0.0",
    "next-themes": "^0.4.6",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "rehype-pretty-code": "^0.13.2",
    "remark-gfm": "^4.0.1",
    "shiki": "^1.29.2",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7",
    "typed.js": "^2.1.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.4",
    "globby": "^14.1.0",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
</file>

<file path="tailwind.config.ts">
import type { Config } from 'tailwindcss';
const config: Config = {
  content: ['./src/**/*.{ts,tsx}'],
  prefix: '',
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px',
      },
    },
    extend: {
      fontFamily: {
        sans: ['var(--font-geist-sans)', 'sans-serif'],
        mono: ['var(--font-geist-mono)', 'monospace'],
      },
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'bounce-slow': {
          '0%, 100%': {
            transform: 'translateY(0)',
          },
          '50%': {
            transform: 'translateY(25%)',
          },
        },
      },
      animation: {
        'bounce-slow': 'bounce-slow 2s ease-in-out infinite',
      },
    },
  },
  plugins: [require('@tailwindcss/typography')],
  future: {
    hoverOnlyWhenSupported: true,
  }
} satisfies Config;
export default config;
</file>

<file path="src/components/easter-eggs/KonamiCode.tsx">
'use client';
import { useEffect, useState, useCallback } from 'react';
import { useConsole } from '@/components/ui/console-provider';
const CHEAT_CODES = {
  konami: {
    sequence: ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'b', 'a'],
    name: 'Konami Code',
    effect: 'Celebration Mode'
  },
  debug: {
    sequence: ['d', 'e', 'b', 'u', 'g'],
    name: 'Debug Mode',
    effect: 'Console Visibility'
  }
};
export function KonamiCode() {
  const [input, setInput] = useState<string[]>([]);
  const { log, success, warn } = useConsole();
  const maxSequenceLength = Math.max(...Object.values(CHEAT_CODES).map(code => code.sequence.length));
  useEffect(() => {
    if (typeof window === 'undefined') return;
    let lastKeyTime = 0;
    const keyDebounceTime = 100;
    const handleKeyDown = (e: KeyboardEvent) => {
      const now = Date.now();
      if (now - lastKeyTime < keyDebounceTime) return;
      lastKeyTime = now;
      const key = e.key.toLowerCase();
      const newInput = [...input, key];
      if (newInput.length > maxSequenceLength) {
        newInput.shift();
      }
      setInput(newInput);
      for (const [codeName, code] of Object.entries(CHEAT_CODES)) {
        const sequence = code.sequence.map(k => k.toLowerCase());
        if (newInput.slice(-sequence.length).join(',') === sequence.join(',')) {
          activateCheatCode(codeName as keyof typeof CHEAT_CODES);
          setInput([]);
          break;
        }
      }
    };
    window.addEventListener('keydown', handleKeyDown, { passive: true });
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [input, maxSequenceLength]);
  const celebrateKonamiCode = useCallback(() => {
    const colors = ['#ff0000', '#00ff00', '#0000ff'];
    const message = document.createElement('div');
    message.textContent = '🎮 Achievement: Konami!';
    message.style.cssText = `
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0, 0, 0, 0.9);
      color: ${colors[1]};
      padding: 1rem;
      border-radius: 0.5rem;
      border: 1px solid ${colors[1]};
      font-family: monospace;
      z-index: 9999;
      transition: opacity 0.3s ease;
    `;
    document.body.appendChild(message);
    setTimeout(() => {
      message.style.opacity = '0';
      setTimeout(() => message.remove(), 300);
    }, 1500);
  }, []);
  const activateCheatCode = useCallback((codeName: keyof typeof CHEAT_CODES) => {
    const code = CHEAT_CODES[codeName];
    log(`Cheat code detected: ${code.name}`);
    success(`Activating ${code.effect}...`);
    switch (codeName) {
      case 'konami':
        celebrateKonamiCode();
        break;
      case 'debug':
        warn('Debug mode activated - console will remain visible');
        break;
    }
  }, [log, success, warn, celebrateKonamiCode]);
  return null;
}
</file>

<file path="src/components/effects/FloatingParticles.tsx">
'use client';
import { useRef, useEffect } from 'react';
interface ParticleConfig {
  count: number;
  color: string;
  maxSize: number;
  minSize: number;
  maxSpeed: number;
}
interface Particle {
  x: number;
  y: number;
  size: number;
  speedX: number;
  speedY: number;
  opacity: number;
  color: string;
}
export default function FloatingParticles() {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  useEffect(() => {
    if (typeof window === 'undefined') return;
    const canvas = canvasRef.current;
    if (!canvas) return;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };
    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();
    const config: ParticleConfig = {
      count: 30,
      color: '#ffffff',
      maxSize: 2.5,
      minSize: 0.8,
      maxSpeed: 1,
    };
    const particles: Particle[] = [];
    for (let i = 0; i < config.count; i++) {
      particles.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        size: config.minSize + Math.random() * (config.maxSize - config.minSize),
        speedX: (Math.random() - 0.5) * config.maxSpeed,
        speedY: (Math.random() - 0.5) * config.maxSpeed,
        opacity: 0.1 + Math.random() * 0.6,
        color: config.color,
      });
    }
    let animationFrameId: number;
    let lastTime = 0;
    const targetFPS = 24;
    const frameInterval = 1000 / targetFPS;
    const draw = (currentTime: number) => {
      const deltaTime = currentTime - lastTime;
      if (deltaTime > frameInterval) {
        lastTime = currentTime - (deltaTime % frameInterval);
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';
        particles.forEach((particle) => {
          ctx.beginPath();
          ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
          ctx.globalAlpha = particle.opacity;
          ctx.fill();
          particle.x += particle.speedX;
          particle.y += particle.speedY;
          if (particle.x < 0) particle.x = canvas.width;
          if (particle.x > canvas.width) particle.x = 0;
          if (particle.y < 0) particle.y = canvas.height;
          if (particle.y > canvas.height) particle.y = 0;
        });
      }
      animationFrameId = requestAnimationFrame(draw);
    };
    draw(performance.now());
    return () => {
      window.removeEventListener('resize', resizeCanvas);
      cancelAnimationFrame(animationFrameId);
    };
  }, []);
  return (
    <canvas
      ref={canvasRef}
      className="fixed inset-0 pointer-events-none z-[5] allow-animation"
      style={{ mixBlendMode: "screen", opacity: 0.6 }}
    />
  );
}
</file>

<file path="src/components/sections/AboutSection.tsx">
import Image from 'next/image';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Download, Mail, MapPin, Calendar, UserCheck, Briefcase, Code2, Terminal, Phone, Globe2, Cake } from 'lucide-react';
const calculateAge = (birthDate: string): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};
export function AboutSection() {
  const dob = '2001-05-03';
  const age = calculateAge(dob);
  return (
    <section id="about" className="py-20 lg:py-28 bg-black/20 backdrop-blur-sm">
      <div className="container mx-auto px-4">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-12 items-start">
          <div className="lg:col-span-1" data-aos="fade-right">
            <div className="bg-black/30 rounded-lg border border-border p-6">
              <div className="flex justify-center mb-6">
                <Image
                  src="/profile-img.jpg"
                  alt="Rishav Nath Pati"
                  width={250}
                  height={250}
                  className="rounded-lg shadow-lg object-cover border-2 border-primary/20"
                  loading="lazy"
                />
              </div>
              <div className="space-y-4 font-mono">
                <div className="flex items-center space-x-3 text-sm">
                  <Calendar className="w-4 h-4 text-primary" />
                  <span className="text-muted-foreground">birthday: <span className="text-foreground">3 May 2001</span></span>
                </div>
                <div className="flex items-center space-x-3 text-sm">
                  <Cake className="w-4 h-4 text-primary" />
                  <span className="text-muted-foreground">age: <span className="text-foreground">{age}</span></span>
                </div>
                <div className="flex items-center space-x-3 text-sm">
                  <MapPin className="w-4 h-4 text-primary" />
                  <span className="text-muted-foreground">location: <span className="text-foreground">Kolkata, West Bengal, India</span></span>
                </div>
                <div className="flex items-center space-x-3 text-sm">
                  <Phone className="w-4 h-4 text-primary" />
                  <span className="text-muted-foreground">phone: <span className="text-foreground">+91 9123877594</span></span>
                </div>
                <div className="flex items-center space-x-3 text-sm">
                  <UserCheck className="w-4 h-4 text-primary" />
                  <span className="text-muted-foreground">degree: <span className="text-foreground">Masters in Computer Application</span></span>
                </div>
                <div className="flex items-center space-x-3 text-sm">
                  <Code2 className="w-4 h-4 text-primary" />
                  <span className="text-muted-foreground">role: <span className="text-foreground">Game & Interactive Media Developer</span></span>
                </div>
                <div className="flex items-center space-x-3 text-sm">
                  <Mail className="w-4 h-4 text-primary" />
                  <span className="text-muted-foreground">email: <span className="text-foreground">patirishavnath@gmail.com</span></span>
                </div>
                <div className="flex items-center space-x-3 text-sm">
                  <Globe2 className="w-4 h-4 text-primary" />
                  <span className="text-muted-foreground">website: <span className="text-foreground">patirishavnath.github.io</span></span>
                </div>
                <div className="flex items-center space-x-3 text-sm">
                  <Briefcase className="w-4 h-4 text-primary" />
                  <span className="text-muted-foreground">freelance: <span className="text-green-500">available</span></span>
                </div>
              </div>
            </div>
          </div>
          <div className="lg:col-span-2" data-aos="fade-left">
            <div className="bg-black/30 rounded-lg border border-border p-6">
              <div className="flex items-center gap-2 mb-6">
                <Terminal className="w-5 h-5 text-primary" />
                <h2 className="text-2xl font-bold font-mono text-foreground">
                  cat about.md
                </h2>
              </div>
              <div className="space-y-6 text-muted-foreground">
                <div>
                  <p className="leading-relaxed mb-4">
                    🎮 As a seasoned Game Developer, I possess extensive expertise in C# and Unity3D. My portfolio boasts over 10 published titles across mobile platforms (Android and iOS) and PC, encompassing a diverse range of genres including casual, hyper-casual, free-to-play, and educational games. My experience spans the entire development lifecycle, from initial concept to final product delivery.
                  </p>
                  <p className="leading-relaxed mb-4">
                    ⚙️ Proficient in Git and other version control systems, I excel in fostering seamless collaboration and efficient project management. As a self-motivated professional, I have consistently demonstrated success in my endeavors. I take great pride in adhering to clean coding practices, consistently striving to create games that are both efficient and high-performing.
                  </p>
                  <p className="leading-relaxed mb-4">
                    🧪 My ability to rapidly prototype and willingness to explore uncharted territories are key strengths. This approach enables me to contribute innovative ideas, resulting in captivating and enjoyable gaming experiences that push the boundaries of interactive entertainment.
                  </p>
                  <p className="leading-relaxed mb-4">
                    If you're in search of a passionate and dedicated Game Developer to elevate your team, I'd be delighted to connect. After all, in the game of talent acquisition, I might just be the power-up your project needs! 🎮🚀
                  </p>
                  <p className="leading-relaxed">
                    As a Game and Interactive Media Developer with over 5 years of experience in Computer Science and 3+ years specializing in Unity, I bring a wealth of expertise to mobile games, AR/VR, and beyond. My passion lies in crafting immersive experiences that captivate users through engaging gameplay, stunning visuals, and intuitive UI design. Leveraging Unity's powerful capabilities, I develop cross-platform applications for iOS and Android, ensuring wide accessibility. My collaborative approach and effective communication skills enable me to thrive in multidisciplinary teams, translating innovative ideas into reality. I am driven by the desire to evoke emotions and challenge perceptions through my work, constantly pushing the boundaries of what's possible in interactive media. With a commitment to excellence and a creative mindset, I am dedicated to delivering unforgettable experiences that resonate with users.
                  </p>
                </div>
                <div>
                  <h3 className="text-foreground font-mono mb-3">$ key_competencies</h3>
                  <ul className="list-disc pl-6 space-y-2 text-muted-foreground">
                    <li>Exceptional multitasking abilities, allowing me to efficiently manage complex development processes, troubleshoot issues, and maintain productivity even under high-pressure situations</li>
                    <li>Keen attention to detail, particularly in visual elements, ensuring pixel-perfect designs and seamless user experiences across all projects</li>
                    <li>Strong character development skills, balancing creative design with practical gameplay mechanics to create compelling and challenging game experiences</li>
                    <li>Advanced debugging proficiency, with the ability to quickly identify, analyze, and resolve complex issues in code and game systems</li>
                    <li>Extraordinary perseverance in quality assurance, demonstrating the ability to conduct thorough and repeated playtesting to ensure optimal game balance and user satisfaction</li>
                  </ul>
                </div>
                <div className="flex flex-col sm:flex-row gap-4 pt-4">
                  <Button asChild size="lg" className="font-mono">
                    <a href="/Rishav_Nath_Pati_Resume.pdf" download>
                      <Download className="mr-2 h-5 w-5" /> download_cv.pdf
                    </a>
                  </Button>
                  <Button asChild variant="outline" size="lg" className="font-mono">
                    <a href="mailto:patirishavnath@gmail.com">
                      <Mail className="mr-2 h-5 w-5" /> send_email.sh
                    </a>
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/sections/HeroSection.tsx">
'use client';
import React, { useState, useEffect, useRef } from 'react';
import Typed from 'typed.js';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { ArrowDown, Terminal, Gamepad2 } from 'lucide-react';
interface Particle {
  x: number;
  y: number;
  size: number;
  speedX: number;
  speedY: number;
  opacity: number;
}
export function HeroSection() {
  const el = React.useRef(null);
  const heroContentRef = React.useRef<HTMLDivElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const particlesRef = useRef<Particle[]>([]);
  const mouseRef = useRef({ x: 0, y: 0 });
  const animationFrameId = useRef<number | null>(null);
  const [isHoveringGamepad, setIsHoveringGamepad] = useState(false);
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };
    const createParticles = () => {
      particlesRef.current = Array.from({ length: 50 }).map(() => ({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        size: Math.random() * 3 + 1,
        speedX: (Math.random() - 0.5) * 0.5,
        speedY: (Math.random() - 0.5) * 0.5,
        opacity: Math.random() * 0.5 + 0.1
      }));
    };
    const animate = () => {
      if (!ctx || !canvas) return;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      particlesRef.current.forEach((particle, i) => {
        particle.x += particle.speedX;
        particle.y += particle.speedY;
        const dx = mouseRef.current.x - particle.x;
        const dy = mouseRef.current.y - particle.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        if (distance < 100) {
          const angle = Math.atan2(dy, dx);
          particle.x -= Math.cos(angle) * 0.5;
          particle.y -= Math.sin(angle) * 0.5;
        }
        if (particle.x < 0) particle.x = canvas.width;
        if (particle.x > canvas.width) particle.x = 0;
        if (particle.y < 0) particle.y = canvas.height;
        if (particle.y > canvas.height) particle.y = 0;
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        ctx.fillStyle = `hsla(var(--primary), ${particle.opacity})`;
        ctx.fill();
      });
      animationFrameId.current = requestAnimationFrame(animate);
    };
    const handleMouseMove = (e: MouseEvent) => {
      mouseRef.current = {
        x: e.clientX,
        y: e.clientY
      };
    };
    window.addEventListener('resize', resizeCanvas);
    window.addEventListener('mousemove', handleMouseMove);
    resizeCanvas();
    createParticles();
    animate();
    return () => {
      window.removeEventListener('resize', resizeCanvas);
      window.removeEventListener('mousemove', handleMouseMove);
      if (animationFrameId.current) {
        cancelAnimationFrame(animationFrameId.current);
      }
    };
  }, []);
  React.useEffect(() => {
    if (!el.current) return;
    const typed = new Typed(el.current, {
      strings: [
        'GameDev',
        'Game & Interactive Media Developer',
        'Interactive Media Developer @ Convai',
        'Unity | 2D,3D,AR/VR',
      ],
      typeSpeed: 70,
      backSpeed: 50,
      backDelay: 3000,
      startDelay: 1000,
      loop: true,
      smartBackspace: false,
    });
    return () => {
      typed.destroy();
    };
  }, []);
  return (
    <section
      id="hero"
      className="min-h-screen w-full flex flex-col justify-center items-center px-4 relative overflow-hidden"
    >
      <canvas
        ref={canvasRef}
        className="absolute inset-0 z-0"
        style={{ opacity: 0.6 }}
      />
      <div
        ref={heroContentRef}
        className="z-10 max-w-4xl w-full transition-transform duration-100 ease-out backdrop-blur-sm"
        style={{ willChange: 'transform' }}
      >
        <div className="bg-black/40 rounded-lg border border-border p-6 mb-8 relative overflow-hidden">
          <div
            className="absolute inset-0 bg-gradient-to-br from-primary/5 to-transparent pointer-events-none"
            style={{
              maskImage: 'radial-gradient(circle at center, black, transparent)',
              WebkitMaskImage: 'radial-gradient(circle at center, black, transparent)'
            }}
          />
          <div className="relative">
            <div className="flex items-center gap-2 mb-4 text-muted-foreground">
              <Terminal size={20} />
              <span className="text-sm font-mono">portfolio.sh</span>
            </div>
            <div className="font-mono">
              <div className="flex items-center gap-2 mb-2">
                <p className="text-muted-foreground">$ whoami</p>
                <Gamepad2
                  size={20}
                  className={`text-primary transition-all duration-300 cursor-pointer ${isHoveringGamepad ? 'rotate-12 scale-110' : ''}`}
                  onMouseEnter={() => setIsHoveringGamepad(true)}
                  onMouseLeave={() => setIsHoveringGamepad(false)}
                />
              </div>
              <h1 className="text-3xl sm:text-4xl md:text-5xl font-bold mb-4 text-primary bg-clip-text">
                Rishav Nath Pati
              </h1>
              <p className="text-muted-foreground mb-2">$ current_role</p>
              <p className="text-lg sm:text-xl md:text-2xl mb-6">
                I'm a <span ref={el} className="text-foreground"></span>
                <span className="animate-blink">|</span>
              </p>
              <p className="text-muted-foreground mb-2">$ next_action</p>
              <div className="flex flex-col sm:flex-row gap-4">
                <Button
                  asChild
                  size="lg"
                  className="font-mono relative overflow-hidden group"
                >
                  <Link href="#portfolio">
                    <span className="relative z-10">view_portfolio.exe</span>
                    <div className="absolute inset-0 bg-primary/10 transform translate-y-full group-hover:translate-y-0 transition-transform duration-200" />
                  </Link>
                </Button>
                <Button
                  asChild
                  variant="outline"
                  size="lg"
                  className="font-mono relative overflow-hidden group"
                >
                  <Link href="#contact-cta">
                    <span className="relative z-10">contact_me.sh</span>
                    <div className="absolute inset-0 bg-primary/5 transform translate-y-full group-hover:translate-y-0 transition-transform duration-200" />
                  </Link>
                </Button>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div className="absolute bottom-10 left-1/2 transform -translate-x-1/2 z-10">
        <Link href="#about" aria-label="Scroll down to about section">
          <ArrowDown className="w-6 h-6 text-muted-foreground hover:text-primary transition-colors animate-bounce-slow" />
        </Link>
      </div>
    </section>
  );
}
</file>

<file path="src/components/sections/PortfolioHighlights.tsx">
'use client';
import { useState } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { highlightedPortfolioItems } from "@/lib/data/portfolio";
import { ArrowRight, Github, ExternalLink, FolderGit2, GitBranch, Star, GitFork, ChevronDown, ChevronUp } from 'lucide-react';
export function PortfolioHighlights() {
  const [expandedItem, setExpandedItem] = useState<string | null>(null);
  return (
    <section id="portfolio" className="py-20 lg:py-28 bg-black/20 backdrop-blur-sm">
      <div className="container mx-auto px-4">
        <div className="max-w-4xl mx-auto mb-12">
          <div className="flex items-center gap-3 mb-6">
            <FolderGit2 className="w-6 h-6 text-primary" />
            <h2 className="text-2xl font-bold font-mono text-foreground">
              featured_repos
            </h2>
          </div>
          <div className="bg-black/30 rounded-lg border border-border p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {highlightedPortfolioItems.map((item, index) => {
                const isExpanded = expandedItem === item.slug;
                return (
                  <div
                    key={item.slug}
                    className={`bg-black/20 rounded-lg border border-border/50 overflow-hidden ${
                      isExpanded ? 'md:col-span-2' : ''
                    } hover:border-primary/50`}
                  >
                    <div
                      className="border-b border-border/50 p-4 cursor-pointer"
                      onClick={() => setExpandedItem(isExpanded ? null : item.slug)}
                    >
                      <div className="flex items-start justify-between gap-4">
                        <div className="flex-grow">
                          <div className="flex items-center gap-2 mb-2">
                            <GitBranch className="w-4 h-4 text-primary" />
                            <h3 className="font-mono text-lg text-foreground hover:text-primary">
                              {item.title}
                            </h3>
                          </div>
                          <p className={`text-sm text-muted-foreground font-mono ${isExpanded ? '' : 'line-clamp-2'}`}>
                            {item.description}
                          </p>
                        </div>
                        <div className="flex flex-col items-end gap-3">
                          <div className="flex items-center gap-3 text-muted-foreground">
                            <div className="flex items-center gap-1">
                              <Star className="w-4 h-4" />
                              <span className="text-sm font-mono">24</span>
                            </div>
                            <div className="flex items-center gap-1">
                              <GitFork className="w-4 h-4" />
                              <span className="text-sm font-mono">8</span>
                            </div>
                          </div>
                          {isExpanded ? (
                            <ChevronUp className="w-4 h-4 text-primary" />
                          ) : (
                            <ChevronDown className="w-4 h-4 text-muted-foreground" />
                          )}
                        </div>
                      </div>
                    </div>
                    <div className={isExpanded ? 'block' : 'hidden'}>
                      {isExpanded && (
                        <div className="aspect-video overflow-hidden border-b border-border/50">
                          <Image
                            src={item.imageUrl}
                            alt={item.title}
                            width={400}
                            height={225}
                            className="object-cover w-full h-full"
                            loading="lazy"
                          />
                        </div>
                      )}
                      <div className="p-4">
                        <div className="flex flex-wrap gap-2 mb-4">
                          {item.tags.map((tag) => (
                            <Badge key={tag} variant="outline" className="font-mono text-xs">
                              {tag}
                            </Badge>
                          ))}
                        </div>
                        <div className="flex justify-between items-center">
                          <Button variant="ghost" size="sm" asChild className="font-mono text-xs">
                            <Link href={item.detailsUrl || '#'}>
                              view_details.md <ArrowRight className="ml-1 h-3 w-3" />
                            </Link>
                          </Button>
                          <div className="flex items-center gap-2">
                            {item.githubUrl && (
                              <Button variant="outline" size="icon" className="h-8 w-8" asChild>
                                <a href={item.githubUrl} target="_blank" rel="noopener noreferrer" aria-label="GitHub Repository">
                                  <Github className="h-4 w-4" />
                                </a>
                              </Button>
                            )}
                            {item.liveUrl && (
                              <Button variant="outline" size="icon" className="h-8 w-8" asChild>
                                <a href={item.liveUrl} target="_blank" rel="noopener noreferrer" aria-label="Live Demo">
                                  <ExternalLink className="h-4 w-4" />
                                </a>
                              </Button>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
            <div className="mt-8 text-center">
              <Button size="lg" className="font-mono" asChild>
                <Link href="/portfolio">
                  ls -la ./all_projects <ArrowRight className="ml-2 h-5 w-5" />
                </Link>
              </Button>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/sections/SkillsSection.tsx">
'use client';
import { useState, useEffect } from 'react';
import { Badge } from "@/components/ui/badge";
import { skillCategories } from "@/lib/data/skills";
import { Terminal, Code2, Command, Volume2, VolumeX } from "lucide-react";
import { LoadingOverlay } from "@/components/ui/loading-overlay";
import { useConsole } from "@/components/ui/console-provider";
import { soundManager } from "@/lib/utils/sound";
const toggleSound = (enabled: boolean) => {
  soundManager.toggle(enabled);
  return enabled;
};
export function SkillsSection() {
  const [isLoading, setIsLoading] = useState(false);
  const [selectedSkill, setSelectedSkill] = useState<string | null>(null);
  const [soundEnabled, setSoundEnabled] = useState(true);
  const { log, success } = useConsole();
  useEffect(() => {
    const handleKeyPress = (e: KeyboardEvent) => {
      if (isLoading) return;
      let currentCatIndex = -1;
      let currentSkillIndex = -1;
      skillCategories.forEach((cat, catIdx) => {
        const skillIdx = cat.skills.findIndex(s => s.name === selectedSkill);
        if (skillIdx !== -1) {
          currentCatIndex = catIdx;
          currentSkillIndex = skillIdx;
        }
      });
      if (e.key.toLowerCase() === 'm') {
        setSoundEnabled(!soundEnabled);
        toggleSound(!soundEnabled);
        log(`Sound effects ${!soundEnabled ? 'enabled' : 'disabled'}`);
        return;
      }
      if (e.key === 'Tab') {
        e.preventDefault();
        let nextSkill = null;
        if (selectedSkill) {
          let foundCurrent = false;
          let foundNext = false;
          outerLoop: for (let catIdx = 0; catIdx < skillCategories.length; catIdx++) {
            for (let skillIdx = 0; skillIdx < skillCategories[catIdx].skills.length; skillIdx++) {
              const skill = skillCategories[catIdx].skills[skillIdx];
              if (skill.name === selectedSkill) {
                foundCurrent = true;
                continue;
              }
              if (foundCurrent) {
                nextSkill = skill;
                foundNext = true;
                break outerLoop;
              }
            }
          }
          if (!foundNext) {
            nextSkill = skillCategories[0].skills[0];
          }
        } else {
          nextSkill = skillCategories[0].skills[0];
        }
        if (nextSkill) {
          setSelectedSkill(nextSkill.name);
          log(`Selected: ${nextSkill.name}`);
          soundManager.play('select');
        }
      }
      if (e.key === 'Escape' && selectedSkill) {
        setSelectedSkill(null);
        log('Selection cleared');
        soundManager.play('hover');
      }
    };
    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [selectedSkill, isLoading, log, soundEnabled]);
  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setIsLoading(true);
            log('Initializing skill tree...');
            setTimeout(() => {
              setIsLoading(false);
              success('Skill tree data loaded successfully');
              soundManager.play('success');
            }, 1500);
          }
        });
      },
      { threshold: 0.2 }
    );
    const section = document.getElementById('skills');
    if (section) {
      observer.observe(section);
    }
    return () => observer.disconnect();
  }, [log, success]);
  return (
    <section id="skills" className="py-20 lg:py-28 bg-black/20 backdrop-blur-sm relative">
      <LoadingOverlay isLoading={isLoading} text="Loading Skill Tree" />
      <div className="container mx-auto px-4">
        <div className="max-w-4xl mx-auto mb-12">
          {}
          <div className="flex flex-wrap items-center gap-4 text-xs text-muted-foreground font-mono mb-6 bg-black/30 p-3 rounded-lg border border-border/20">
            <Command size={14} className="text-primary" />
            <div className="flex items-center gap-2">
              <kbd className="px-2 py-1 bg-black/50 rounded border border-primary/20">Tab</kbd>
              <span>Navigate Skills</span>
            </div>
            <div className="flex items-center gap-2">
              <kbd className="px-2 py-1 bg-black/50 rounded border border-primary/20">ESC</kbd>
              <span>Clear Selection</span>
            </div>
            <div className="flex items-center gap-2">
              <kbd className="px-2 py-1 bg-black/50 rounded border border-primary/20">M</kbd>
              <span>Toggle Sound</span>
            </div>
          </div>
          <div className="flex items-center justify-between gap-3 mb-6">
            <div className="flex items-center gap-3">
              <Code2 className="w-6 h-6 text-primary" />
              <h2 className="text-2xl font-bold font-mono text-foreground">
                tech_stack.json
              </h2>
            </div>
            <button
              onClick={() => {
                setSoundEnabled(!soundEnabled);
                toggleSound(!soundEnabled);
                log(`Sound effects ${!soundEnabled ? 'enabled' : 'disabled'}`);
              }}
              className="p-2 rounded-md bg-black/30 border border-border hover:border-primary transition-colors group"
              aria-label={soundEnabled ? "Disable sound effects" : "Enable sound effects"}
            >
              {soundEnabled ? (
                <Volume2 size={18} className="text-primary group-hover:scale-110 transition-transform" />
              ) : (
                <VolumeX size={18} className="text-muted-foreground group-hover:scale-110 transition-transform" />
              )}
            </button>
          </div>
          <div className="bg-black/30 rounded-lg border border-border p-6 relative overflow-hidden">
            {}
            <div className="flex items-center gap-2 mb-6 text-muted-foreground">
              <Terminal size={18} />
              <span className="font-mono text-sm">cat skills_overview.md</span>
            </div>
            {}
            <p className="text-muted-foreground leading-relaxed mb-8 font-mono">
              As a Game and Interactive Media Developer with over 5 years of experience in Computer Science and 3+ years
              specializing in Unity, I bring a wealth of expertise to mobile games, AR/VR, and beyond. My passion lies in
              crafting immersive experiences that captivate users through engaging gameplay, stunning visuals, and intuitive UI design.
            </p>
            {}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {skillCategories.map((category, index) => (
                <div
                  key={category.title}
                  className={`bg-black/20 rounded-lg border border-border/50 overflow-hidden ${
                    isLoading ? 'opacity-0' : 'opacity-100'
                  }`}
                >
                  {}
                  <div className="border-b border-border/50 px-4 py-2 flex items-center gap-2 bg-black/40">
                    <span className="font-mono text-sm text-primary">{category.icon}</span>
                    <h3 className="font-mono text-sm text-foreground">
                      {category.title}
                    </h3>
                  </div>
                  {}
                  <div className="p-4 space-y-3">
                    {category.skills.map((skill, skillIndex) => (
                      <div
                        key={skill.name}
                        className={`flex items-center p-2 rounded cursor-pointer ${
                          selectedSkill === skill.name
                            ? 'bg-primary/10 border border-primary/30'
                            : 'hover:bg-primary/5'
                        }`}
                        onClick={() => {
                          if (selectedSkill !== skill.name) {
                            setSelectedSkill(skill.name);
                            log(`Selected: ${skill.name}`);
                            soundManager.play('select');
                          }
                        }}
                      >
                        <div className="flex items-center justify-between w-full relative">
                          <div className="flex items-center gap-2">
                            {skill.icon && (
                              <span className="text-lg">
                                {skill.icon}
                              </span>
                            )}
                            <span className="font-mono text-sm text-muted-foreground">
                              {skill.name}
                            </span>
                          </div>
                          <span className="text-xs text-primary/60">Level {skill.level}/5</span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/lib/data/skills.ts">
export interface Skill {
  name: string;
  level?: number;
  icon?: string;
  description?: string;
  xp?: number;
}
export interface SkillCategory {
  title: string;
  icon: string;
  description: string;
  skills: Skill[];
}
export const skillCategories: SkillCategory[] = [
  {
    title: 'Core Development',
    icon: 'main.cs',
    description: 'Primary development skills and tools',
    skills: [
      {
        name: 'Unity 3D/2D/AR/VR',
        level: 3,
        icon: '🎮',
        description: 'Expert in Unity game engine, including 2D/3D development, AR/VR, and custom tooling',
        xp: 60
      },
      {
        name: 'C#',
        level: 3,
        description: 'Advanced C# programming with focus on game development and system architecture',
        xp: 50
      },
      {
        name: 'Java',
        level: 3,
        icon: '☕',
        description: 'Java programming with focus on application development',
        xp: 55
      },
      {
        name: 'Design Patterns and Principles',
        level: 3,
        description: 'Implementation of software design patterns and best practices',
        xp: 55
      },
      {
        name: 'Software Architecture',
        level: 3,
        description: 'System design, patterns, and scalable architecture',
        xp: 50
      },
      {
        name: 'Problem Solving',
        level: 5,
        description: 'Algorithmic thinking and complex problem resolution',
        xp: 95
      },
    ],
  },
  {
    title: 'Data & AI',
    icon: 'ai.py',
    description: 'Artificial Intelligence and Machine Learning',
    skills: [
      {
        name: 'Python',
        level: 3,
        icon: '🐍',
        description: 'Python programming for AI/ML applications and data science',
        xp: 55
      },
      {
        name: 'Machine Learning / Deep Learning',
        level: 2,
        icon: '🤖',
        description: 'Machine learning and deep learning concepts and applications',
        xp: 35
      },
      {
        name: 'TensorFlow',
        level: 2,
        icon: '🧠',
        description: 'Machine learning framework for AI development',
        xp: 35
      },
      {
        name: 'OpenCV',
        level: 3,
        icon: '👁️',
        description: 'Computer vision and image processing',
        xp: 70
      },
    ],
  },
  {
    title: 'Web Development',
    icon: 'web.config',
    description: 'Modern web development stack',
    skills: [
      {
        name: 'Git',
        level: 3,
        icon: '🔄',
        description: 'Version control and collaboration workflows',
        xp: 50
      },
      {
        name: 'React',
        level: 4,
        icon: '⚛️',
        description: 'Component-based UI development with React ecosystem',
        xp: 85
      },
      {
        name: 'Next.js',
        level: 4,
        description: 'Full-stack React framework with SSR/SSG capabilities',
        xp: 75
      },
      {
        name: 'Node.js',
        level: 3,
        description: 'Server-side JavaScript runtime and API development',
        xp: 65
      },
      {
        name: 'HTML/CSS',
        level: 4,
        description: 'Semantic markup and modern CSS techniques',
        xp: 90
      },
      {
        name: 'Tailwind',
        level: 4,
        description: 'Utility-first CSS framework for rapid UI development',
        xp: 85
      },
    ],
  },
  {
    title: 'XR Development',
    icon: 'xr.unity',
    description: 'Extended Reality and immersive experiences',
    skills: [
      {
        name: 'AR Foundation',
        level: 4,
        icon: '📱',
        description: 'Cross-platform AR development with Unity',
        xp: 80
      },
      {
        name: 'XR Toolkit',
        level: 4,
        icon: '🥽',
        description: 'Virtual and mixed reality development tools',
        xp: 75
      },
      {
        name: 'Conversational AI',
        level: 3,
        description: 'Integration of AI-powered conversation systems',
        xp: 60
      },
      {
        name: 'gRPC',
        level: 3,
        description: 'High-performance RPC framework for services',
        xp: 65
      },
    ],
  },
];
</file>

<file path="src/components/Header.tsx">
'use client';
import Image from 'next/image';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { Home, User, FileText, BookOpen, Mail, Bot, Github, Linkedin, FileCode2, Pencil, Menu, X, Terminal, Gamepad2, Command, Download } from 'lucide-react';
import { useState, useEffect, useRef } from 'react';
import { useConsole } from '@/components/ui/console-provider';
const navItems = [
  { href: '#hero', icon: Home, label: 'Home', sectionId: 'hero', command: 'cd ~', shortcut: '1' },
  { href: '#about', icon: User, label: 'About', sectionId: 'about', command: 'cat about.md', shortcut: '2' },
  {
    href: '#experience',
    icon: FileText,
    label: 'Experience',
    sectionId: 'experience',
    command: 'cat experience.md',
    shortcut: '4'
  },
  { href: '#skills', icon: FileText, label: 'Skills', sectionId: 'skills', command: 'ls skills/', shortcut: '3' },
  { href: '#portfolio', icon: Gamepad2, label: 'Portfolio', sectionId: 'portfolio', command: './view_projects', shortcut: '5' },
  { href: '#blogs', icon: Pencil, label: 'Blogs', sectionId: 'blogs', command: 'vim blog.md', shortcut: '6' },
  { href: '#contact-cta', icon: Mail, label: 'Contact', sectionId: 'contact-cta', command: 'mail -s "Hello"', shortcut: '7' },
];
const socialLinks = [
  { href: 'https://www.linkedin.com/in/rishavnathpati', icon: Linkedin, label: 'LinkedIn', command: 'open linkedin' },
  { href: 'https://github.com/rishavnathpati', icon: Github, label: 'GitHub', command: 'git remote -v' },
  { href: 'https://medium.com/@patirishavnath', icon: Bot, label: 'Medium', command: 'read blog' },
  { href: 'https://leetcode.com/rishavnathpati/', icon: FileCode2, label: 'LeetCode', command: 'solve algo' },
];
export function Header() {
  const [isMobileNavOpen, setIsMobileNavOpen] = useState(false);
  const [activeSection, setActiveSection] = useState('hero');
  const [showShortcuts, setShowShortcuts] = useState(false);
  const [lastCommand, setLastCommand] = useState('');
  const observerRef = useRef<IntersectionObserver | null>(null);
  const sectionRefs = useRef<Map<string, HTMLElement>>(new Map());
  const pathname = usePathname();
  const { log, success, warn } = useConsole();
  // Game dev-style keyboard shortcuts
  useEffect(() => {
    const handleShortcuts = (e: KeyboardEvent) => {
      // Show shortcuts overlay when holding Command/Ctrl
      if (e.key === 'Meta' || e.key === 'Control') {
        e.preventDefault();
        setShowShortcuts(e.type === 'keydown');
        if (e.type === 'keydown') {
          log('Keyboard shortcuts activated');
          playActivationSound();
        }
      }
      if (e.type === 'keydown' && !e.repeat && !e.metaKey && !e.ctrlKey && !e.altKey) {
        const num = parseInt(e.key);
        if (num >= 1 && num <= navItems.length) {
          const section = navItems[num - 1];
          const element = document.getElementById(section.sectionId);
          if (element) {
            element.scrollIntoView({ behavior: 'smooth' });
            success(`Executing: ${section.command}`);
            setLastCommand(section.command);
            playNavigationSound();
          }
        }
      }
    };
    window.addEventListener('keydown', handleShortcuts);
    window.addEventListener('keyup', handleShortcuts);
    return () => {
      window.removeEventListener('keydown', handleShortcuts);
      window.removeEventListener('keyup', handleShortcuts);
    };
  }, [log, success]);
  const playNavigationSound = () => {
    console.log('*click*');
  };
  const playActivationSound = () => {
    console.log('*beep*');
  };
  const toggleMobileNav = () => {
    const newState = !isMobileNavOpen;
    setIsMobileNavOpen(newState);
    log(`Terminal ${newState ? 'maximized' : 'minimized'}`);
    playNavigationSound();
  };
  const handleLinkClick = (e: React.MouseEvent<HTMLAnchorElement>, href: string, command: string) => {
    if (isMobileNavOpen) {
      setIsMobileNavOpen(false);
      log('Minimizing terminal');
    }
    setLastCommand(command);
    success(`Executing: ${command}`);
    playNavigationSound();
    if (pathname !== '/' && href.startsWith('#')) {
      e.preventDefault();
      log('Redirecting to home directory');
      window.location.href = '/' + href;
    }
  };
  useEffect(() => {
    if (pathname !== '/') return;
    if (observerRef.current) observerRef.current.disconnect();
    const observerOptions = {
      root: null,
      rootMargin: '-20% 0px -70% 0px',
      threshold: 0,
    };
    const observerCallback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const sectionId = entry.target.id;
          const section = entry.target;
          section.classList.add('loading');
          setActiveSection(sectionId);
          log(`Loading section: ${sectionId}`);
          setTimeout(() => {
            section.classList.remove('loading');
            success(`Section "${sectionId}" loaded successfully`);
            const navLink = document.querySelector(`[data-section="${sectionId}"]`);
            if (navLink) {
              navLink.classList.add('active');
            }
          }, 500);
        } else {
          const navLink = document.querySelector(`[data-section="${entry.target.id}"]`);
          if (navLink) {
            navLink.classList.remove('active');
          }
        }
      });
    };
    observerRef.current = new IntersectionObserver(observerCallback, observerOptions);
    const currentObserver = observerRef.current;
    navItems.forEach(item => {
      const sectionElement = document.getElementById(item.sectionId);
      if (sectionElement) {
        currentObserver.observe(sectionElement);
        sectionRefs.current.set(item.sectionId, sectionElement);
      }
    });
    return () => {
      if (currentObserver) {
        currentObserver.disconnect();
      }
      sectionRefs.current.clear();
    };
  }, [pathname]);
  return (
    <>
      <button
        onClick={toggleMobileNav}
        className="fixed top-4 left-4 z-[9999] lg:hidden p-2 rounded-md bg-black/30 backdrop-blur-sm border border-border text-foreground hover:text-primary hover:border-primary transition-colors"
        aria-label={isMobileNavOpen ? "Minimize terminal" : "Open terminal"}
        aria-expanded={isMobileNavOpen}
      >
        {isMobileNavOpen ? <X size={20} /> : <Terminal size={20} />}
      </button>
      <header
        id="header"
        className={`fixed top-0 bottom-0 w-[300px] z-[9998] bg-black/30 backdrop-blur-sm text-white overflow-y-auto transition-transform duration-300 ease-in-out flex flex-col border-r border-border
          ${isMobileNavOpen ? 'translate-x-0' : '-translate-x-full'} lg:translate-x-0`}
      >
        <div className="p-4 flex flex-col h-full">
          <div className="profile mb-8 pt-10 lg:pt-0">
            <div className="bg-black/20 rounded-lg border border-border p-4 relative group">
              <div className="absolute inset-0 bg-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-lg"></div>
              <div className="flex items-center gap-3 mb-4">
                <Terminal size={16} className="text-primary" />
                <span className="font-mono text-sm text-muted-foreground">user_profile.json</span>
              </div>
              <div className="flex flex-col items-center relative z-10">
                <div className="relative group">
                  <Image
                    src="/profile-img.jpg"
                    alt="Rishav Nath Pati"
                    width={100}
                    height={100}
                    className="rounded-lg border-2 border-primary/20 transition-transform duration-300 group-hover:scale-105"
                    priority
                  />
                  <div className="absolute inset-0 border-2 border-primary/0 rounded-lg transition-all duration-300 group-hover:border-primary/40 group-hover:scale-105"></div>
                </div>
                <h1 className="text-xl font-mono mt-4 mb-1">
                  <Link href="/" className="text-foreground hover:text-primary transition-colors" onClick={() => handleLinkClick}>
                    <span className="text-primary">./</span>rishav_nath_pati
                  </Link>
                </h1>
                <div className="social-links mt-4 flex justify-center space-x-2">
                  {socialLinks.map((link) => (
                    <a
                      key={link.label}
                      href={link.href}
                      target="_blank"
                      rel="noopener noreferrer"
                      aria-label={link.label}
                      className="w-8 h-8 bg-black/30 rounded-md flex items-center justify-center text-muted-foreground hover:text-primary hover:border-primary transition-all duration-200 border border-border hover:scale-110"
                      onClick={() => {
                        success(`Executing: ${link.command}`);
                        setLastCommand(link.command);
                        playNavigationSound();
                      }}
                    >
                      <link.icon size={16} />
                    </a>
                  ))}
                </div>
              </div>
            </div>
          </div>
          <nav id="navbar" className="nav-menu flex-grow">
            <div className="flex items-center gap-2 mb-3 px-2">
              <Terminal size={16} className="text-primary" />
              <span className="font-mono text-sm text-muted-foreground">navigation.sh</span>
            </div>
            <ul className="space-y-1">
              {navItems.map((item) => {
                const isActive = activeSection === item.sectionId && pathname === '/';
                return (
                  <li key={item.label}>
                    <Link
                      href={item.href}
                      className={`nav-link flex items-center py-2 px-3 rounded-md transition-all duration-200 group font-mono text-sm relative overflow-hidden ${
                        isActive
                          ? 'bg-black/40 text-primary border border-primary/20 no-underline hover:no-underline'
                          : 'text-muted-foreground hover:text-primary hover:bg-black/20 border border-transparent'
                      }`}
                      data-section={item.sectionId}
                      onClick={(e) => handleLinkClick(e, item.href, item.command)}
                      aria-current={isActive ? 'page' : undefined}
                      suppressHydrationWarning
                    >
                      <div className="flex items-center flex-1">
                        <item.icon
                          size={16}
                          className={`mr-2 transition-colors ${
                            isActive
                              ? 'text-primary'
                              : 'text-muted-foreground group-hover:text-primary'
                          }`}
                        />
                        <span>{item.label.toLowerCase()}</span>
                      </div>
                      <div className="opacity-0 group-hover:opacity-100 transition-opacity text-xs text-primary/60 flex items-center gap-1">
                        <Command size={12} />
                        <span>{item.shortcut}</span>
                      </div>
                      {isActive && (
                        <div className="absolute bottom-0 left-0 h-[2px] bg-primary/40 w-full transform origin-left scale-x-100 transition-transform"></div>
                      )}
                    </Link>
                  </li>
                );
              })}
            </ul>
          </nav>
          {}
          <div className="mt-4 px-2 py-1 bg-black/20 rounded border border-border/50">
            <div className="flex items-center gap-2">
              <Terminal size={12} className="text-primary/60" />
              <span className="font-mono text-xs text-muted-foreground">Last command:</span>
            </div>
            <div className="font-mono text-xs text-primary/80 mt-1">
              $ {lastCommand || 'No command executed'}
            </div>
          </div>
        </div>
      </header>
      {}
      {showShortcuts && (
        <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-[9999] flex items-center justify-center">
          <div className="bg-black/60 border border-primary/20 rounded-lg p-6 max-w-md w-full">
            <h3 className="font-mono text-primary mb-4 flex items-center gap-2">
              <Command size={16} />
              Available Commands
            </h3>
            <div className="space-y-2">
              {navItems.map((item) => (
                <div key={item.label} className="flex items-center justify-between font-mono text-sm">
                  <span className="text-muted-foreground">{item.command}</span>
                  <span className="text-primary">[{item.shortcut}]</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
    </>
  );
}
</file>

<file path="src/app/globals.css">
@import "tailwindcss";
@import "tw-animate-css";
@custom-variant dark (&:is(.dark *));
@keyframes fadeInOut {
  0% { opacity: 0; transform: translate(-50%, -50%) scale(0.95); }
  10% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
  90% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
  100% { opacity: 0; transform: translate(-50%, -50%) scale(0.95); }
}
@keyframes float {
  0% { transform: translateY(0px); }
  50% { transform: translateY(-10px); }
  100% { transform: translateY(0px); }
}
@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}
@keyframes rainbow {
  0% { filter: hue-rotate(0deg); }
  100% { filter: hue-rotate(360deg); }
}
@keyframes pulse {
  0% { transform: scale(1); opacity: 1; }
  50% { transform: scale(1.05); opacity: 0.8; }
  100% { transform: scale(1); opacity: 1; }
}
@keyframes glitch {
  0% { transform: translate(0); }
  20% { transform: translate(-2px, 2px); }
  40% { transform: translate(-2px, -2px); }
  60% { transform: translate(2px, 2px); }
  80% { transform: translate(2px, -2px); }
  100% { transform: translate(0); }
}
@keyframes scanline {
  0% { transform: translateY(-100%); }
  100% { transform: translateY(100%); }
}
kbd {
  font-family: ui-monospace, monospace;
  background: rgba(0, 255, 255, 0.1);
  border: 1px solid rgba(0, 255, 255, 0.2);
  border-bottom: 3px solid rgba(0, 255, 255, 0.2);
  border-radius: 3px;
  padding: 2px 6px;
  text-shadow: 0 0 5px rgba(0, 255, 255, 0.5);
  position: relative;
  overflow: hidden;
}
kbd::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 1px;
  background: linear-gradient(90deg, transparent, rgba(0, 255, 255, 0.2), transparent);
  animation: scanline 2s linear infinite;
}
/* Active section highlight effect */
.nav-link.active {
  opacity: 0.8;
  transform: scale(1.05);
}
/* Loading state effect */
.loading {
  animation: glitch 0.2s infinite;
}
.float {
  animation: float 3s ease-in-out infinite;
}
.spin {
  animation: spin 10s linear infinite;
}
.rainbow {
  animation: rainbow 5s linear infinite;
}
@keyframes blink {
  0%, 100% { opacity: 1; }
  50% { opacity: 0; }
}
.animate-blink {
  animation: blink 1s infinite;
}
/* Skill section animations */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}
@keyframes skillLoad {
  0% { width: 0; opacity: 0.5; }
  50% { opacity: 1; }
  100% { width: 100%; }
}
@keyframes skillPulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.05); }
  100% { transform: scale(1); }
}
/* Apply animations to skill elements only when they enter viewport */
.skill-item {
  opacity: 0;
  transform: translateY(10px);
}
.skill-item.visible {
  opacity: 1;
  transform: translateY(0);
  transition: opacity 0.5s ease, transform 0.5s ease;
}
/* Game-inspired skill animations */
@keyframes skillSelect {
  0% { transform: scale(1); box-shadow: 0 0 0 0 rgba(var(--primary), 0.4); }
  50% { transform: scale(1.02); box-shadow: 0 0 0 10px rgba(var(--primary), 0); }
  100% { transform: scale(1); box-shadow: 0 0 0 0 rgba(var(--primary), 0); }
}
@keyframes skillGlow {
  0% { filter: brightness(1) drop-shadow(0 0 2px rgba(var(--primary), 0.2)); }
  50% { filter: brightness(1.2) drop-shadow(0 0 4px rgba(var(--primary), 0.4)); }
  100% { filter: brightness(1) drop-shadow(0 0 2px rgba(var(--primary), 0.2)); }
}
/* Apply animations to selected skills - reduced intensity */
[data-selected="true"] {
  transform: scale(1.02);
  transition: transform 0.3s ease;
}
[data-selected="true"] .skill-icon {
  filter: brightness(1.1);
  transition: filter 0.3s ease;
}
@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}
/* Only dark theme - forcing dark mode */
:root {
  --radius: 0.5rem;  /* Slightly reduced radius for a more technical look */
  --background: oklch(0.1 0 0);  /* Deeper black for better contrast */
  --foreground: oklch(0.95 0 0);
  --card: oklch(0.15 0 0);  /* Slightly lighter than background */
  --card-foreground: oklch(0.95 0 0);
  --popover: oklch(0.15 0 0);
  --popover-foreground: oklch(0.95 0 0);
  --primary: oklch(0.7 0.15 200);  /* Brighter blue for better visibility */
  --primary-foreground: oklch(0.1 0 0);
  --secondary: oklch(0.2 0 0);
  --secondary-foreground: oklch(0.95 0 0);
  --muted: oklch(0.2 0 0);
  --muted-foreground: oklch(0.65 0 0);  /* More visible muted text */
  --accent: oklch(0.2 0 0);
  --accent-foreground: oklch(0.95 0 0);
  --destructive: oklch(0.7 0.2 25);
  --border: oklch(0.3 0 0);  /* More visible borders */
  --input: oklch(0.2 0 0);
  --ring: oklch(0.7 0.15 200);  /* Match primary color */
  --chart-1: oklch(0.6 0.2 250);
  --chart-2: oklch(0.7 0.15 180);
  --chart-3: oklch(0.75 0.18 80);
  --chart-4: oklch(0.65 0.25 300);
  --chart-5: oklch(0.65 0.25 20);
  --sidebar: oklch(0.15 0 0);
  --sidebar-foreground: oklch(0.95 0 0);
  --sidebar-primary: oklch(0.7 0.15 200);  /* Match primary color */
  --sidebar-primary-foreground: oklch(0.95 0 0);
  --sidebar-accent: oklch(0.2 0 0);
  --sidebar-accent-foreground: oklch(0.95 0 0);
  --sidebar-border: oklch(0.3 0 0);  /* Match border color */
  --sidebar-ring: oklch(0.7 0.15 200);  /* Match primary color */
}
/* Removed .dark class as we're forcing dark mode only */
@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
  * {
    @apply border-border;
  }
  html {
    scroll-padding-top: 80px;
  }
  body {
    @apply bg-background text-foreground;
    @apply font-sans;
    min-height: 100vh;
  }
  a:not(.nav-link) {
    @apply text-primary underline-offset-4 hover:text-primary/80 hover:underline;
  }
}
pre {
  overflow-x: auto;
  padding: 0 !important;
  margin: 1.5rem 0 !important;
  background-color: #1a1a1a !important;
  border: 1px solid #333 !important;
  border-radius: 0.5rem !important;
}
pre > code {
  display: grid;
  min-width: 100%;
  font-size: 0.9rem !important;
  line-height: 1.6 !important;
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace !important;
  padding: 1rem !important;
  background-color: transparent !important;
}
pre code .line {
  padding: 0 1rem;
  border-left: 2px solid transparent;
  min-height: 1.6rem;
  display: inline-block;
  width: 100%;
}
pre code .line.highlighted {
  background-color: rgba(200, 200, 255, 0.1);
  border-left: 2px solid #3b82f6;
}
pre code .word {
  background-color: rgba(200, 200, 255, 0.15);
  padding: 0.25rem;
  border-radius: 0.25rem;
}
:not(pre) > code {
  background-color: rgba(115, 115, 115, 0.1) !important;
  color: #e83e8c !important;
  padding: 0.2em 0.4em !important;
  border-radius: 3px !important;
  font-size: 0.875em !important;
  font-weight: 400 !important;
  word-break: break-word;
}
pre[data-language]::before {
  content: attr(data-language);
  display: block;
  position: relative;
  top: 0;
  right: 0;
  color: #666;
  font-size: 0.75rem;
  font-family: ui-monospace, monospace;
  text-transform: uppercase;
  padding: 0.5rem 1rem;
  border-bottom: 1px solid #333;
}
.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
  color: #6a9955;
}
.token.punctuation {
  color: #d4d4d4;
}
.token.property,
.token.tag,
.token.boolean,
.token.number,
.token.constant,
.token.symbol,
.token.deleted {
  color: #b5cea8;
}
.token.selector,
.token.attr-name,
.token.string,
.token.char,
.token.builtin,
.token.inserted {
  color: #ce9178;
}
.token.operator,
.token.entity,
.token.url,
.language-css .token.string,
.style .token.string {
  color: #d4d4d4;
}
.token.atrule,
.token.attr-value,
.token.keyword {
  color: #569cd6;
}
.token.function,
.token.class-name {
  color: #dcdcaa;
}
.token.regex,
.token.important,
.token.variable {
  color: #d16969;
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from "next";
import { GeistSans } from 'geist/font/sans';
import { GeistMono } from 'geist/font/mono';
import "./no-animations.css";
import "./globals.css";
import { ThemeProvider } from "@/components/theme-provider";
import { Analytics } from "@/components/analytics";
import { TailwindIndicator } from "@/components/tailwind-indicator";
import { Toaster } from "@/components/ui/toaster";
import { Header } from "@/components/Header";
import { Footer } from "@/components/Footer";
import { KonamiCode } from "@/components/easter-eggs/KonamiCode";
import { ScrollToTop } from "@/components/ScrollToTop";
import { SkipLink } from "@/components/SkipLink";
import { ConsoleProvider } from "@/components/ui/console-provider";
import BackgroundEffects from "@/components/effects/BackgroundEffects";
const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3001';
export const metadata: Metadata = {
  metadataBase: new URL(siteUrl),
  title: "Rishav Nath Pati | Game & Interactive Media Developer",
  description: "Portfolio of Rishav Nath Pati, specializing in Unity 3D/2D/AR/VR, C#, and Machine Learning.",
  openGraph: {
    title: 'Rishav Nath Pati | Game & Interactive Media Developer',
    description: 'Portfolio of Rishav Nath Pati, specializing in Unity 3D/2D/AR/VR, C#, and Machine Learning.',
    url: '/',
    siteName: 'Rishav Nath Pati Portfolio',
    images: [
      {
        url: '/profile-img.jpg',
        width: 800,
        height: 800,
        alt: 'Rishav Nath Pati',
      },
    ],
    locale: 'en_US',
    type: 'website',
  },
  twitter: {
    card: 'summary_large_image',
    title: 'Rishav Nath Pati | Game & Interactive Media Developer',
    description: 'Portfolio of Rishav Nath Pati, specializing in Unity 3D/2D/AR/VR, C#, and Machine Learning.',
    images: ['/profile-img.jpg'],
  },
  robots: {
    index: true,
    follow: true,
    googleBot: {
      index: true,
      follow: true,
      'max-video-preview': -1,
      'max-image-preview': 'large',
      'max-snippet': -1,
    },
  },
  icons: {
    icon: '/favicon.ico',
  },
};
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className={`${GeistSans.variable} ${GeistMono.variable}`} suppressHydrationWarning>
      <head />
      <body className="font-sans bg-background text-foreground">
        {}
        <ThemeProvider
          attribute="class"
          defaultTheme="dark"
          enableSystem={false}
          forcedTheme="dark"
          disableTransitionOnChange
        >
          <ConsoleProvider>
            {}
            <BackgroundEffects />
            <SkipLink />
            <Header />
            <ScrollToTop />
            <main id="main" className="lg:ml-[300px] relative z-[2]" tabIndex={-1}>
              {children}
              <Footer />
            </main>
            <Analytics />
            <Toaster />
            <TailwindIndicator />
            <KonamiCode />
          </ConsoleProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}
</file>

</files>
