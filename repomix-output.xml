This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where comments have been removed, empty lines have been removed.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Empty lines have been removed from all files
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
public/
  file.svg
  globe.svg
  next.svg
  robots.txt
  vercel.svg
  window.svg
scripts/
  generate-sitemap.mjs
src/
  app/
    blog/
      [slug]/
        page.tsx
      page.tsx
    portfolio/
      [slug]/
        page.tsx
      page.tsx
    globals.css
    layout.tsx
    not-found.tsx
    page.tsx
  components/
    sections/
      AboutSection.tsx
      BlogHighlights.tsx
      ContactCTA.tsx
      HeroSection.tsx
      PortfolioHighlights.tsx
      SkillsSection.tsx
    ui/
      badge.tsx
      button.tsx
      card.tsx
    AOSInitializer.tsx
    Footer.tsx
    Header.tsx
    ThemeProvider.tsx
    ThemeToggle.tsx
  content/
    blogs/
      mac-terminal-setup.mdx
  lib/
    data/
      blog.ts
      portfolio.ts
      skills.ts
    blog.ts
    utils.ts
.gitignore
components.json
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/robots.txt">

</file>

<file path="scripts/generate-sitemap.mjs">
import fs from 'fs';
import path from 'path';
import { globby } from 'globby';
import matter from 'gray-matter';

// Replace with your actual domain before deployment
const SITE_URL = 'https://yourdomain.com';

async function generateSitemap() {
  console.log('Generating sitemap...');

  const pagesDir = path.resolve(process.cwd(), 'src/app');
  const contentDir = path.resolve(process.cwd(), 'src/content');

  // 1. Get static pages from app router
  const pages = await globby([
    `${pagesDir}/**/page.tsx`,
    `!${pagesDir}/layout.tsx`,
    `!${pagesDir}/template.tsx`,
    `!${pagesDir}/not-found.tsx`,
    `!${pagesDir}/api/**`,
    `!${pagesDir}/**/\\[*\\]/**`,
  ]);

  const staticPageUrls = pages.map((page) => {
    const route = page
      .replace(pagesDir, '')
      .replace('/page.tsx', '')
      .replace(/^\/index$/, '/');
    return route === '' ? '/' : route;
  });

  // 2. Get dynamic portfolio pages
  const portfolioDir = path.join(pagesDir, 'portfolio/[slug]');
  const { portfolioItems } = await import('../src/lib/data/portfolio.js');
  const portfolioUrls = portfolioItems.map(item => `/portfolio/${item.slug}`);

  // 3. Get dynamic blog pages
  const blogPostsDir = path.join(contentDir, 'blogs');
  const blogFiles = await globby(`${blogPostsDir}/**/*.mdx`);
  const blogUrls = blogFiles.map((file) => {
    const slug = path.basename(file, path.extname(file));
    return `/blog/${slug}`;
  });

  // Combine all URLs
  const allUrls = [
    '/',
    ...staticPageUrls.filter(url => url !== '/'),
    ...portfolioUrls,
    ...blogUrls,
  ];
  const uniqueUrls = [...new Set(allUrls)];

  // Create sitemap XML content
  const sitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${uniqueUrls
  .map((url) => {
    const priority = url === '/' ? '1.0' : '0.8';
    const changefreq = url.startsWith('/blog/') ? 'weekly' : 'monthly';
    return `
  <url>
    <loc>${`${SITE_URL}${url}`}</loc>
    <priority>${priority}</priority>
    <changefreq>${changefreq}</changefreq>
  </url>`;
  })
  .join('')}
</urlset>`;

  // Write sitemap file to public directory
  const sitemapPath = path.join(process.cwd(), 'public/sitemap.xml');
  fs.writeFileSync(sitemapPath, sitemap);

  console.log(`Sitemap generated successfully at ${sitemapPath} with ${uniqueUrls.length} URLs.`);
}

generateSitemap().catch((error) => {
  console.error('Error generating sitemap:', error);
  process.exit(1);
});
</file>

<file path="src/app/blog/[slug]/page.tsx">
import { getPostData, getAllPostSlugs } from '@/lib/blog';
import { notFound } from 'next/navigation';
import { Metadata } from 'next';
import { MDXRemote } from 'next-mdx-remote/rsc';
import Link from 'next/link';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { CalendarDays, Clock, ArrowLeft } from 'lucide-react';
import rehypePrettyCode from 'rehype-pretty-code';
type Props = {
  params: { slug: string };
};
export async function generateStaticParams() {
  const paths = getAllPostSlugs();
  return paths;
}
export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const post = await getPostData(params.slug);
  if (!post) {
    return { title: 'Post Not Found' };
  }
  return {
    title: `${post.title} | Rishav Nath Pati Blog`,
    description: post.excerpt,
    openGraph: {
      title: post.title,
      description: post.excerpt,
      images: [{ url: post.imageUrl, alt: post.title }],
      type: 'article',
      publishedTime: post.date,
      authors: ['Rishav Nath Pati'],
      tags: post.tags,
    },
    twitter: {
      card: 'summary_large_image',
      title: post.title,
      description: post.excerpt,
      images: [post.imageUrl],
    },
  };
}
const formatDate = (dateString: string): string => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};
const options = {
  theme: 'one-dark-pro',
  keepBackground: true,
};
export default async function BlogPostPage({ params }: Props) {
  const post = await getPostData(params.slug);
  if (!post) {
    notFound();
  }
  const components = {
    pre: (props: React.ComponentProps<'pre'>) => (
      <pre className="!bg-neutral-900 dark:!bg-neutral-900" {...props} />
    ),
  };
  return (
    <div className="container mx-auto px-4 py-16 lg:py-24 max-w-4xl">
      <div className="mb-8">
        <Button variant="outline" size="sm" asChild>
          <Link href="/blog">
            <ArrowLeft className="mr-2 h-4 w-4" /> Back to Blog
          </Link>
        </Button>
      </div>
      <article>
        <header className="mb-10 border-b border-border pb-8">
          <h1 className="text-4xl lg:text-5xl font-bold mb-4 font-raleway text-foreground leading-tight">
            {post.title}
          </h1>
          <div className="flex flex-wrap items-center gap-x-6 gap-y-2 text-sm text-muted-foreground mb-4">
            <span className="flex items-center gap-1.5">
              <CalendarDays className="w-4 h-4" /> {formatDate(post.date)}
            </span>
            {post.readTimeMinutes && (
              <span className="flex items-center gap-1.5">
                <Clock className="w-4 h-4" /> {post.readTimeMinutes} min read
              </span>
            )}
          </div>
          <div className="flex flex-wrap gap-2">
            {post.tags?.map((tag) => (
              <Badge key={tag} variant="secondary">{tag}</Badge>
            ))}
          </div>
        </header>
        <div className="prose dark:prose-invert max-w-none prose-neutral prose-lg
                      prose-headings:font-raleway prose-headings:font-semibold prose-a:text-primary hover:prose-a:text-primary/80
                      prose-code:before:content-none prose-code:after:content-none prose-code:font-mono prose-code:bg-muted prose-code:text-foreground prose-code:px-1.5 prose-code:py-0.5 prose-code:rounded-sm
                      prose-pre:bg-muted prose-pre:text-foreground prose-pre:p-4 prose-pre:rounded-lg prose-pre:border
                      dark:prose-pre:bg-neutral-800/50 dark:prose-pre:border-neutral-700">
          <MDXRemote
            source={post.content}
            options={{
              mdxOptions: {
                rehypePlugins: [[rehypePrettyCode, options] as any],
              },
            }}
            components={components}
          />
        </div>
      </article>
    </div>
  );
}
</file>

<file path="src/app/blog/page.tsx">
import Link from 'next/link';
import Image from 'next/image';
import { Metadata } from 'next';
import { getSortedPostsData } from '@/lib/blog';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { CalendarDays, Clock } from 'lucide-react';
export const metadata: Metadata = {
  title: 'Blog | Rishav Nath Pati',
  description: 'Read articles and insights on game development, interactive media, AI, and technology by Rishav Nath Pati.',
};
const formatDate = (dateString: string): string => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};
export default function BlogListPage() {
  const allPosts = getSortedPostsData();
  return (
    <div className="container mx-auto px-4 py-16 lg:py-24">
      <div className="max-w-3xl mx-auto text-center mb-12 lg:mb-16">
        <h1 className="text-4xl lg:text-5xl font-bold mb-4 font-raleway text-foreground">
          Blog Posts
        </h1>
        <p className="text-lg lg:text-xl text-muted-foreground leading-relaxed">
          Exploring ideas and sharing knowledge on topics I'm passionate about.
        </p>
      </div>
      {allPosts.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {allPosts.map((post) => (
            <Card
              key={post.slug}
              className="flex flex-col overflow-hidden transition-transform duration-300 ease-in-out hover:-translate-y-1 hover:shadow-lg dark:bg-neutral-800/50 group"
            >
              <CardHeader className="p-0">
                <Link href={post.externalUrl || `/blog/${post.slug}`} target={post.externalUrl ? '_blank' : '_self'} rel={post.externalUrl ? 'noopener noreferrer' : ''} aria-label={`Read more about ${post.title}`}>
                  <div className="aspect-video overflow-hidden">
                    <Image
                      src={post.imageUrl}
                      alt={`Thumbnail for ${post.title}`}
                      width={600}
                      height={338}
                      className="object-cover w-full h-full transition-transform duration-300 ease-in-out group-hover:scale-105"
                      loading="lazy"
                    />
                  </div>
                </Link>
              </CardHeader>
              <CardContent className="flex-grow p-5">
                <div className="flex items-center space-x-4 text-xs text-muted-foreground mb-2">
                  <span className="flex items-center gap-1.5">
                    <CalendarDays className="w-3.5 h-3.5" /> {formatDate(post.date)}
                  </span>
                  {post.readTimeMinutes && (
                    <span className="flex items-center gap-1.5">
                      <Clock className="w-3.5 h-3.5" /> {post.readTimeMinutes} min read
                    </span>
                  )}
                </div>
                <CardTitle className="text-xl font-semibold mb-2 font-poppins line-clamp-2 group-hover:text-primary transition-colors">
                  <Link href={post.externalUrl || `/blog/${post.slug}`} target={post.externalUrl ? '_blank' : '_self'} rel={post.externalUrl ? 'noopener noreferrer' : ''}>
                    {post.title}
                  </Link>
                </CardTitle>
                <CardDescription className="text-muted-foreground mb-4 text-sm line-clamp-3">
                  {post.excerpt}
                </CardDescription>
                <div className="flex flex-wrap gap-2">
                  {post.tags?.slice(0, 3).map((tag) => (
                    <Badge key={tag} variant="secondary">{tag}</Badge>
                  ))}
                  {post.tags && post.tags.length > 3 && <Badge variant="outline">...</Badge>}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      ) : (
        <p className="text-center text-muted-foreground">No blog posts found.</p>
      )}
    </div>
  );
}
</file>

<file path="src/app/portfolio/[slug]/page.tsx">

</file>

<file path="src/app/portfolio/page.tsx">
import Link from 'next/link';
import Image from 'next/image';
import { Metadata } from 'next';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { portfolioItems } from "@/lib/data/portfolio";
import { ArrowRight, Github, ExternalLink } from 'lucide-react';
export const metadata: Metadata = {
  title: 'Portfolio | Rishav Nath Pati',
  description: 'Explore the full portfolio of games, machine learning projects, and publications by Rishav Nath Pati.',
};
export default function PortfolioPage() {
  return (
    <div className="container mx-auto px-4 py-16 lg:py-24">
      <div className="max-w-3xl mx-auto text-center mb-12 lg:mb-16">
        <h1 className="text-4xl lg:text-5xl font-bold mb-4 font-raleway text-foreground">
          My Portfolio
        </h1>
        <p className="text-lg lg:text-xl text-muted-foreground leading-relaxed">
          A collection of projects demonstrating my skills across game development, machine learning, interactive media, and research.
        </p>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {portfolioItems.map((item, index) => (
          <Card
            key={item.slug}
            className="flex flex-col overflow-hidden transition-transform duration-300 ease-in-out hover:-translate-y-1 hover:shadow-lg dark:bg-neutral-800/50 group"
          >
            <CardHeader className="p-0">
              <Link href={item.detailsUrl ?? '#'} aria-label={`View details for ${item.title}`}>
                <div className="aspect-video overflow-hidden">
                  <Image
                    src={item.imageUrl}
                    alt={item.title}
                    width={600}
                    height={338}
                    className="object-cover w-full h-full transition-transform duration-300 ease-in-out group-hover:scale-105"
                    loading="lazy"
                  />
                </div>
              </Link>
            </CardHeader>
            <CardContent className="flex-grow p-5">
              <CardTitle className="text-xl font-semibold mb-2 font-poppins group-hover:text-primary transition-colors">
                <Link href={item.detailsUrl ?? '#'}>
                  {item.title}
                </Link>
              </CardTitle>
              <CardDescription className="text-muted-foreground mb-4 text-sm line-clamp-3">
                {item.description}
              </CardDescription>
              <div className="flex flex-wrap gap-2">
                {item.tags.slice(0, 4).map((tag) => (
                  <Badge key={tag} variant="secondary">
                    {tag}
                  </Badge>
                ))}
                {item.tags.length > 4 && <Badge variant="outline">...</Badge>}
              </div>
            </CardContent>
            <CardFooter className="p-5 bg-muted/30 dark:bg-neutral-800/30 border-t border-border flex justify-between items-center">
              {item.detailsUrl ? (
                <Button variant="ghost" size="sm" asChild>
                  <Link href={item.detailsUrl} className="text-sm">
                    Details <ArrowRight className="ml-1 h-4 w-4" />
                  </Link>
                </Button>
              ) : <div></div>}
              <div className="flex items-center space-x-2">
                {item.githubUrl && (
                  <Button variant="outline" size="icon" className="h-8 w-8" asChild>
                    <a href={item.githubUrl} target="_blank" rel="noopener noreferrer" aria-label="GitHub Repository">
                      <Github className="h-4 w-4" />
                    </a>
                  </Button>
                )}
                {item.liveUrl && (
                  <Button variant="outline" size="icon" className="h-8 w-8" asChild>
                    <a href={item.liveUrl} target="_blank" rel="noopener noreferrer" aria-label="Live Demo">
                      <ExternalLink className="h-4 w-4" />
                    </a>
                  </Button>
                )}
              </div>
            </CardFooter>
          </Card>
        ))}
      </div>
    </div>
  );
}
</file>

<file path="src/app/not-found.tsx">
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Home, Search } from 'lucide-react';
import { Metadata } from 'next';
export const metadata: Metadata = {
  title: '404 - Page Not Found | Rishav Nath Pati',
  description: "Oops! The page you're looking for doesn't seem to exist.",
};
export default function NotFound() {
  return (
    <div className="flex flex-col items-center justify-center min-h-[calc(100vh-200px)] text-center px-4 lg:ml-[300px]">
      <div className="max-w-md">
        <h1 className="text-6xl md:text-9xl font-bold text-primary mb-4 font-raleway">
          404
        </h1>
        <h2 className="text-2xl md:text-3xl font-semibold mb-4 text-foreground font-poppins">
          Page Not Found
        </h2>
        <p className="text-lg text-muted-foreground mb-8">
          Sorry, we couldn't find the page you were looking for. It might have been moved, deleted, or maybe it never existed.
        </p>
        <div className="flex flex-col sm:flex-row justify-center gap-4">
          <Button asChild size="lg">
            <Link href="/">
              <Home className="mr-2 h-5 w-5" /> Go Back Home
            </Link>
          </Button>
          <Button variant="outline" size="lg" asChild>
            <Link href="/portfolio">
              <Search className="mr-2 h-5 w-5" /> Explore Portfolio
            </Link>
          </Button>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/sections/AboutSection.tsx">
import Image from 'next/image';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Download, Mail, MapPin, Calendar, UserCheck, Briefcase } from 'lucide-react';
const calculateAge = (birthDate: string): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};
export function AboutSection() {
  const dob = '2001-05-03';
  const age = calculateAge(dob);
  return (
    <section id="about" className="py-20 lg:py-28 bg-secondary/30 dark:bg-neutral-900/50">
      <div className="container mx-auto px-4">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-12 items-center">
          <div className="lg:col-span-1 flex justify-center lg:justify-start" data-aos="fade-right">
            <Image
              src="/profile-img.jpg"
              alt="Rishav Nath Pati"
              width={350}
              height={350}
              className="rounded-full shadow-lg object-cover border-4 border-primary/20"
              loading="lazy"
            />
          </div>
          <div className="lg:col-span-2" data-aos="fade-left">
            <h2 className="text-3xl lg:text-4xl font-bold mb-6 font-raleway text-foreground">
              About Me
            </h2>
            <h3 className="text-xl lg:text-2xl font-semibold mb-4 text-primary font-poppins">
              Game & Interactive Media Developer
            </h3>
            <p className="text-lg mb-6 text-muted-foreground leading-relaxed">
              Interactive Media Developer at Convai with 3+ years specializing in Unity (2D/3D/AR/VR) & C#. Passionate about crafting immersive experiences and exploring AI in interactive media. Proven ability in full development cycles, clean code, and rapid prototyping.
            </p>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-4 mb-8 text-foreground">
              <div className="flex items-center space-x-3">
                <Calendar className="w-5 h-5 text-primary" />
                <span><strong>Age:</strong> {age}</span>
              </div>
              <div className="flex items-center space-x-3">
                <MapPin className="w-5 h-5 text-primary" />
                <span><strong>City:</strong> Kolkata, India</span>
              </div>
              <div className="flex items-center space-x-3">
                <Briefcase className="w-5 h-5 text-primary" />
                <span><strong>Degree:</strong> MCA</span>
              </div>
              <div className="flex items-center space-x-3">
                <UserCheck className="w-5 h-5 text-primary" />
                <span><strong>Freelance:</strong> Available</span>
              </div>
            </div>
            <p className="mb-8 text-muted-foreground leading-relaxed">
              Dedicated to pushing the boundaries of interactive entertainment and leveraging technology to create memorable user journeys. Always eager to connect and collaborate on innovative projects.
            </p>
            <div className="flex flex-col sm:flex-row gap-4">
              <Button asChild size="lg">
                <a href="/Rishav_Nath_Pati_Resume.pdf" download>
                  <Download className="mr-2 h-5 w-5" /> Download Resume
                </a>
              </Button>
              <Button asChild variant="outline" size="lg">
                <a href="mailto:patirishavnath@gmail.com">
                  <Mail className="mr-2 h-5 w-5" /> Email Me
                </a>
              </Button>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/sections/BlogHighlights.tsx">
import Link from 'next/link';
import Image from 'next/image';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { getSortedPostsData } from "@/lib/blog";
import { ArrowRight, CalendarDays, Clock } from 'lucide-react';
const formatDate = (dateString: string): string => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};
export function BlogHighlights() {
  const recentPosts = getSortedPostsData().slice(0, 3);
  return (
    <section id="blogs" className="py-20 lg:py-28">
      <div className="container mx-auto px-4">
        <div className="max-w-3xl mx-auto text-center mb-12 lg:mb-16">
          <h2 className="text-3xl lg:text-4xl font-bold mb-4 font-raleway text-foreground">
            From the Blog
          </h2>
          <p className="text-lg lg:text-xl text-muted-foreground leading-relaxed">
            Sharing insights and experiences from my journey in game development, interactive media, and technology exploration.
          </p>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {recentPosts.map((post, index) => (
            <Card
              key={post.slug}
              className="flex flex-col overflow-hidden transition-transform duration-300 ease-in-out hover:-translate-y-1 hover:shadow-lg dark:bg-neutral-800/50 group"
              data-aos="fade-up"
              data-aos-delay={index * 100}
            >
              <CardHeader className="p-0">
                <Link href={post.externalUrl || `/blog/${post.slug}`} target={post.externalUrl ? '_blank' : '_self'} rel={post.externalUrl ? 'noopener noreferrer' : ''} aria-label={`Read more about ${post.title}`}>
                  <div className="aspect-video overflow-hidden">
                    <Image
                      src={post.imageUrl}
                      alt={`Thumbnail for ${post.title}`}
                      width={600}
                      height={338}
                      className="object-cover w-full h-full transition-transform duration-300 ease-in-out group-hover:scale-105"
                      loading="lazy"
                    />
                  </div>
                </Link>
              </CardHeader>
              <CardContent className="flex-grow p-5">
                <div className="flex items-center space-x-4 text-xs text-muted-foreground mb-2">
                  <span className="flex items-center gap-1.5">
                    <CalendarDays className="w-3.5 h-3.5" /> {formatDate(post.date)}
                  </span>
                  {post.readTimeMinutes && (
                    <span className="flex items-center gap-1.5">
                      <Clock className="w-3.5 h-3.5" /> {post.readTimeMinutes} min read
                    </span>
                  )}
                </div>
                <CardTitle className="text-xl font-semibold mb-2 font-poppins line-clamp-2 group-hover:text-primary transition-colors">
                  <Link href={post.externalUrl || `/blog/${post.slug}`} target={post.externalUrl ? '_blank' : '_self'} rel={post.externalUrl ? 'noopener noreferrer' : ''}>
                    {post.title}
                  </Link>
                </CardTitle>
                <CardDescription className="text-muted-foreground mb-4 text-sm line-clamp-3">
                  {post.excerpt}
                </CardDescription>
                <div className="flex flex-wrap gap-2">
                  {post.tags?.slice(0, 3).map((tag) => (
                    <Badge key={tag} variant="secondary">{tag}</Badge>
                  ))}
                  {post.tags && post.tags.length > 3 && <Badge variant="outline">...</Badge>}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
        <div className="text-center mt-12 lg:mt-16">
          <Button size="lg" asChild>
            <Link href="/blog">
              Visit Blog <ArrowRight className="ml-2 h-5 w-5" />
            </Link>
          </Button>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/sections/ContactCTA.tsx">
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Mail } from 'lucide-react';
export function ContactCTA() {
  return (
    <section
      id="contact-cta"
      className="py-20 lg:py-28 bg-primary/10 dark:bg-primary/5"
    >
      <div className="container mx-auto px-4">
        <div
          className="max-w-3xl mx-auto text-center"
          data-aos="fade-up"
        >
          <h2 className="text-3xl lg:text-4xl font-bold mb-4 font-raleway text-foreground">
            Let's Connect
          </h2>
          <p className="text-lg lg:text-xl text-muted-foreground leading-relaxed mb-8">
            Have a project in mind, a question, or just want to chat about games and tech? I'd love to hear from you. Reach out and let's create something amazing together!
          </p>
          <Button size="lg" asChild className="text-lg px-8 py-6">
            <a href="mailto:patirishavnath@gmail.com">
              Get In Touch <Mail className="ml-2 h-5 w-5" />
            </a>
          </Button>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/sections/HeroSection.tsx">
'use client';
import React from 'react';
import Typed from 'typed.js';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { ArrowDown } from 'lucide-react';
export function HeroSection() {
  const el = React.useRef(null);
  React.useEffect(() => {
    const typed = new Typed(el.current, {
      strings: ['a GameDev.', 'a Developer.', 'a Freelancer.', 'a Photographer.'],
      typeSpeed: 60,
      backSpeed: 40,
      backDelay: 1800,
      startDelay: 500,
      loop: true,
      smartBackspace: true,
    });
    return () => {
      typed.destroy();
    };
  }, []);
  return (
    <section
      id="hero"
      className="min-h-screen w-full flex flex-col justify-center items-center text-center px-4 relative overflow-hidden"
    >
      <div className="z-10 max-w-3xl">
        <h1 className="text-4xl sm:text-5xl md:text-6xl font-bold mb-4 font-raleway tracking-tight text-foreground">
          Rishav Nath Pati
        </h1>
        <p className="text-xl sm:text-2xl md:text-3xl mb-8 text-muted-foreground font-poppins">
          I'm <span ref={el} className="text-primary font-semibold"></span>
        </p>
        <div className="flex flex-col sm:flex-row justify-center gap-4">
          <Button asChild size="lg" className="text-lg px-8 py-6">
            <Link href="#portfolio">View Portfolio</Link>
          </Button>
          <Button asChild variant="outline" size="lg" className="text-lg px-8 py-6">
            <Link href="#contact-cta">Contact Me</Link>
          </Button>
        </div>
      </div>
      <div className="absolute bottom-10 left-1/2 transform -translate-x-1/2 z-10">
        <Link href="#about" aria-label="Scroll down to about section">
          <ArrowDown className="w-6 h-6 text-muted-foreground animate-bounce" />
        </Link>
      </div>
    </section>
  );
}
</file>

<file path="src/components/sections/PortfolioHighlights.tsx">
import Link from 'next/link';
import Image from 'next/image';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { highlightedPortfolioItems } from "@/lib/data/portfolio";
import { ArrowRight, Github, ExternalLink } from 'lucide-react';
export function PortfolioHighlights() {
  return (
    <section id="portfolio" className="py-20 lg:py-28 bg-secondary/30 dark:bg-neutral-900/50">
      <div className="container mx-auto px-4">
        <div className="max-w-3xl mx-auto text-center mb-12 lg:mb-16">
          <h2 className="text-3xl lg:text-4xl font-bold mb-4 font-raleway text-foreground">
            Featured Projects
          </h2>
          <p className="text-lg lg:text-xl text-muted-foreground leading-relaxed">
            A glimpse into some of the projects I've worked on, showcasing skills in game development, machine learning, and interactive experiences.
          </p>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {highlightedPortfolioItems.map((item, index) => (
            <Card
              key={item.slug}
              className="flex flex-col overflow-hidden transition-transform duration-300 ease-in-out hover:-translate-y-1 hover:shadow-lg dark:bg-neutral-800/50"
              data-aos="fade-up"
              data-aos-delay={index * 100}
            >
              <CardHeader className="p-0">
                <div className="aspect-video overflow-hidden">
                  <Image
                    src={item.imageUrl}
                    alt={item.title}
                    width={600}
                    height={338}
                    className="object-cover w-full h-full transition-transform duration-300 ease-in-out group-hover:scale-105"
                    loading="lazy"
                  />
                </div>
              </CardHeader>
              <CardContent className="flex-grow p-5">
                <CardTitle className="text-xl font-semibold mb-2 font-poppins">{item.title}</CardTitle>
                <CardDescription className="text-muted-foreground mb-4 text-sm line-clamp-3">
                  {item.description}
                </CardDescription>
                <div className="flex flex-wrap gap-2">
                  {item.tags.slice(0, 4).map((tag) => (
                    <Badge key={tag} variant="secondary">
                      {tag}
                    </Badge>
                  ))}
                </div>
              </CardContent>
              <CardFooter className="p-5 bg-muted/30 dark:bg-neutral-800/30 border-t border-border flex justify-between items-center">
                {item.detailsUrl ? (
                  <Button variant="ghost" size="sm" asChild>
                    <Link href={item.detailsUrl} className="text-sm">
                      Learn More <ArrowRight className="ml-1 h-4 w-4" />
                    </Link>
                  </Button>
                ) : <div></div>}
                <div className="flex items-center space-x-2">
                  {item.githubUrl && (
                    <Button variant="outline" size="icon" className="h-8 w-8" asChild>
                      <a href={item.githubUrl} target="_blank" rel="noopener noreferrer" aria-label="GitHub Repository">
                        <Github className="h-4 w-4" />
                      </a>
                    </Button>
                  )}
                  {item.liveUrl && (
                    <Button variant="outline" size="icon" className="h-8 w-8" asChild>
                      <a href={item.liveUrl} target="_blank" rel="noopener noreferrer" aria-label="Live Demo">
                        <ExternalLink className="h-4 w-4" />
                      </a>
                    </Button>
                  )}
                </div>
              </CardFooter>
            </Card>
          ))}
        </div>
        <div className="text-center mt-12 lg:mt-16">
          <Button size="lg" asChild>
            <Link href="/portfolio">
              View All Projects <ArrowRight className="ml-2 h-5 w-5" />
            </Link>
          </Button>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/sections/SkillsSection.tsx">
import { Badge } from "@/components/ui/badge";
import { skillCategories } from "@/lib/data/skills";
export function SkillsSection() {
  return (
    <section id="skills" className="py-20 lg:py-28">
      <div className="container mx-auto px-4">
        <div className="max-w-3xl mx-auto text-center mb-12 lg:mb-16">
          <h2 className="text-3xl lg:text-4xl font-bold mb-4 font-raleway text-foreground">
            Technical Skills
          </h2>
          <p className="text-lg lg:text-xl text-muted-foreground leading-relaxed">
            A versatile skill set honed through game development, interactive media projects, and explorations into AI and machine learning. Continuously learning and adapting to new technologies.
          </p>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 lg:gap-12">
          {skillCategories.map((category, index) => (
            <div
              key={category.title}
              className="bg-card p-6 rounded-lg shadow-sm border border-border dark:bg-neutral-800/30"
              data-aos="fade-up"
              data-aos-delay={index * 100}
            >
              <h3 className="text-xl font-semibold mb-4 font-poppins text-primary">
                {category.title}
              </h3>
              <div className="flex flex-wrap gap-2">
                {category.skills.map((skill) => (
                  <Badge
                    key={skill.name}
                    variant="secondary"
                    className="text-sm px-3 py-1"
                  >
                    {skill.name}
                  </Badge>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)
function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"
  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}
export { Badge, badgeVariants }
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)
function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"
  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}
export { Button, buttonVariants }
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}
function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}
function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}
function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}
function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}
function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}
export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
</file>

<file path="src/components/AOSInitializer.tsx">
'use client';
import { useEffect } from 'react';
import AOS from 'aos';
import 'aos/dist/aos.css';
export const AOSInitializer = () => {
  useEffect(() => {
    AOS.init({
      duration: 700,
      easing: 'ease-out-cubic',
      once: true,
      offset: 50,
    });
  }, []);
  return null;
};
</file>

<file path="src/components/Footer.tsx">
export function Footer() {
  const currentYear = new Date().getFullYear();
  return (
    <footer id="footer" className="bg-gray-50 dark:bg-neutral-900 py-6 text-center text-sm text-gray-600 dark:text-neutral-400">
      <div className="container mx-auto px-4">
        <div className="copyright">
          © Copyright {currentYear} <strong><span>Rishav Nath Pati</span></strong>. All Rights Reserved.
        </div>
        <div className="credits mt-1">
          {}
        </div>
      </div>
    </footer>
  );
}
</file>

<file path="src/components/Header.tsx">
'use client';
import Image from 'next/image';
import Link from 'next/link';
import { Home, User, FileText, BookOpen, Mail, Bot, Github, Linkedin, FileCode2, Pencil, Menu, X } from 'lucide-react';
import { useState, useEffect } from 'react';
const navItems = [
  { href: '#hero', icon: Home, label: 'Home', sectionId: 'hero' },
  { href: '#about', icon: User, label: 'About', sectionId: 'about' },
  { href: '#skills', icon: FileText, label: 'Skills', sectionId: 'skills' },
  { href: '#portfolio', icon: BookOpen, label: 'Portfolio', sectionId: 'portfolio' },
  { href: '#blogs', icon: Pencil, label: 'Blogs', sectionId: 'blogs' },
  { href: '#contact-cta', icon: Mail, label: 'Contact', sectionId: 'contact-cta' },
];
const socialLinks = [
  { href: 'https://www.linkedin.com/in/rishavnathpati', icon: Linkedin, label: 'LinkedIn' },
  { href: 'https://github.com/rishavnathpati', icon: Github, label: 'GitHub' },
  { href: 'https://medium.com/@patirishavnath', icon: Bot, label: 'Medium' },
  { href: 'https://leetcode.com/rishavnathpati/', icon: FileCode2, label: 'LeetCode' },
];
export function Header() {
  const [isMobileNavOpen, setIsMobileNavOpen] = useState(false);
  const [activeSection, setActiveSection] = useState('hero');
  const handleClick = (e: React.MouseEvent<HTMLAnchorElement>, href: string) => {
    e.preventDefault();
    const targetId = href.replace('#', '');
    const element = document.getElementById(targetId);
    if (element) {
      const offset = 80; // Adjust this value based on your layout
      const elementPosition = element.getBoundingClientRect().top;
      const offsetPosition = elementPosition + window.pageYOffset - offset;
      window.scrollTo({
        top: offsetPosition,
        behavior: 'smooth'
      });
      setIsMobileNavOpen(false);
    }
  };
  const toggleMobileNav = () => {
    setIsMobileNavOpen(!isMobileNavOpen);
  };
  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setActiveSection(entry.target.id);
          }
        });
      },
      {
        rootMargin: '-50% 0px -50% 0px',
      }
    );
    navItems.forEach((item) => {
      const element = document.getElementById(item.sectionId);
      if (element) observer.observe(element);
    });
    return () => observer.disconnect();
  }, []);
  return (
    <>
      {}
      <button
        onClick={toggleMobileNav}
        className="fixed top-4 left-4 z-[9999] lg:hidden p-2 rounded-md bg-primary text-primary-foreground hover:bg-primary/90 transition-colors"
        aria-label={isMobileNavOpen ? "Close menu" : "Open menu"}
      >
        {isMobileNavOpen ? <X size={24} /> : <Menu size={24} />}
      </button>
      <header
        id="header"
        className={`fixed top-0 left-0 bottom-0 w-[300px] z-[9997] p-4 bg-gray-900 text-white overflow-y-auto transition-all duration-500 ease-in-out flex flex-col dark:bg-neutral-950
          ${isMobileNavOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}`}
      >
        <div className="profile text-center mb-8">
          <Image
            src="/profile-img.jpg"
            alt="Rishav Nath Pati - Game Developer"
            width={120}
            height={120}
            className="mx-auto block rounded-full border-8 border-gray-800 dark:border-neutral-800"
            priority
          />
          <h1 className="text-2xl font-semibold mt-4 mb-1">
            <Link href="/" className="text-white hover:text-blue-400 transition-colors">
              Rishav Nath Pati
            </Link>
          </h1>
          <div className="social-links mt-3 flex justify-center space-x-2">
            {socialLinks.map((link) => (
              <a
                key={link.label}
                href={link.href}
                target="_blank"
                rel="noopener noreferrer"
                aria-label={link.label}
                className="w-9 h-9 bg-gray-800 dark:bg-neutral-800 rounded-full flex items-center justify-center text-lg text-white hover:bg-blue-600 dark:hover:bg-blue-600 transition-colors"
              >
                <link.icon size={18} />
              </a>
            ))}
          </div>
        </div>
        <nav id="navbar" className="nav-menu flex-grow">
          <ul className="space-y-2">
            {navItems.map((item) => (
              <li key={item.label}>
                <a
                  href={item.href}
                  onClick={(e) => handleClick(e, item.href)}
                  className={`nav-link flex items-center py-3 px-4 rounded-md transition-colors group
                    ${activeSection === item.sectionId
                      ? 'text-white bg-gray-800 dark:bg-neutral-800'
                      : 'text-gray-400 dark:text-neutral-400 hover:text-white dark:hover:text-white hover:bg-gray-800 dark:hover:bg-neutral-800'
                    }`}
                  data-section={item.sectionId}
                >
                  <item.icon
                    size={20}
                    className={`mr-3 transition-colors
                      ${activeSection === item.sectionId
                        ? 'text-blue-400'
                        : 'text-gray-500 dark:text-neutral-500 group-hover:text-blue-400'
                      }`}
                  />
                  <span>{item.label}</span>
                </a>
              </li>
            ))}
          </ul>
        </nav>
      </header>
      {}
      {isMobileNavOpen && (
        <div
          className="fixed inset-0 bg-black/40 z-[9996] lg:hidden"
          onClick={() => setIsMobileNavOpen(false)}
        />
      )}
    </>
  );
}
</file>

<file path="src/components/ThemeProvider.tsx">
"use client";
import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";
import type { ThemeProviderProps } from "next-themes/dist/types";
export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}
</file>

<file path="src/components/ThemeToggle.tsx">
'use client';
import { Sun, Moon } from 'lucide-react';
import { useTheme } from 'next-themes';
import { useEffect, useState } from 'react';
import { Button } from "@/components/ui/button";
export function ThemeToggle() {
  const { theme, setTheme, resolvedTheme } = useTheme();
  const [mounted, setMounted] = useState(false);
  useEffect(() => {
    setMounted(true);
  }, []);
  if (!mounted) {
    return <div className="fixed top-4 right-4 z-[9999] h-10 w-10"></div>;
  }
  const isDark = resolvedTheme === 'dark';
  const toggleTheme = () => {
    setTheme(isDark ? 'light' : 'dark');
  };
  return (
    <div className="fixed top-4 right-4 z-[9999]">
      <Button
        variant="outline"
        size="icon"
        onClick={toggleTheme}
        aria-label={isDark ? 'Activate light mode' : 'Activate dark mode'}
        title={isDark ? 'Activate light mode' : 'Activate dark mode'}
      >
        {isDark ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
      </Button>
    </div>
  );
}
</file>

<file path="src/content/blogs/mac-terminal-setup.mdx">
---
title: 'Ultimate Mac Terminal Setup Guide'
date: '2024-03-15'
excerpt: 'A comprehensive guide to setting up a modern, efficient terminal environment on macOS with iTerm2, Oh My Zsh, and essential tools.'
tags: ['Development', 'Terminal', 'macOS', 'CLI', 'Productivity']
imageUrl: '/blog/thumbnails/mac-terminal.png'
readTimeMinutes: 15
slug: 'mac-terminal-setup'
---

A powerful terminal setup is essential for any developer on macOS. This guide walks you through installing and configuring iTerm2, Oh My Zsh, Powerlevel10k, essential tools, and plugins for a productive workflow.

## 1. Installing iTerm2

The default macOS Terminal is okay, but iTerm2 offers significant improvements.

```bash
brew install --cask iterm2
```

Why iTerm2?

- Split panes (Cmd+D vertical, Cmd+Shift+D horizontal)
- Hotkey window access
- Better search & autocomplete
- Customizable triggers and profiles
- Improved color support

Key iTerm2 Settings:
- Preferences → Profiles → Keys → Load Preset... → Natural Text Editing
- Preferences → Advanced → Search for "GPU" → Enable GPU renderer (if available)
- Preferences → Profiles → Terminal → Scrollback Buffer → Check "Unlimited scrollback"

## 2. Package Management: Homebrew

Homebrew is the missing package manager for macOS.

```bash
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

# Add Homebrew to your PATH (follow instructions from brew installer)
# Typically involves adding lines to ~/.zprofile or ~/.zshenv
echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
eval "$(/opt/homebrew/bin/brew shellenv)"
```

## 3. Shell Framework: Oh My Zsh & Powerlevel10k

Zsh is the default shell, but Oh My Zsh makes managing its configuration easier.

Install Git (if needed):
```bash
brew install git
```

Install Oh My Zsh:
```bash
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
```

Install Powerlevel10k Theme:
```bash
git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
```

Edit `~/.zshrc` and set `ZSH_THEME="powerlevel10k/powerlevel10k"`.

Install Recommended Font:
```bash
brew tap homebrew/cask-fonts
brew install --cask font-meslo-lg-nerd-font
```

Configure iTerm2 to use MesloLGS NF: Preferences → Profiles → Text → Font.

## 4. Essential Development Tools

Install modern CLI alternatives:

```bash
brew install eza         # Better ls
brew install bat         # Better cat
brew install ripgrep     # Better grep (rg)
brew install fd          # Better find
brew install fzf         # Fuzzy finder
brew install delta       # Better git diff
brew install tldr        # Simplified man pages
brew install jq          # JSON processor
brew install htop        # Process viewer
brew install ncdu        # Disk usage analyzer
```

## 5. Essential Zsh Plugins

Clone plugins into `$ZSH_CUSTOM/plugins/`:

```bash
# Auto suggestions
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

# Syntax highlighting
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting

# History substring search
git clone https://github.com/zsh-users/zsh-history-substring-search ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-history-substring-search
```

Edit `~/.zshrc` and add them to the plugins list:

```bash
plugins=(
    git
    # Add other core plugins like docker, npm, etc. if needed
    zsh-autosuggestions
    zsh-syntax-highlighting
    zsh-history-substring-search
    # Add other useful plugins below
    web-search
    copypath
    dirhistory
    sudo
)
```

Remember to run `source ~/.zshrc` after editing.

## Conclusion

This setup provides a modern, efficient terminal environment with:
- iTerm2 for better terminal emulation
- Homebrew for package management
- Oh My Zsh with Powerlevel10k theme for a beautiful, informative prompt
- Essential CLI tools for improved productivity
- Useful Zsh plugins for better shell interaction

Take time to explore each tool's features and customize the setup to your needs. Your terminal is a powerful tool - make it work for you!
</file>

<file path="src/lib/data/blog.ts">
export interface BlogPostHighlight {
  slug: string;
  title: string;
  date: string;
  excerpt: string;
  imageUrl: string;
  tags: string[];
  readTimeMinutes?: number;
  externalUrl?: string;
}
export const blogPostsData: BlogPostHighlight[] = [
  {
    slug: 'mac-terminal-setup',
    title: 'Ultimate Mac Terminal Setup Guide',
    date: '2024-03-15',
    excerpt: 'A comprehensive guide to setting up a modern, efficient terminal environment on macOS with iTerm2, Oh My Zsh, and essential tools.',
    imageUrl: '/portfolio/ml/hand gesture.jpeg',
    tags: ['Development', 'Terminal', 'macOS'],
    readTimeMinutes: 15,
  },
  {
    slug: 'beatrex-ball-dev-journey',
    title: 'Beatrex Ball: A Unity Game Development Journey',
    date: '2023-06-15',
    excerpt: 'Deep dive into the development process of Beatrex Ball, exploring the technical challenges and solutions in creating this rhythm-based mobile game.',
    imageUrl: '/portfolio/beatrex-ball/1.png',
    tags: ['GameDev', 'Unity', 'Mobile'],
    readTimeMinutes: 8,
  },
  {
    slug: 'hand-gesture-recognition-research',
    title: 'Real-time Hand Gesture Recognition Research',
    date: '2023-05-20',
    excerpt: 'Research publication on developing an efficient hand gesture recognition system using deep learning and computer vision techniques.',
    imageUrl: '/portfolio/ml/hand gesture.jpeg',
    tags: ['ML', 'Computer Vision', 'Research'],
    readTimeMinutes: 12,
  },
  {
    slug: 'hand-gesture-gui-mediapipe',
    title: 'Realtime Hand Gesture Controlled GUI (Medium)',
    date: '2023-04-15',
    excerpt: 'Learn how to create a hand gesture-controlled interface using computer vision and machine learning with MediaPipe and Python.',
    imageUrl: '/portfolio/ml/hand gesture.jpeg',
    tags: ['CV', 'Python', 'MediaPipe'],
    readTimeMinutes: 10,
    externalUrl: 'https://medium.com/@patirishavnath/realtime-hand-gesture-controlled-gui-using-mediapipe-and-python-c80f3a295fb',
  },
  {
    slug: 'brain-tumor-segmentation-unet',
    title: 'Brain Tumor Segmentation Using U-Net (Medium)',
    date: '2023-03-20',
    excerpt: 'Explore how deep learning, specifically the U-Net architecture, can be used for accurate brain tumor detection and segmentation.',
    imageUrl: '/portfolio/publications/brain tumour.jpeg',
    tags: ['Deep Learning', 'Medical Imaging', 'U-Net'],
    readTimeMinutes: 15,
    externalUrl: 'https://medium.com/@patirishavnath/brain-tumor-segmentation-using-u-net-architecture-d6c32bc9fa82',
  },
];
export const highlightedBlogPosts: BlogPostHighlight[] = blogPostsData
  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
  .slice(0, 3);
</file>

<file path="src/lib/data/portfolio.ts">
export interface PortfolioItem {
  slug: string;
  title: string;
  description: string;
  imageUrl: string;
  tags: string[];
  detailsUrl?: string;
  liveUrl?: string;
  githubUrl?: string;
  category: 'Games' | 'Machine Learning' | 'Publications' | 'Web';
}
export const portfolioItems: PortfolioItem[] = [
  {
    slug: 'beatrex-ball',
    title: 'Beatrex Ball',
    description: 'Engaging rhythm-based mobile game synchronizing obstacles with music beats. Built with Unity.',
    imageUrl: '/portfolio/games/BeatRex Ball.jpeg',
    tags: ['Unity', 'C#', 'Mobile Game', 'Rhythm'],
    detailsUrl: '/portfolio/beatrex-ball',
    githubUrl: 'https://github.com/rishavnathpati/BeatRex-Ball',
    category: 'Games',
  },
  {
    slug: 'hand-gesture-gui',
    title: 'Hand Gesture Controlled GUI',
    description: 'Real-time system using MediaPipe & OpenCV to control interfaces via hand movements.',
    imageUrl: '/portfolio/ml/hand gesture.jpeg',
    tags: ['Python', 'OpenCV', 'MediaPipe', 'Computer Vision', 'HCI'],
    detailsUrl: '/portfolio/hand-gesture-gui',
    githubUrl: 'https://github.com/rishavnathpati/Hand-Gesture-Control',
    category: 'Machine Learning',
  },
  {
    slug: 'yoga-asana-trainer',
    title: 'AI Yoga Asana Trainer',
    description: 'Real-time pose detection & analysis providing feedback using MediaPipe & TensorFlow.',
    imageUrl: '/portfolio/ml/yoga-asana.jpeg',
    tags: ['Python', 'TensorFlow', 'MediaPipe', 'AI', 'Fitness Tech'],
    detailsUrl: '/portfolio/yoga-asana-trainer',
    githubUrl: 'https://github.com/rishavnathpati/Yoga-Asana-Trainer',
    category: 'Machine Learning',
  },
  {
    slug: 'brain-tumor-segmentation',
    title: 'Brain Tumor Segmentation',
    description: 'Research implementing U-Net architecture for automated brain tumor detection in MRI scans.',
    imageUrl: '/portfolio/publications/brain tumour.jpeg',
    tags: ['Deep Learning', 'U-Net', 'Medical Imaging', 'Python', 'Research'],
    detailsUrl: '/portfolio/brain-tumor-publication',
    category: 'Publications',
  },
];
export const highlightedPortfolioItems: PortfolioItem[] = portfolioItems.slice(0, 3);
</file>

<file path="src/lib/data/skills.ts">
export interface Skill {
  name: string;
}
export interface SkillCategory {
  title: string;
  skills: Skill[];
}
export const skillCategories: SkillCategory[] = [
  {
    title: 'Core Development',
    skills: [
      { name: 'C#' },
      { name: 'Unity Engine (2D/3D)' },
      { name: 'Git / Version Control' },
      { name: 'Software Architecture' },
      { name: 'Design Patterns' },
      { name: 'Problem Solving' },
    ],
  },
  {
    title: 'Web & Interactive',
    skills: [
      { name: 'HTML' },
      { name: 'CSS' },
      { name: 'JavaScript' },
      { name: 'TypeScript' },
      { name: 'React' },
      { name: 'Next.js' },
      { name: 'Tailwind CSS' },
    ],
  },
  {
    title: 'XR & Emerging Tech',
    skills: [
      { name: 'Unity AR Foundation' },
      { name: 'Unity VR (XR Toolkit)' },
      { name: 'Conversational AI (Integration)' },
      { name: 'gRPC Networking' },
    ],
  },
  {
    title: 'AI / Machine Learning',
    skills: [
      { name: 'Python' },
      { name: 'Machine Learning Concepts' },
      { name: 'Deep Learning Concepts' },
      { name: 'TensorFlow (Basic)' },
      { name: 'MediaPipe' },
      { name: 'Computer Vision (Basic)' },
    ],
  },
  {
    title: 'Other Languages',
    skills: [
      { name: 'Java' },
      { name: 'C' },
      { name: 'C++' },
    ],
  },
];
</file>

<file path="src/lib/blog.ts">
import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';
export interface BlogPostMeta {
  title: string;
  date: string;
  excerpt: string;
  tags: string[];
  imageUrl: string;
  readTimeMinutes?: number;
  slug: string;
  externalUrl?: string;
}
export interface BlogPost extends BlogPostMeta {
  content: string;
}
const postsDirectory = path.join(process.cwd(), 'src/content/blogs');
export function getSortedPostsData(): BlogPostMeta[] {
  try {
    const fileNames = fs.readdirSync(postsDirectory).filter(name => name.endsWith('.mdx'));
    const allPostsData = fileNames.map((fileName): BlogPostMeta => {
      const slug = fileName.replace(/\.mdx$/, '');
      const fullPath = path.join(postsDirectory, fileName);
      const fileContents = fs.readFileSync(fullPath, 'utf8');
      const matterResult = matter(fileContents);
      return {
        slug,
        title: matterResult.data.title as string,
        date: matterResult.data.date as string,
        excerpt: matterResult.data.excerpt as string,
        tags: matterResult.data.tags as string[],
        imageUrl: matterResult.data.imageUrl as string,
        readTimeMinutes: matterResult.data.readTimeMinutes as number | undefined,
        externalUrl: matterResult.data.externalUrl as string | undefined,
      };
    });
    return allPostsData.sort((a, b) => {
      return new Date(b.date).getTime() - new Date(a.date).getTime();
    });
  } catch (error) {
    console.error("Error reading blog posts:", error);
    return [];
  }
}
export function getAllPostSlugs(): { params: { slug: string } }[] {
  try {
    const fileNames = fs.readdirSync(postsDirectory).filter(name => name.endsWith('.mdx'));
    return fileNames.map(fileName => ({
      params: {
        slug: fileName.replace(/\.mdx$/, '')
      }
    }));
  } catch (error) {
    console.error("Error getting post slugs:", error);
    return [];
  }
}
// Function to get specific post data by slug
export async function getPostData(slug: string): Promise<BlogPost | null> {
  const fullPath = path.join(postsDirectory, `${slug}.mdx`);
  try {
    const fileContents = fs.readFileSync(fullPath, 'utf8');
    const matterResult = matter(fileContents);
    const postData: BlogPost = {
      slug,
      title: matterResult.data.title as string,
      date: matterResult.data.date as string,
      excerpt: matterResult.data.excerpt as string,
      tags: matterResult.data.tags as string[],
      imageUrl: matterResult.data.imageUrl as string,
      readTimeMinutes: matterResult.data.readTimeMinutes as number | undefined,
      externalUrl: matterResult.data.externalUrl as string | undefined,
      content: matterResult.content,
    };
    return postData;
  } catch (error) {
    console.error(`Error reading blog post ${slug}:`, error);
    return null;
  }
}
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="tailwind.config.ts">
import type { Config } from 'tailwindcss';
const config = {
  darkMode: ['class'],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  prefix: '',
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px',
      },
    },
    extend: {
      fontFamily: {
        sans: ['var(--font-open-sans)', 'sans-serif'],
        raleway: ['var(--font-raleway)', 'sans-serif'],
        poppins: ['var(--font-poppins)', 'sans-serif'],
      },
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'accordion-down': {
          from: { height: '0' },
          to: { height: 'var(--radix-accordion-content-height)' },
        },
        'accordion-up': {
          from: { height: 'var(--radix-accordion-content-height)' },
          to: { height: '0' },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
  plugins: [
    require('tailwindcss-animate'),
    require('@tailwindcss/typography'),
  ],
} satisfies Config;
export default config;
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="src/app/globals.css">
@import "tailwindcss";
@import "tw-animate-css";
@custom-variant dark (&:is(.dark *));
@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}
.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}
@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 48%;
  }
}
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-family: var(--font-open-sans);
    min-height: 100vh;
    scroll-behavior: smooth;
  }
  h1, h2, h3, h4, h5, h6 {
    font-family: var(--font-raleway);
  }
  a {
    @apply text-primary underline-offset-4 hover:underline;
  }
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from "next";
import { Inter, Open_Sans, Raleway, Poppins } from "next/font/google";
import "./globals.css";
import { Header } from "@/components/Header";
import { Footer } from "@/components/Footer";
import { ThemeToggle } from "@/components/ThemeToggle";
import { AOSInitializer } from "@/components/AOSInitializer";
import { ThemeProvider } from "@/components/ThemeProvider";
const openSans = Open_Sans({
  subsets: ["latin"],
  variable: "--font-open-sans",
  display: "swap",
});
const raleway = Raleway({
  subsets: ["latin"],
  variable: "--font-raleway",
  display: "swap",
});
const poppins = Poppins({
  subsets: ["latin"],
  weight: ["300", "400", "500", "600", "700"],
  variable: "--font-poppins",
  display: "swap",
});
export const metadata: Metadata = {
  title: "Rishav Nath Pati | Game & Interactive Media Developer",
  description: "Portfolio of Rishav Nath Pati, specializing in Unity 3D/2D/AR/VR, C#, and Machine Learning.",
};
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className={`${openSans.variable} ${raleway.variable} ${poppins.variable}`} suppressHydrationWarning>
      <body className="font-open-sans bg-background text-foreground transition-colors duration-300">
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <AOSInitializer />
          <Header />
          <ThemeToggle />
          <div id="main" className="lg:ml-[300px] transition-all duration-500 ease-in-out">
            {children}
            <Footer />
          </div>
        </ThemeProvider>
      </body>
    </html>
  );
}
</file>

<file path="src/app/page.tsx">
import { HeroSection } from '@/components/sections/HeroSection';
import { AboutSection } from '@/components/sections/AboutSection';
import { SkillsSection } from '@/components/sections/SkillsSection';
import { PortfolioHighlights } from '@/components/sections/PortfolioHighlights';
import { BlogHighlights } from '@/components/sections/BlogHighlights';
import { ContactCTA } from '@/components/sections/ContactCTA';
export default function Home() {
  return (
    <main className="flex flex-col">
      <HeroSection />
      <AboutSection />
      <SkillsSection />
      <PortfolioHighlights />
      <BlogHighlights />
      <ContactCTA />
      {}
      <div className="h-20"></div>
    </main>
  );
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";
const nextConfig: NextConfig = {
};
export default nextConfig;
</file>

<file path="package.json">
{
  "name": "my-portfolio",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "npm run sitemap && next build",
    "start": "next start",
    "lint": "next lint",
    "sitemap": "node ./scripts/generate-sitemap.mjs"
  },
  "dependencies": {
    "@radix-ui/react-slot": "^1.1.2",
    "@tailwindcss/typography": "^0.5.16",
    "@types/aos": "^3.0.7",
    "aos": "^2.3.4",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "gray-matter": "^4.0.3",
    "lucide-react": "^0.485.0",
    "next": "15.2.4",
    "next-mdx-remote": "^5.0.0",
    "next-themes": "^0.4.6",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "rehype-pretty-code": "^0.13.0",
    "shiki": "^1.2.0",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7",
    "tw-animate-css": "^1.2.5",
    "typed.js": "^2.1.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.4",
    "globby": "^14.1.0",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

</files>
