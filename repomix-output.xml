This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
public/
  cv.html
  robots.txt
  sitemap.xml
scripts/
  generate-sitemap.mjs
src/
  app/
    blog/
      [slug]/
        page.tsx
      page.tsx
    portfolio/
      [slug]/
        page.tsx
      page.tsx
    globals.css
    layout.tsx
    not-found.tsx
    page.tsx
  components/
    easter-eggs/
      KonamiCode.tsx
    header/
      headerConstants.ts
      MobileNavToggle.tsx
      NavigationLinks.tsx
      ProfileCard.tsx
    sections/
      blog/
        BlogCard.tsx
      skills/
        AnimatedSkillCategory.tsx
      AboutSection.tsx
      AnimatedSections.tsx
      BlogHighlights.tsx
      ContactCTA.tsx
      ExperienceSection.tsx
      HeroSection.tsx
      PortfolioHighlights.tsx
      SkillsSection.tsx
    ui/
      mdx/
        Card.tsx
        Note.tsx
        Steps.tsx
      AnimateOnScroll.tsx
      badge.tsx
      button.tsx
      card.tsx
      console-provider.tsx
      console.tsx
      loading-overlay.tsx
      prose-terminal.tsx
      skeleton.tsx
      toast.tsx
      toaster.tsx
      use-toast.ts
    BlogCardSkeleton.tsx
    Footer.tsx
    Header.tsx
    KeyboardShortcutsHelp.tsx
    PageSkeleton.tsx
    PortfolioCardSkeleton.tsx
    ScrollToTop.tsx
    SectionSkeleton.tsx
    SkipLink.tsx
    tailwind-indicator.tsx
    theme-provider.tsx
  content/
    blogs/
      mac-terminal-setup.mdx
  hooks/
    useActiveSectionObserver.ts
    useKeyboardNavShortcuts.ts
    useNavigationSound.ts
  lib/
    config/
      metadata.ts
    data/
      about.ts
      blog.ts
      contact.ts
      experience.ts
      hero.ts
      portfolio.ts
      skills.ts
    blog.ts
    mdx-components.tsx
    utils.ts
.gitignore
capture-screenshots.sh
CODE_REVIEW.md
components.json
eslint.config.mjs
interactive-console-plan.md
next.config.mjs
package.json
portfolio-code-review-action-plan.md
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/cv.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rishav Nath Pati - CV</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        h1, h2, h3 {
            color: #2563eb;
        }
        h1 {
            text-align: center;
            margin-bottom: 5px;
        }
        .subtitle {
            text-align: center;
            font-size: 1.2em;
            margin-top: 0;
            margin-bottom: 20px;
            color: #555;
        }
        .contact-info {
            text-align: center;
            margin-bottom: 30px;
        }
        .section {
            margin-bottom: 30px;
        }
        .job {
            margin-bottom: 20px;
        }
        .job-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }
        .job-title {
            font-weight: bold;
            font-size: 1.1em;
        }
        .job-company {
            font-style: italic;
        }
        .job-period {
            color: #555;
        }
        ul {
            padding-left: 20px;
        }
        .skills-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        .skill-category {
            flex: 1;
            min-width: 200px;
        }
        .education {
            margin-bottom: 15px;
        }
    </style>
</head>
<body>
    <h1>Rishav Nath Pati</h1>
    <p class="subtitle">Game & Interactive Media Developer</p>
    
    <div class="contact-info">
        <p>Phone: +91 9123877594 | Kalyani, West Bengal, India</p>
    </div>
    
    <div class="section">
        <h2>Professional Summary</h2>
        <p>Senior Game Developer specializing in Unity3D and C#, with a proven track record of delivering over 10 published titles across mobile and PC platforms. Extensive experience in developing immersive AR/VR experiences, integrating AI solutions, and optimizing game performance. Demonstrated expertise in full-cycle game development, from concept to deployment, with a focus on creating engaging and technically sound interactive experiences.</p>
    </div>
    
    <div class="section">
        <h2>Professional Experience</h2>
        
        <div class="job">
            <div class="job-header">
                <span class="job-title">Interactive Media Developer</span>
                <span class="job-period">July 2022 - Present</span>
            </div>
            <div class="job-company">Convai, San Jose, California</div>
            <ul>
                <li>Lead development of conversational AI integration within Unity Engine, improving user engagement metrics by 40%</li>
                <li>Engineered and optimized deep learning model prompts, achieving 30% better response accuracy</li>
                <li>Implemented efficient gRPC networking solutions, reducing latency by 25% in multiplayer scenarios</li>
                <li>Developed and optimized game systems resulting in 35% improvement in frame rates</li>
                <li>Architected scalable systems handling 100K+ daily active users</li>
                <li>Created end-to-end speech solutions with 95% accuracy in virtual environments</li>
                <li>Mentored junior developers in best practices and design patterns</li>
            </ul>
            <p><strong>Skills:</strong> Unity, C#, Conversational AI, gRPC, System Design, Game Optimization, AR/VR</p>
        </div>
        
        <div class="job">
            <div class="job-header">
                <span class="job-title">Freelance Software Engineer, Game Developer</span>
                <span class="job-period">November 2021 - April 2022</span>
            </div>
            <div class="job-company">Self-employed, Vellore, Tamil Nadu</div>
            <ul>
                <li>Developed and published 3 mobile games with 100K+ combined downloads</li>
                <li>Implemented advanced rendering techniques improving visual quality by 50%</li>
                <li>Created custom tools and plugins for Unity, reducing development time by 30%</li>
            </ul>
            <p><strong>Skills:</strong> Unity, C#, Game Development, Mobile Development, Performance Optimization</p>
        </div>
        
        <div class="job">
            <div class="job-header">
                <span class="job-title">Game Developer</span>
                <span class="job-period">May 2021 - November 2021</span>
            </div>
            <div class="job-company">IDZ Digital Private Limited, Mumbai, Maharashtra</div>
            <ul>
                <li>Developed 5 game prototypes with rapid iteration cycles</li>
                <li>Implemented core gameplay mechanics and UI systems</li>
                <li>Reduced loading times by 40% through asset optimization</li>
                <li>Collaborated with artists and designers to implement visual effects</li>
            </ul>
            <p><strong>Skills:</strong> Unity, C#, Game Design, Prototyping, UI/UX, VFX</p>
        </div>
    </div>
    
    <div class="section">
        <h2>Education</h2>
        
        <div class="education">
            <div class="job-header">
                <span class="job-title">Master of Computer Applications</span>
                <span class="job-period">2022 - 2024</span>
            </div>
            <div class="job-company">Vellore Institute of Technology, Vellore, Tamil Nadu, India</div>
            <p>Specializing in advanced computing principles with focus on AI and computer vision. Published research on hand gesture recognition achieving 95% accuracy. GPA: 9.2/10</p>
        </div>
        
        <div class="education">
            <div class="job-header">
                <span class="job-title">Bachelor of Science in Computer Science</span>
                <span class="job-period">2018 - 2021</span>
            </div>
            <div class="job-company">Ramakrishna Mission Residential College, Kolkata, West Bengal, India</div>
            <p>Focused on theoretical computer science, mathematics, and machine learning. Published research on brain tumor segmentation with 92% detection accuracy. GPA: 9.5/10</p>
        </div>
    </div>
    
    <div class="section">
        <h2>Technical Skills</h2>
        
        <div class="skills-container">
            <div class="skill-category">
                <h3>Core Development</h3>
                <ul>
                    <li>Unity 3D/2D/AR/VR</li>
                    <li>C#</li>
                    <li>Java</li>
                    <li>Design Patterns</li>
                    <li>Software Architecture</li>
                </ul>
            </div>
            
            <div class="skill-category">
                <h3>Data & AI</h3>
                <ul>
                    <li>Python</li>
                    <li>Machine Learning / Deep Learning</li>
                    <li>TensorFlow</li>
                    <li>OpenCV</li>
                </ul>
            </div>
            
            <div class="skill-category">
                <h3>Web Development</h3>
                <ul>
                    <li>React</li>
                    <li>Next.js</li>
                    <li>Node.js</li>
                    <li>HTML/CSS</li>
                    <li>Tailwind</li>
                </ul>
            </div>
            
            <div class="skill-category">
                <h3>XR Development</h3>
                <ul>
                    <li>AR Foundation</li>
                    <li>XR Toolkit</li>
                    <li>Conversational AI</li>
                    <li>gRPC</li>
                </ul>
            </div>
        </div>
    </div>
    
    <div class="section">
        <h2>Key Competencies</h2>
        <ul>
            <li>Innovative problem-solver with a proven track record of turning complex technical challenges into elegant, user-friendly solutions</li>
            <li>Strong advocate for clean code and optimization, consistently delivering high-performance applications that exceed expectations</li>
            <li>Experienced in rapid prototyping and agile development, adapting quickly to new technologies and project requirements</li>
            <li>Dedicated to creating immersive user experiences through a combination of technical expertise and creative design</li>
            <li>Committed to continuous learning and staying current with emerging technologies in game development and interactive media</li>
        </ul>
    </div>
</body>
</html>
</file>

<file path="src/components/header/headerConstants.ts">
import { Home, User, FileText, Mail, Bot, Github, Linkedin, FileCode2, Pencil, Gamepad2 } from 'lucide-react';

// Define navigation items with enhanced metadata
export const navItems = [
  { href: '#hero', icon: Home, label: 'Home', sectionId: 'hero', command: 'cd ~', shortcut: '1' },
  { href: '#about', icon: User, label: 'About', sectionId: 'about', command: 'cat about.md', shortcut: '2' },
  {
    href: '#experience',
    icon: FileText,
    label: 'Experience',
    sectionId: 'experience',
    command: 'cat experience.md',
    shortcut: '4'
  },
  { href: '#skills', icon: FileText, label: 'Skills', sectionId: 'skills', command: 'ls skills/', shortcut: '3' },
  { href: '#portfolio', icon: Gamepad2, label: 'Portfolio', sectionId: 'portfolio', command: './view_projects', shortcut: '5' },
  { href: '#blogs', icon: Pencil, label: 'Blogs', sectionId: 'blogs', command: 'vim blog.md', shortcut: '6' },
  { href: '#contact-cta', icon: Mail, label: 'Contact', sectionId: 'contact-cta', command: 'mail -s "Hello"', shortcut: '7' },
];

// Define social links with enhanced metadata
export const socialLinks = [
  { href: 'https://www.linkedin.com/in/rishavnathpati', icon: Linkedin, label: 'LinkedIn', command: 'open linkedin' },
  { href: 'https://github.com/rishavnathpati', icon: Github, label: 'GitHub', command: 'git remote -v' },
  { href: 'https://medium.com/@patirishavnath', icon: Bot, label: 'Medium', command: 'read blog' },
  { href: 'https://leetcode.com/rishavnathpati/', icon: FileCode2, label: 'LeetCode', command: 'solve algo' },
];
</file>

<file path="src/components/header/MobileNavToggle.tsx">
'use client';

import { Terminal, X } from 'lucide-react';
import { useConsole } from '@/components/ui/console-provider';
import { useNavigationSound } from '@/hooks/useNavigationSound';

interface MobileNavToggleProps {
  isOpen: boolean;
  onToggle: () => void;
}

export function MobileNavToggle({ isOpen, onToggle }: MobileNavToggleProps) {
  const { log } = useConsole();
  const { playNavigationSound } = useNavigationSound();

  const handleToggle = () => {
    onToggle();
    log(`Terminal ${!isOpen ? 'maximized' : 'minimized'}`);
    playNavigationSound();
  };

  return (
    <button
      onClick={handleToggle}
      className="fixed top-4 left-4 z-[9999] lg:hidden p-2 rounded-md bg-black/30 backdrop-blur-sm border border-border text-foreground hover:text-primary hover:border-primary transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-background"
      aria-label={isOpen ? "Minimize terminal" : "Open terminal"}
      aria-expanded={isOpen}
      aria-controls="header"
    >
      {isOpen ? <X size={20} /> : <Terminal size={20} />}
      <span className="sr-only">{isOpen ? "Close navigation menu" : "Open navigation menu"}</span>
    </button>
  );
}
</file>

<file path="src/components/header/NavigationLinks.tsx">
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { Command } from 'lucide-react';

interface NavItem {
  href: string;
  icon: React.ComponentType<{ size?: number; className?: string }>;
  label: string;
  sectionId: string;
  command: string;
  shortcut: string;
}

interface NavigationLinksProps {
  navItems: NavItem[];
  activeSection: string;
  onLinkClick: (e: React.MouseEvent<HTMLAnchorElement>, href: string, command: string) => void;
  firstNavLinkRef?: React.RefObject<HTMLAnchorElement | null>;
}

export function NavigationLinks({ navItems, activeSection, onLinkClick, firstNavLinkRef }: NavigationLinksProps) {
  const pathname = usePathname();

  return (
    <nav id="navbar" className="nav-menu flex-grow mt-8">
      <div className="flex items-center gap-2 mb-4">
        <Command size={16} className="text-primary" />
        <span className="font-mono text-sm text-muted-foreground">navigation.sh</span>
      </div>
      <ul className="space-y-2">
        {navItems.map((item, index) => {
          const isActive = activeSection === item.sectionId && pathname === '/';
          return (
            <li key={item.label}>
              <Link
                href={item.href}
                ref={index === 0 ? firstNavLinkRef : null}
                className={`nav-link flex items-center py-3 px-4 rounded-md transition-all duration-200 group font-mono text-sm relative overflow-hidden ${
                  isActive
                    ? 'bg-black/50 text-primary border border-primary/30 no-underline hover:no-underline'
                    : 'text-muted-foreground hover:text-primary hover:bg-black/30 border border-transparent'
                } focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-background`}
                data-section={item.sectionId}
                onClick={(e) => onLinkClick(e, item.href, item.command)}
                aria-current={isActive ? 'page' : undefined}
                suppressHydrationWarning
              >
                <div className="flex items-center flex-1">
                  <item.icon
                    size={16}
                    className={`mr-2 transition-colors ${
                      isActive
                        ? 'text-primary'
                        : 'text-muted-foreground group-hover:text-primary'
                    }`}
                  />
                  <span>{item.label.toLowerCase()}</span>
                </div>
                <div className="opacity-0 group-hover:opacity-100 transition-opacity text-xs text-primary/60 flex items-center gap-1" aria-hidden="true">
                  <Command size={12} />
                  <span>Alt+{item.shortcut}</span>
                </div>
                {isActive && (
                  <div className="absolute bottom-0 left-0 h-[2px] bg-primary/40 w-full transform origin-left scale-x-100 transition-transform"></div>
                )}
              </Link>
            </li>
          );
        })}
      </ul>
    </nav>
  );
}
</file>

<file path="src/components/header/ProfileCard.tsx">
'use client';

import Image from 'next/image';
import Link from 'next/link';
import { Terminal } from 'lucide-react';
import { useConsole } from '@/components/ui/console-provider';
import { useNavigationSound } from '@/hooks/useNavigationSound';

interface SocialLink {
  href: string;
  icon: React.ComponentType<{ size?: number; className?: string }>;
  label: string;
  command: string;
}

interface ProfileCardProps {
  socialLinks: SocialLink[];
}

export function ProfileCard({ socialLinks }: ProfileCardProps) {
  const { success } = useConsole();
  const { playNavigationSound } = useNavigationSound();

  const handleSocialLinkClick = (command: string) => {
    success(`Executing: ${command}`);
    playNavigationSound();
  };

  return (
    <div className="profile mb-8 pt-10 lg:pt-0">
      <div className="bg-black/40 rounded-lg border border-border p-6 relative group">
        <div className="absolute inset-0 bg-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-lg"></div>
        <div className="flex items-center gap-3 mb-4">
          <Terminal size={16} className="text-primary" />
          <span className="font-mono text-sm text-muted-foreground">user_profile.json</span>
        </div>
        
        <div className="flex flex-col items-center relative z-10">
          <div className="relative group">
            <Image
              src="/profile-img.jpg"
              alt="Rishav Nath Pati"
              width={100}
              height={100}
              className="rounded-lg border-2 border-primary/20 transition-transform duration-300 group-hover:scale-105"
              priority
            />
            <div className="absolute inset-0 border-2 border-primary/0 rounded-lg transition-all duration-300 group-hover:border-primary/40 group-hover:scale-105"></div>
          </div>
          <h1 className="text-xl font-mono mt-4 mb-1">
            <Link href="/" className="text-foreground hover:text-primary transition-colors">
              <span className="text-primary">./</span>rishav_nath_pati
            </Link>
          </h1>
          <div className="social-links mt-4 flex justify-center space-x-2">
            {socialLinks.map((link) => (
              <a
                key={link.label}
                href={link.href}
                target="_blank"
                rel="noopener noreferrer"
                aria-label={link.label}
                className="w-8 h-8 bg-black/30 rounded-md flex items-center justify-center text-muted-foreground hover:text-primary hover:border-primary transition-all duration-200 border border-border hover:scale-110"
                onClick={() => handleSocialLinkClick(link.command)}
              >
                <link.icon size={16} />
              </a>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/sections/blog/BlogCard.tsx">
'use client';

import { memo, useMemo } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { Badge } from "@/components/ui/badge";
import { BlogPostMeta } from "@/lib/blog";
import { CalendarDays, Clock } from 'lucide-react';

// Helper function
function formatDate(dateString: string): string {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}

// Memoized BlogCard component
const BlogCard = memo(function BlogCard({ post }: { post: BlogPostMeta }) {
  // Memoize the formatted date
  const formattedDate = useMemo(() => formatDate(post.date), [post.date]);
  
  return (
    <div className="flex flex-col md:flex-row overflow-hidden transition-transform duration-300 ease-in-out hover:-translate-y-1 hover:shadow-lg bg-black/20 border border-border/50 group">
      {/* Image on the left */}
      <div className="p-0 md:w-1/3 lg:w-1/4 flex-shrink-0">
        <Link 
          href={post.externalUrl || `/blog/${post.slug}`} 
          target={post.externalUrl ? '_blank' : '_self'} 
          rel={post.externalUrl ? 'noopener noreferrer' : ''} 
          aria-label={`Read more about ${post.title}`}
        >
          <div className="aspect-video md:aspect-square overflow-hidden h-full">
            <Image
              src={post.imageUrl}
              alt={`Thumbnail for ${post.title}`}
              width={300}
              height={300}
              className="object-cover w-full h-full transition-transform duration-300 ease-in-out group-hover:scale-105"
              loading="lazy"
              sizes="(max-width: 768px) 100vw, (max-width: 1200px) 33vw, 25vw"
              quality={75}
            />
          </div>
        </Link>
      </div>

      {/* Content on the right */}
      <div className="flex-grow p-5 flex flex-col justify-center">
        <div className="flex items-center space-x-4 text-xs text-muted-foreground mb-2 font-mono">
          <span className="flex items-center gap-1.5">
            <CalendarDays className="w-3.5 h-3.5" /> {formattedDate}
          </span>
          {post.readTimeMinutes && (
            <span className="flex items-center gap-1.5">
              <Clock className="w-3.5 h-3.5" /> {post.readTimeMinutes} min read
            </span>
          )}
        </div>
        <h3 className="text-lg font-semibold mb-2 font-mono line-clamp-2 group-hover:text-primary transition-colors">
          <Link 
            href={post.externalUrl || `/blog/${post.slug}`} 
            target={post.externalUrl ? '_blank' : '_self'} 
            rel={post.externalUrl ? 'noopener noreferrer' : ''}
          >
            {post.title}
          </Link>
        </h3>
        <p className="text-foreground mb-4 text-sm line-clamp-2 font-mono">
          {post.excerpt}
        </p>
        <div className="flex flex-wrap gap-2 mt-auto pt-2">
          {post.tags?.slice(0, 3).map((tag: string) => (
            <Badge 
              key={tag} 
              variant="outline" 
              className="font-mono text-xs transition-colors hover:bg-primary/10"
            >
              {tag}
            </Badge>
          ))}
          {post.tags && post.tags.length > 3 && (
            <Badge 
              variant="outline" 
              className="font-mono text-xs transition-colors hover:bg-primary/10"
            >
              ...
            </Badge>
          )}
        </div>
      </div>
    </div>
  );
});

export default BlogCard;
</file>

<file path="src/components/sections/skills/AnimatedSkillCategory.tsx">
'use client';

import React from 'react';
import AnimateOnScroll from "@/components/ui/AnimateOnScroll";
import { SkillCategory, Skill } from "@/lib/data/skills";

// Skill card component
function SkillCard({ skill }: { skill: Skill }) {
  return (
    <div className="flex items-center p-2 rounded">
      <div className="flex items-center justify-between w-full relative">
        <div className="flex items-center gap-2">
          {skill.icon && (
            <span className="text-lg">
              {skill.icon}
            </span>
          )}
          <span className="font-mono text-sm text-foreground">
            {skill.name}
          </span>
        </div>
        <span className="text-xs text-primary/60">Level {skill.level}/5</span>
      </div>
    </div>
  );
}

// Animated skill category component
export function AnimatedSkillCategory({
  category,
  index
}: {
  category: SkillCategory;
  index: number;
}) {
  return (
    <AnimateOnScroll key={category.title} delay={0.4 + index * 0.1}>
      <div className="bg-black/20 rounded-lg border border-border/50 overflow-hidden">
        <div className="border-b border-border/50 px-4 py-2 flex items-center gap-2 bg-black/40">
          <span className="font-mono text-sm text-primary">{category.icon}</span>
          <h3 className="font-mono text-sm text-foreground">
            {category.title}
          </h3>
        </div>

        <div className="p-6 space-y-4">
          {category.skills.map((skill: Skill) => (
            <SkillCard key={skill.name} skill={skill} />
          ))}
        </div>
      </div>
    </AnimateOnScroll>
  );
}

// Animated description component
export function AnimatedDescription({ children }: { children: React.ReactNode }) {
  return (
    <AnimateOnScroll delay={0.3}>
      {children}
    </AnimateOnScroll>
  );
}

// Animated terminal command component
export function AnimatedTerminalCommand({ 
  children, 
  delay 
}: { 
  children: React.ReactNode;
  delay: number;
}) {
  return (
    <AnimateOnScroll delay={delay}>
      {children}
    </AnimateOnScroll>
  );
}
</file>

<file path="src/components/ui/prose-terminal.tsx">
import React from 'react';
import { cn } from '@/lib/utils';

interface ProseTerminalProps {
  children: React.ReactNode;
  className?: string;
}

/**
 * ProseTerminal component
 * 
 * A reusable component that applies consistent terminal-style typography
 * using Tailwind's typography plugin with monospace font styling.
 */
export function ProseTerminal({ children, className }: ProseTerminalProps) {
  return (
    <div 
      className={cn(
        "prose prose-invert max-w-none prose-neutral prose-lg",
        "prose-headings:font-mono",
        "prose-p:font-mono",
        "prose-li:font-mono",
        "prose-a:text-primary prose-a:no-underline hover:prose-a:text-primary/80",
        "prose-strong:font-semibold prose-strong:text-foreground",
        "prose-em:italic prose-em:text-foreground",
        "prose-blockquote:border-l-4 prose-blockquote:border-primary/50",
        "prose-blockquote:pl-4 prose-blockquote:italic prose-blockquote:text-muted-foreground prose-blockquote:font-mono",
        className
      )}
    >
      {children}
    </div>
  );
}
</file>

<file path="src/components/KeyboardShortcutsHelp.tsx">
'use client';

import { useState } from 'react';
import { Command, Info, X } from 'lucide-react';
import { navItems } from '@/components/header/headerConstants';

export function KeyboardShortcutsHelp() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <>
      <button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-4 right-4 z-40 p-2 rounded-full bg-black/50 border border-border text-foreground hover:text-primary hover:border-primary transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-background"
        aria-label="Keyboard shortcuts help"
      >
        <Info size={20} />
        <span className="sr-only">Keyboard shortcuts help</span>
      </button>

      {isOpen && (
        <div
          className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
          role="dialog"
          aria-modal="true"
          aria-labelledby="keyboard-shortcuts-title"
        >
          <div className="bg-black/80 border border-border rounded-lg max-w-md w-full p-6 relative">
            <button
              onClick={() => setIsOpen(false)}
              className="absolute top-4 right-4 text-muted-foreground hover:text-primary transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-background rounded-full p-1"
              aria-label="Close keyboard shortcuts help"
            >
              <X size={20} />
            </button>

            <div className="mb-4 flex items-center gap-2">
              <Command size={20} className="text-primary" />
              <h2 id="keyboard-shortcuts-title" className="text-xl font-bold">Keyboard Shortcuts</h2>
            </div>

            <p className="text-foreground/80 mb-4">
              This site supports keyboard navigation using the following shortcuts:
            </p>

            <div className="space-y-2">
              {navItems.map((item) => (
                <div key={item.shortcut} className="flex items-center justify-between p-2 rounded-md bg-black/40 border border-border">
                  <div className="flex items-center gap-2">
                    <item.icon size={16} className="text-primary" />
                    <span>{item.label}</span>
                  </div>
                  <kbd className="px-2 py-1 bg-black/60 border border-primary/30 rounded text-primary text-sm">
                    Alt+{item.shortcut}
                  </kbd>
                </div>
              ))}
            </div>

            <p className="mt-4 text-sm text-foreground/70">
              These shortcuts are optional and all content can be accessed using standard navigation.
            </p>
          </div>
        </div>
      )}
    </>
  );
}
</file>

<file path="src/components/PageSkeleton.tsx">
import { Skeleton } from "./ui/skeleton";

export function PageSkeleton() {
  return (
    <div className="container mx-auto px-4 py-16 lg:py-24">
      {/* Header section */}
      <div className="max-w-3xl mx-auto text-center mb-12 lg:mb-16">
        <Skeleton className="h-12 w-64 mx-auto mb-4" />
        <Skeleton className="h-6 w-full max-w-lg mx-auto" />
      </div>
      
      {/* Main content */}
      <div className="space-y-8">
        {/* First section */}
        <div className="bg-black/30 border border-border rounded-lg p-6">
          <Skeleton className="h-8 w-48 mb-4" />
          <Skeleton className="h-5 w-full max-w-2xl mb-8" />
          
          <div className="space-y-6">
            <Skeleton className="h-24 w-full" />
            <Skeleton className="h-24 w-full" />
            <Skeleton className="h-24 w-full" />
          </div>
        </div>
        
        {/* Second section */}
        <div className="bg-black/30 border border-border rounded-lg p-6">
          <Skeleton className="h-8 w-48 mb-4" />
          <Skeleton className="h-5 w-full max-w-2xl mb-8" />
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {Array.from({ length: 6 }).map((_, index) => (
              <div key={index} className="flex flex-col">
                <Skeleton className="aspect-video w-full mb-3" />
                <Skeleton className="h-6 w-3/4 mb-2" />
                <Skeleton className="h-4 w-full mb-4" />
                <div className="flex gap-2">
                  <Skeleton className="h-5 w-16" />
                  <Skeleton className="h-5 w-20" />
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/SectionSkeleton.tsx">
import { Skeleton } from "./ui/skeleton";

interface SectionSkeletonProps {
  height?: string;
  className?: string;
}

export function SectionSkeleton({ height = "h-[600px]", className = "" }: SectionSkeletonProps) {
  return (
    <div className={`w-full ${height} rounded-lg overflow-hidden bg-black/30 border border-border p-6 ${className}`}>
      {/* Section header */}
      <Skeleton className="h-8 w-48 mb-4" />
      <Skeleton className="h-5 w-full max-w-2xl mb-8" />
      
      {/* Section content - generic layout that works for most sections */}
      <div className="space-y-6">
        <div className="flex flex-col space-y-4">
          <Skeleton className="h-24 w-full" />
          <Skeleton className="h-24 w-full" />
          <Skeleton className="h-24 w-full" />
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-6">
          <Skeleton className="h-32 w-full" />
          <Skeleton className="h-32 w-full" />
        </div>
      </div>
    </div>
  );
}

// Specific section skeletons with appropriate heights and structures
export function AboutSectionSkeleton() {
  return <SectionSkeleton height="h-[600px]" />;
}

export function ExperienceSectionSkeleton() {
  return <SectionSkeleton height="h-[800px]" />;
}

export function SkillsSectionSkeleton() {
  return <SectionSkeleton height="h-[700px]" />;
}

export function PortfolioHighlightsSkeleton() {
  return (
    <div className="w-full h-[600px] rounded-lg overflow-hidden bg-black/30 border border-border p-6">
      {/* Section header */}
      <Skeleton className="h-8 w-48 mb-4" />
      <Skeleton className="h-5 w-full max-w-2xl mb-8" />
      
      {/* Portfolio cards grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {Array.from({ length: 3 }).map((_, index) => (
          <div key={index} className="flex flex-col">
            <Skeleton className="aspect-video w-full mb-3" />
            <Skeleton className="h-6 w-3/4 mb-2" />
            <Skeleton className="h-4 w-full mb-4" />
            <div className="flex gap-2">
              <Skeleton className="h-5 w-16" />
              <Skeleton className="h-5 w-20" />
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

export function BlogHighlightsSkeleton() {
  return (
    <div className="w-full h-[500px] rounded-lg overflow-hidden bg-black/30 border border-border p-6">
      {/* Section header */}
      <Skeleton className="h-8 w-48 mb-4" />
      <Skeleton className="h-5 w-full max-w-2xl mb-8" />
      
      {/* Blog cards grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {Array.from({ length: 3 }).map((_, index) => (
          <div key={index} className="flex flex-col">
            <Skeleton className="aspect-video w-full mb-3" />
            <div className="flex items-center space-x-4 mb-2">
              <Skeleton className="h-4 w-24" />
              <Skeleton className="h-4 w-20" />
            </div>
            <Skeleton className="h-6 w-full mb-2" />
            <Skeleton className="h-4 w-full mb-1" />
            <Skeleton className="h-4 w-3/4 mb-2" />
            <div className="flex gap-2">
              <Skeleton className="h-5 w-16 rounded-md" />
              <Skeleton className="h-5 w-20 rounded-md" />
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

export function ContactCTASkeleton() {
  return (
    <div className="w-full h-[300px] rounded-lg overflow-hidden bg-black/30 border border-border p-6">
      {/* Section header */}
      <Skeleton className="h-8 w-48 mb-4" />
      <Skeleton className="h-5 w-full max-w-2xl mb-8" />
      
      {/* Contact form or buttons */}
      <div className="flex flex-col items-center justify-center space-y-4">
        <Skeleton className="h-12 w-64" />
        <div className="flex space-x-4">
          <Skeleton className="h-10 w-10 rounded-full" />
          <Skeleton className="h-10 w-10 rounded-full" />
          <Skeleton className="h-10 w-10 rounded-full" />
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/hooks/useActiveSectionObserver.ts">
'use client';

import { useState, useEffect, useRef } from 'react';
import { usePathname } from 'next/navigation';
import { useConsole } from '@/components/ui/console-provider';

interface SectionItem {
  sectionId: string;
  label: string;
}

export function useActiveSectionObserver(items: SectionItem[]) {
  const [activeSection, setActiveSection] = useState('hero');
  const observerRef = useRef<IntersectionObserver | null>(null);
  const sectionRefs = useRef<Map<string, HTMLElement>>(new Map());
  const pathname = usePathname();
  const { log, success } = useConsole();

  useEffect(() => {
    // Only set up the observer if we're on the home page
    if (pathname !== '/') return;

    if (observerRef.current) observerRef.current.disconnect();

    const observerOptions = {
      root: null,
      rootMargin: '-20% 0px -70% 0px',
      threshold: 0,
    };

    const observerCallback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const sectionId = entry.target.id;
          
          setActiveSection(sectionId);
          log(`Loading section: ${sectionId}`);
          
          setTimeout(() => {
            success(`Section "${sectionId}" loaded successfully`);
          }, 500);
        }
      });
    };

    observerRef.current = new IntersectionObserver(observerCallback, observerOptions);
    const currentObserver = observerRef.current;
    const currentSectionRefs = sectionRefs.current;

    items.forEach(item => {
      const sectionElement = document.getElementById(item.sectionId);
      if (sectionElement) {
        currentObserver.observe(sectionElement);
        currentSectionRefs.set(item.sectionId, sectionElement);
      }
    });

    return () => {
      if (currentObserver) {
        currentObserver.disconnect();
      }
      currentSectionRefs.clear();
    };
  }, [pathname, items, log, success]);

  return { activeSection };
}
</file>

<file path="src/hooks/useKeyboardNavShortcuts.ts">
'use client';

import { useEffect } from 'react';
import { useConsole } from '@/components/ui/console-provider';

interface NavItem {
  sectionId: string;
  command: string;
  shortcut: string;
}

interface UseKeyboardNavShortcutsProps {
  navItems: NavItem[];
  onNavigate?: () => void;
}

export function useKeyboardNavShortcuts({ navItems, onNavigate }: UseKeyboardNavShortcutsProps) {
  const { success } = useConsole();

  useEffect(() => {
    const handleShortcuts = (e: KeyboardEvent) => {
      // Only trigger when Alt key is pressed along with a number key
      if (e.type === 'keydown' && !e.repeat && e.altKey) {
        const num = parseInt(e.key);
        if (num >= 1 && num <= navItems.length) {
          e.preventDefault(); // Prevent default browser behavior
          const section = navItems[num - 1];
          const element = document.getElementById(section.sectionId);
          if (element) {
            element.scrollIntoView({ behavior: 'smooth' });
            success(`Executing: ${section.command}`);
            
            // Set focus to the section for better accessibility
            element.setAttribute('tabindex', '-1');
            element.focus();
            
            // Call the optional callback if provided
            if (onNavigate) {
              onNavigate();
            }
          }
        }
      }
    };

    window.addEventListener('keydown', handleShortcuts);
    return () => {
      window.removeEventListener('keydown', handleShortcuts);
    };
  }, [navItems, success, onNavigate]);
}
</file>

<file path="src/hooks/useNavigationSound.ts">
'use client';

import { useCallback } from 'react';

export function useNavigationSound() {
  const playNavigationSound = useCallback(() => {
    // You can implement actual sound effects here if desired
    console.log('*click*');
  }, []);

  return { playNavigationSound };
}
</file>

<file path="capture-screenshots.sh">
#!/bin/bash

# Create directories if they don't exist
mkdir -p public/portfolio/games
mkdir -p public/portfolio/ml
mkdir -p public/portfolio/publications
mkdir -p public/blog/thumbnails

# Function to capture screenshot
capture_screenshot() {
  local html_file=$1
  local output_file=$2
  
  # Open the HTML file in Safari and wait for it to load
  open -a Safari "$html_file"
  sleep 2
  
  # Capture the screenshot
  screencapture -l$(osascript -e 'tell app "Safari" to id of window 1') "$output_file"
  
  # Close Safari
  osascript -e 'tell application "Safari" to quit'
  sleep 1
}

# Capture screenshots for each placeholder
capture_screenshot "placeholder-itch-io-collection.html" "public/portfolio/games/itch-io-collection.jpg"
capture_screenshot "placeholder-journey-under-the-sea.html" "public/portfolio/games/journey-under-the-sea.jpg"
capture_screenshot "placeholder-hand-gesture-gui.html" "public/portfolio/ml/hand-gesture-gui.jpg"
capture_screenshot "placeholder-yoga-asana-trainer.html" "public/portfolio/ml/yoga-asana-trainer.jpg"
capture_screenshot "placeholder-brain-tumor-publication.html" "public/portfolio/publications/brain-tumor-publication.jpg"
capture_screenshot "placeholder-convai-integration.html" "public/portfolio/games/convai-integration.jpg"
capture_screenshot "placeholder-mac-terminal.html" "public/blog/thumbnails/mac-terminal.png"

echo "All screenshots captured successfully!"
</file>

<file path="CODE_REVIEW.md">
# Code Review Findings

This document outlines the findings of the code review conducted on the Next.js portfolio website codebase.

## Table of Contents

- [UI/UX Inconsistencies](#uiux-inconsistencies)
- [Performance & Optimization](#performance--optimization)
- [Logical Errors & Code Quality](#logical-errors--code-quality)
- [Unused/Dead Code](#unuseddead-code)
- [Missing Elements](#missing-elements)
- [Configuration Issues](#configuration-issues)
- [Accessibility (a11y)](#accessibility-a11y)
- [General Suggestions](#general-suggestions)

---

## UI/UX Inconsistencies

*(Issues related to visual design, user experience, and consistency)*

### Issue 1.1: Font Usage

- **Description:** The application uses a mix of the default sans-serif font (`GeistSans`) and a monospace font (`GeistMono`, applied via `font-mono` utility class) to create a terminal aesthetic. While the monospace font is used extensively in main sections and navigation, its application might be inconsistent in smaller components or specific text elements within sections. For example, the Portfolio Detail page applies `font-mono` directly to paragraphs instead of relying on inherited styles or a `prose-mono` variant.
- **Files:** `src/app/portfolio/[slug]/page.tsx`, potentially others.
- **Fix:** Review all components and pages. Define a clear strategy for font application. Consider using Tailwind's `prose` plugin variants or global styles to apply the monospace font more consistently where the terminal aesthetic is desired. Ensure body text defaults appropriately where monospace is not intended.

### Issue 1.2: Card Component Variants

- **Description:** Several card-like components exist: the standard `Card` from `src/components/ui/card.tsx` (used in `BlogListPage`, aliased as `ShadCard` in `PortfolioPage`), MDX-specific `Card` (`src/components/ui/mdx/Card.tsx`), and potentially custom layouts in sections like `PortfolioHighlights`. While visually similar, their internal structure and styling might differ slightly.
- **Files:** `src/components/ui/card.tsx`, `src/components/ui/mdx/Card.tsx`, `src/app/portfolio/page.tsx`, `src/app/blog/page.tsx`, `src/components/sections/PortfolioHighlights.tsx`.
- **Fix:** Consolidate card components where possible or ensure consistent styling and structure (padding, borders, headers, footers) across different card implementations. Use the base `Card` component from `shadcn/ui` more consistently, potentially extending it for specific needs rather than creating separate components.

### Issue 1.3: Loading Indicators

- **Description:** Different loading states are used. `AnimatedSections.tsx` uses simple pulsing placeholders via dynamic imports. `SkillsSection.tsx` implements a custom loading overlay with a progress bar simulation. Skeletons (`BlogCardSkeleton`, `PortfolioCardSkeleton`) are used on list pages.
- **Files:** `src/components/sections/AnimatedSections.tsx`, `src/components/ui/loading-overlay.tsx`, `src/components/sections/SkillsSection.tsx`, `src/app/blog/page.tsx`, `src/app/portfolio/page.tsx`.
- **Fix:** Standardize loading indicators for a more consistent user experience. Choose one primary style (e.g., skeletons for content areas, a spinner/overlay for section transitions) and apply it uniformly. Remove the custom progress bar simulation in `SkillsSection` unless it represents actual loading progress.

---

## Performance & Optimization

*(Issues related to loading speed, rendering, bundle size, and resource usage)*

### Issue 2.1: Image Optimization & Missing Assets

- **Description:** `next/image` is used, but `sizes` attributes might not be optimal everywhere, potentially leading to larger-than-necessary images being downloaded. Priority loading (`priority`) should be checked for above-the-fold images (like the Hero image or profile picture). **Critically, most project images are missing and placeholders (`placehold.co`) are used instead.** The blog thumbnail for `mac-terminal-setup.mdx` is also missing.
- **Files:** `src/lib/data/portfolio.ts`, `src/content/blogs/mac-terminal-setup.mdx`, `public/` directory, components using `next/image`.
- **Missing:**
  - `public/portfolio/games/itch-io-collection.jpg` (or similar)
  - `public/portfolio/games/journey-under-the-sea.jpg` (or similar)
  - `public/portfolio/ml/hand-gesture-gui.jpg` (or similar)
  - `public/portfolio/ml/yoga-asana-trainer.jpg` (or similar)
  - `public/portfolio/publications/brain-tumor-publication.jpg` (or similar)
  - `public/portfolio/games/convai-integration.jpg` (or similar)
  - `public/blog/thumbnails/mac-terminal.png`
- **Fix:**
  1. **Add all missing images** to the `public` directory with appropriate paths.
  2. Replace all placeholder URLs in `src/lib/data/portfolio.ts` with the actual image paths.
  3. Review all `Image` components: Ensure `priority` is set for the LCP image. Define accurate `sizes` attributes for responsive images. Ensure `loading="lazy"` is used appropriately for images below the fold.

### Issue 2.2: Component Memoization

- **Description:** `React.memo` and `useMemo` are used extensively (e.g., `Header`, `ActionButton`, `ExperienceItem`, `SkillCard`, section components). While good practice, ensure dependencies are correct and that memoization isn't applied prematurely where performance impact is negligible, as it adds complexity.
- **Files:** Many components within `src/components/`.
- **Fix:** Review `memo` and `useMemo` usage. Use React DevTools Profiler to identify actual performance bottlenecks and confirm if memoization provides significant benefits in those specific cases. Ensure dependency arrays for `useMemo` and `useCallback` are accurate.

### Issue 2.3: CSS/Tailwind Performance

- **Description:** Extensive use of Tailwind CSS is efficient at build time, but large numbers of utility classes can slightly increase HTML size. CSS-in-JS in `Footer.tsx` adds runtime overhead, although minimal in this case.
- **Files:** All components using Tailwind, `src/components/Footer.tsx`.
- **Fix:** This is likely a minor issue. Consider using Tailwind's `@apply` directive for complex, repeated style combinations if maintainability becomes an issue, though this is often discouraged. For the `Footer.tsx` animation, consider if a pure CSS animation added to `globals.css` could achieve the same effect without the `style jsx` tag.

### Issue 2.4: Image Optimization

- **Description:** The `next/image` components used in the main portfolio grid lack the `sizes` attribute. This can lead to the browser downloading larger-than-necessary image files, impacting performance, especially on smaller viewports.
- **Files:** `src/app/portfolio/page.tsx` (line 37)
- **Fix:** Add an appropriate `sizes` attribute to the `Image` component based on the grid layout (e.g., `sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"` - adjust based on actual CSS).

### Issue 2.5: Image Priority Loading

- **Description:** The `next/image` components in `PortfolioHighlights.tsx` do not have the `priority` prop. While `loading="lazy"` is correctly used, if any of these highlighted images are likely to be within the initial viewport (Above The Fold), they should be prioritized for faster loading.
- **Files:** `src/components/sections/PortfolioHighlights.tsx` (line 81)
- **Fix:** Evaluate if the first few portfolio highlight images appear high on the page load. If so, add `priority` to the corresponding `Image` component(s).

### Issue 2.6: Blog Image Optimization

- **Description:** The `next/image` components used in the blog list grid lack the `sizes` attribute, potentially leading to inefficient image loading.
- **Files:** `src/app/blog/page.tsx` (line 48)
- **Fix:** Add an appropriate `sizes` attribute to the `Image` component based on the blog grid layout (similar to the portfolio grid fix).

---

## Logical Errors & Code Quality

*(Bugs, type safety issues, complex code, deviations from best practices, error handling)*

### Issue 3.1: Duplicate Portfolio Data

- **Description:** Portfolio data exists in both `src/lib/data/portfolio.ts` and `src/lib/data/portfolio.json`. The structure and content differ (e.g., `tags` vs `techStack`, image paths, descriptions). `portfolio.ts` seems to be the one currently imported and used. The unused `portfolio.json` also references potentially non-existent image paths (e.g., `/portfolio/games/itch-collection.jpg`).
- **Files:** `src/lib/data/portfolio.ts`, `src/lib/data/portfolio.json`.
- **Fix:** Determine the single source of truth (likely `portfolio.ts`). Consolidate all necessary data into that file and **delete the unused `portfolio.json`**. Ensure the data structure is consistent and contains all required fields. Consider migrating this data to MDX files similar to the blog posts for better content management.

### Issue 3.2: Incomplete Sound Feature

- **Description:** `src/lib/utils/sound.ts` defines a `SoundManager`, but sound file URLs are empty, and the `play` method is disabled. Calls to `soundManager.play()` in components like `Header` currently have no effect.
- **Files:** `src/lib/utils/sound.ts`, `src/components/Header.tsx`.
- **Fix:** Either complete the feature by adding sound files and enabling the manager, or remove the `SoundManager` and all calls to it (`soundManager.play()`) to eliminate dead code.

### Issue 3.3: Analytics Placeholder

- **Description:** `src/components/analytics.tsx` contains placeholder IDs (`YOUR-GA-ID`). Analytics are not functional as is.
- **Files:** `src/components/analytics.tsx`.
- **Fix:** Replace `YOUR-GA-ID` with the actual Google Analytics tracking ID or remove the `Analytics` component entirely if analytics are not required.

### Issue 3.4: Hardcoded Content Data

- **Description:** Data for About, Experience, Skills, Contact, and Portfolio sections is hardcoded in TypeScript files within `src/lib/data/`. This makes content updates require code changes and redeployment.
- **Files:** `src/lib/data/about.ts`, `src/lib/data/experience.ts`, `src/lib/data/skills.ts`, `src/lib/data/contact.ts`, `src/lib/data/portfolio.ts`.
- **Fix:** Migrate this content to a more manageable format. MDX files (like the blog posts) are a good option within the current stack, allowing rich text formatting and component usage. Alternatively, use a headless CMS.

### Issue 3.5: MDX Component Handling

- **Description:** MDX components (`Card`, `Note`, `Steps`) are defined and then mapped using `useMDXComponents` in `src/lib/mdx-components.tsx`. However, the blog post page (`src/app/blog/[slug]/page.tsx`) also imports these components directly and passes them in the `components` prop to `MDXRemote`. The `useMDXComponents` hook seems unused.
- **Files:** `src/lib/mdx-components.tsx`, `src/app/blog/[slug]/page.tsx`, `src/content/blogs/mac-terminal-setup.mdx`.
- **Fix:** Simplify MDX component handling. Either:
  - Remove the `useMDXComponents` hook and rely solely on passing the `components` prop directly to `MDXRemote` as is currently done in `BlogPostPage`.
  - Or, modify `MDXRemote` usage to leverage the `useMDXComponents` hook if there's a reason for it (e.g., global MDX configuration). Based on the current setup, removing the hook seems cleaner.

### Issue 3.6: Type Safety (`any`)

- **Description:** The `SkillCard` component in `src/components/sections/SkillsSection.tsx` accepts props typed as `any`. The `SkillCategory` component also uses `any` for its `category` prop.
- **Files:** `src/components/sections/SkillsSection.tsx` (lines 11, 36).
- **Fix:** Define proper interfaces or types for the `skill` and `category` props based on the interfaces in `src/lib/data/skills.ts` (`Skill`, `SkillCategory`) and use them instead of `any`.

### Issue 3.7: Accessibility Concerns

- **Description:**
  - **Keyboard Shortcuts:** The numerical shortcuts (1-7) in the `Header` might conflict with browser/assistive technology functions.
  - **Focus Management:** Ensure focus is managed correctly, especially with dynamic content loading or overlays.
  - **Color Contrast:** Double-check color contrast ratios, particularly for text on background images or gradients (e.g., in Hero section).
  - **Missing CV:** The "download_cv.pdf" link in the About section points to a non-existent file.
- **Files:** `src/components/Header.tsx`, `src/components/sections/AboutSection.tsx`, `public/` directory, potentially others.
- **Fix:**
  - **Shortcuts:** Consider alternative, less conflicting shortcuts (e.g., using modifier keys like Ctrl/Cmd + Number) or making them optional/discoverable. Clearly document them.
  - **Focus:** Test keyboard navigation thoroughly. Ensure focus returns logically after closing modals or interacting with dynamic elements.
  - **Contrast:** Use browser developer tools or online contrast checkers to verify sufficient contrast ratios meet WCAG AA standards. Adjust colors in `globals.css` or component styles as needed.
  - **CV:** Add the `cv.pdf` file to the `public` directory or remove the download button from `AboutSection.tsx`.

### Issue 3.8: Console Logging

- **Description:** The custom console (`useConsole`) logs numerous messages (state changes, navigation, cheat codes). While useful for development/debugging or the terminal aesthetic, ensure excessive logging isn't happening in the production build, which could have a minor performance impact or clutter the browser console.
- **Files:** `src/components/ui/console-provider.tsx`, `src/components/Header.tsx`, `src/components/easter-eggs/KonamiCode.tsx`, etc.
- **Fix:** Review all `log`, `warn`, `error`, `success` calls. Conditionally disable non-essential logs in production builds (e.g., using `process.env.NODE_ENV === 'development'`). Keep logs essential to the terminal aesthetic if desired.

### Issue 3.9: Unused Dependency (`typed.js`)

- **Description:** The `typed.js` library is listed as a dependency in `package.json`, but it does not appear to be imported or used anywhere in the `src` directory.
- **Files:** `package.json`.
- **Fix:** Verify that `typed.js` is indeed unused. If confirmed, remove it from dependencies using `npm uninstall typed.js` (or `yarn remove` / `pnpm remove`) and update `package.json` / `package-lock.json`.

### Issue 3.10: Unused Data File (`src/lib/data/blog.ts`)

- **Description:** The file `src/lib/data/blog.ts` defines static data and types for blog posts (e.g., `blogPostsData`, `highlightedBlogPosts`). However, the application fetches blog data dynamically from MDX files using functions in `src/lib/blog.ts`. This data file appears to be completely unused.
- **Files:** `src/lib/data/blog.ts`.
- **Fix:** Confirm that no component imports or uses data from `src/lib/data/blog.ts`. If confirmed, delete the file `src/lib/data/blog.ts`.

### Issue 3.11: Unused Utility Function (`throttle`)

- **Description:** The `throttle` function defined in `src/lib/utils.ts` is not imported or used anywhere in the codebase.
- **Files:** `src/lib/utils.ts`.
- **Fix:** Remove the unused `throttle` function from `src/lib/utils.ts`.

### Issue 3.12: Artificial Loading State (`SkillsSection`)

- **Description:** The `SkillsSection` component uses `localStorage` and `setTimeout` to simulate a loading process on the first visit, displaying a loading overlay. This is unnecessary as the skill data is static and loaded instantly. It creates an artificial delay and adds complexity.
- **Files:** `src/components/sections/SkillsSection.tsx`, `src/components/ui/loading-overlay.tsx`.
- **Fix:** Remove the loading simulation logic (state variables `isLoading`, `hasVisited`, `progress`, the `useEffect` hooks managing them, the `LoadingOverlay` component usage, and the related `localStorage` interactions). Consider using `AnimateOnScroll` (as used in `AnimatedSections.tsx`) to simply fade in the skills content when it becomes visible for a smoother effect without the fake delay.

### Issue 3.13: Hardcoded Portfolio Highlight Items

- **Description:** The `highlightedPortfolioItems` array is created by selecting items from `portfolioItems` using hardcoded indices (e.g., `portfolioItems[0]`). This is brittle; if the order of `portfolioItems` changes, the wrong items will be highlighted.
- **Files:** `src/lib/data/portfolio.ts` (lines 93-97)
- **Fix:** Introduce a specific property in the `PortfolioItem` interface (e.g., `isHighlighted: boolean`) and filter `portfolioItems` based on this property to create `highlightedPortfolioItems`. Alternatively, use slugs or unique IDs for selection instead of indices.

### Issue 3.14: Commented-Out Style Changes

- **Description:** The code contains commented-out style changes (e.g., `// Changed font`). These comments add noise and should be removed once the changes are confirmed.
- **Files:** `src/app/portfolio/page.tsx` (lines 48, 54, 60, 63, 69)
- **Fix:** Remove these informational comments.

### Issue 3.15: Unnecessary Alias (`ShadCard`)

- **Description:** The `Card` component from `@/components/ui/card` is imported with an alias `ShadCard`. It's unclear if this alias is necessary (e.g., to avoid naming conflicts) or a leftover from refactoring.
- **Files:** `src/app/portfolio/page.tsx` (lines 7, 24, 99)
- **Fix:** If there's no naming conflict, remove the alias and use `Card` directly for clarity.

### Issue 3.16: Header Complexity

- **Description:** The `Header.tsx` component has grown large (280+ lines) and manages multiple concerns (navigation state, active section tracking, keyboard shortcuts, console integration, UI rendering). This reduces maintainability and separation of concerns.
- **Files:** `src/components/Header.tsx`
- **Fix:** Consider refactoring `Header.tsx`. Extract distinct functionalities into separate custom hooks (e.g., `useActiveSectionObserver`, `useKeyboardNavShortcuts`) or smaller sub-components. For instance, the profile section and social links could be a separate `ProfileCard` component. The navigation logic could be further encapsulated.

### Issue 3.17: DOM Manipulation

- **Description:** The `Header` component interacts directly with the DOM using `document.getElementById` and `document.querySelector` to manage active section states. This creates tight coupling between the header and the page structure defined outside of it.
- **Files:** `src/components/Header.tsx` (lines 57, 121, 129)
- **Fix:** Explore alternative, more React-idiomatic ways to manage active state. Context API or a state management library could hold the active section ID, updated by the `IntersectionObserver`. Components could then reactively style themselves based on the context value rather than direct DOM manipulation from the Header.

### Issue 3.18: Import Paths

- **Description:** Components within `src/app/blog/page.tsx` use relative paths (`../../components/...`) for importing shared components instead of the configured path alias (`@/components/...`).
- **Files:** `src/app/blog/page.tsx` (lines 6, 13)
- **Fix:** Update the imports to use the `@/` path alias for consistency and easier refactoring (e.g., `import { BlogCardSkeleton } from '@/components/BlogCardSkeleton';`).

### Issue 3.19: Client Components

- **Description:** Many section components (`HeroSection`, `ExperienceSection`, `SkillsSection`, `PortfolioHighlights`, `BlogHighlights`) are marked with `'use client'`. While some require client-side interactivity (`useState`, `useEffect`), others might be candidates for Server Components if they only display data fetched/defined server-side or during the build.
- **Files:** `src/components/sections/*.tsx`
- **Fix:** Review each `'use client'` directive. If a component and its children do not strictly need client-side hooks or browser APIs, consider converting it back to a Server Component to potentially improve initial load performance and reduce the client-side JavaScript bundle size. For components needing only *some* client interactivity, consider moving the interactive parts to smaller client components while keeping the main structure as a Server Component.

---

## Unused/Dead Code

*(Unused dependencies, components, functions, variables, or files)*

- **Description:** Dependency `shiki` is installed but not directly imported in the source code. This is *likely correct* as it's used by the `rehype-pretty-code` plugin configured in `next.config.mjs`.\
  - **File(s):** `package.json`, `next.config.mjs`\
  - **Fix:** No action needed unless direct usage of `shiki` was intended elsewhere and is missing. This is more of an observation confirming dependencies seem accounted for.

---

## Missing Elements

*(Missing assets, placeholder content, incomplete features)*

- **Description:** Several portfolio items rely on placeholder images from `placehold.co` instead of actual project visuals.
  - **File(s):** `src/lib/data/portfolio.ts` (lines 31, 45, 54, 63, 72, 81, 89 - check image URLs)
  - **Fix:** Replace all `placehold.co` URLs with actual, optimized images for the corresponding portfolio projects. Store these images in the `public` directory (e.g., `public/portfolio/category/image.jpg`).

- **Description:** GitHub star and fork counts on the portfolio highlight cards are hardcoded.
  - **File(s):** `src/components/sections/PortfolioHighlights.tsx` (lines 46-53)
  - **Fix:** Ideally, fetch this data dynamically from the GitHub API at build time or runtime (with caching). Alternatively, remove the counts if they won't be kept up-to-date. If keeping static counts, update them to reflect the current reality or add a note indicating they are illustrative.

---

## Configuration Issues

*(Misconfigurations in `package.json`, framework configs, `tsconfig.json`, etc.)*

---

## Accessibility (a11y)

*(Issues related to keyboard navigation, focus, semantics, color contrast, ARIA)*

- **Description:** Generally good use of ARIA attributes (`aria-label`, `aria-expanded`, `aria-current`) and semantic elements (`<nav>`, `<main>`). `SkipLink` component is present.\
  - **File(s):** `src/components/Header.tsx`, `src/app/portfolio/page.tsx`, `src/app/layout.tsx`
  - **Fix:** (Minor Suggestion) Consider adding a more descriptive `aria-label` to the \"Details\" link button in the portfolio cards (`src/app/portfolio/page.tsx`, line 72) to include the project title, e.g., `aria-label={\`View details for \${item.title}\`}`. The current implementation is acceptable, but this adds slightly more context for screen reader users.

---

## General Suggestions

*(General recommendations for improvement)*
</file>

<file path="interactive-console-plan.md">
# Interactive Console Enhancement Plan

This document outlines the plan to enhance the portfolio website's console with command input functionality, navigation commands, information commands, and fun easter eggs to make the portfolio more engaging.

## Overview

```mermaid
graph TD
    A[Enhanced Console System] --> B[Command Input Interface]
    A --> C[Command Registry]
    A --> D[Command Handlers]
    A --> E[Console Output Display]
    
    B --> F[Input Field Component]
    B --> G[Command History]
    
    C --> H[Navigation Commands]
    C --> I[Information Commands]
    C --> J[Easter Egg Commands]
    C --> K[Tutorial Commands]
    
    D --> L[Command Parser]
    D --> M[Command Executor]
    
    E --> N[Styled Output]
    E --> O[ASCII Art]
    E --> P[Interactive Elements]
```

## Detailed Implementation Plan

### 1. Enhance Console Component Structure

```mermaid
graph TD
    A[Console Component] --> B[Console Output]
    A --> C[Console Input]
    C --> D[Input Field]
    C --> E[Submit Button]
    B --> F[Log Messages]
    B --> G[Command Responses]
```

- Modify the existing Console component to include an input section
- Keep the current log display functionality
- Add a new input field and submit button at the bottom
- Style the input area to match the terminal aesthetic

### 2. Create Command Registry System

```mermaid
graph TD
    A[Command Registry] --> B[Command Definition]
    B --> C[Name]
    B --> D[Description]
    B --> E[Handler Function]
    B --> F[Aliases]
    A --> G[Command Categories]
    G --> H[Navigation]
    G --> I[Information]
    G --> J[Utility]
    G --> K[Easter Eggs]
```

- Create a registry to store all available commands
- Organize commands into categories for easier management
- Define a standard interface for command handlers
- Include help text and examples for each command

### 3. Implement Core Command Handlers

#### Navigation Commands

- `cd home` - Navigate to the home section
- `cd about` - Navigate to the about section
- `cd skills` - Navigate to the skills section
- `cd portfolio` - Navigate to the portfolio section
- `cd contact` - Navigate to the contact section

#### Information Commands

- `help` - Display available commands
- `ls` - List sections or content
- `cat about.md` - Display about information
- `cat skills.json` - Display skills information
- `cat experience.json` - Display experience information
- `cat contact.json` - Display contact information
- `whoami` - Display a brief introduction

#### Utility Commands

- `clear` - Clear the console
- `history` - Show command history
- `echo [text]` - Display text in the console
- `open [url]` - Open a link in a new tab

### 4. Add Easter Eggs and Interactive Elements

#### Easter Egg Commands

- `sudo make me a sandwich` - Respond with "Nice try!"
- `konami` - Trigger a special animation
- `matrix` - Display a matrix-like animation
- `coffee` - ASCII art coffee cup
- `rickroll` - You know what this does...

#### Interactive Tutorial

- `tutorial` - Start an interactive tour of your portfolio
- `tutorial [section]` - Start a tutorial for a specific section
- Guide users through your portfolio with step-by-step instructions

### 5. Enhance Console Provider

```mermaid
graph TD
    A[Enhanced ConsoleProvider] --> B[Log Management]
    A --> C[Command Processing]
    A --> D[Command History]
    A --> E[State Management]
    
    B --> F[Add Log]
    B --> G[Clear Logs]
    
    C --> H[Parse Command]
    C --> I[Execute Command]
    C --> J[Format Response]
    
    D --> K[Store Commands]
    D --> L[Navigate History]
    
    E --> M[Active Tutorial]
    E --> N[Console Mode]
```

- Extend the current ConsoleProvider to handle command processing
- Add command history functionality
- Implement state management for interactive features
- Create methods for command execution and response formatting

### 6. Technical Implementation Details

#### Console Input Component

```tsx
// New component for command input
const ConsoleInput = () => {
  const [input, setInput] = useState('');
  const { executeCommand } = useConsole();
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (input.trim()) {
      executeCommand(input);
      setInput('');
    }
  };
  
  return (
    <form onSubmit={handleSubmit} className="flex border-t border-border">
      <span className="text-primary px-2 py-1">$</span>
      <input
        type="text"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        className="flex-1 bg-transparent border-none outline-none text-foreground px-1 py-1"
        placeholder="Type a command..."
      />
      <button type="submit" className="sr-only">Execute</button>
    </form>
  );
};
```

#### Command Registry

```tsx
// Command registry structure
interface Command {
  name: string;
  description: string;
  usage: string;
  aliases?: string[];
  execute: (args: string[], console: ConsoleContextType) => void;
}

// Example command implementation
const helpCommand: Command = {
  name: 'help',
  description: 'Display available commands',
  usage: 'help [command]',
  aliases: ['?'],
  execute: (args, console) => {
    if (args.length > 0) {
      // Show help for specific command
      const commandName = args[0];
      const command = findCommand(commandName);
      if (command) {
        console.log(`Command: ${command.name}`);
        console.log(`Description: ${command.description}`);
        console.log(`Usage: ${command.usage}`);
      } else {
        console.error(`Unknown command: ${commandName}`);
      }
    } else {
      // Show all commands
      console.log('Available commands:');
      commandRegistry.forEach(cmd => {
        console.log(`${cmd.name} - ${cmd.description}`);
      });
    }
  }
};
```

#### Enhanced ConsoleProvider

```tsx
// Extended ConsoleProvider with command functionality
export function ConsoleProvider({ children }: ConsoleProviderProps) {
  const [logs, setLogs] = useState<LogMessage[]>([]);
  const [commandHistory, setCommandHistory] = useState<string[]>([]);
  const [historyIndex, setHistoryIndex] = useState(-1);
  
  // Existing log methods...
  
  const executeCommand = useCallback((commandStr: string) => {
    // Add command to history
    setCommandHistory(prev => [...prev, commandStr]);
    setHistoryIndex(-1);
    
    // Log the command
    log(`$ ${commandStr}`);
    
    // Parse command and arguments
    const [command, ...args] = commandStr.trim().split(/\s+/);
    
    // Find and execute command
    const cmd = findCommand(command);
    if (cmd) {
      try {
        cmd.execute(args, { log, warn, error, success });
      } catch (err) {
        error(`Error executing command: ${err.message}`);
      }
    } else {
      error(`Command not found: ${command}`);
    }
  }, [log, warn, error, success]);
  
  // Command history navigation
  const getPreviousCommand = useCallback(() => {
    if (historyIndex < commandHistory.length - 1) {
      const newIndex = historyIndex + 1;
      setHistoryIndex(newIndex);
      return commandHistory[commandHistory.length - 1 - newIndex];
    }
    return null;
  }, [commandHistory, historyIndex]);
  
  const getNextCommand = useCallback(() => {
    if (historyIndex > 0) {
      const newIndex = historyIndex - 1;
      setHistoryIndex(newIndex);
      return commandHistory[commandHistory.length - 1 - newIndex];
    } else if (historyIndex === 0) {
      setHistoryIndex(-1);
      return '';
    }
    return null;
  }, [commandHistory, historyIndex]);
  
  // Provide extended context
  return (
    <ConsoleContext.Provider value={{ 
      logs, 
      log, 
      warn, 
      error, 
      success, 
      executeCommand, 
      getPreviousCommand, 
      getNextCommand,
      commandHistory
    }}>
      {children}
    </ConsoleContext.Provider>
  );
}
```

## Implementation Phases

### Phase 1: Core Command Input

1. Update Console component with input field
2. Extend ConsoleProvider with command execution
3. Implement basic command registry
4. Add core commands (help, clear, echo)

### Phase 2: Navigation and Information Commands

1. Implement navigation commands (cd)
2. Add information display commands (cat, ls, whoami)
3. Create formatted output for information commands
4. Link commands to existing portfolio data

### Phase 3: Easter Eggs and Interactive Elements

1. Add fun easter egg commands
2. Implement ASCII art responses
3. Create interactive tutorial system
4. Add special effects for certain commands
</file>

<file path="portfolio-code-review-action-plan.md">
# Portfolio Website Code Review Action Plan

## Overview

This document outlines a prioritized action plan for addressing the issues identified in the code review of the Next.js portfolio website. The plan categorizes issues by severity, identifies dependencies between issues, and recommends a phased implementation sequence.

## Issue Prioritization

Issues have been categorized by severity regardless of their category:

### Critical Issues
1. **Missing Image Assets** (Issue 2.1) - Most project images are missing and placeholders are used instead. This directly impacts user experience and site appearance.
2. **Duplicate Portfolio Data** (Issue 3.1) - Inconsistent data sources (`portfolio.ts` and `portfolio.json`) could lead to confusion and maintenance issues.
3. **Missing CV File** (Issue 3.7) - The "download_cv.pdf" link points to a non-existent file, resulting in a broken download link.

### High Priority Issues
1. **Image Optimization Issues** (Issues 2.4, 2.5, 2.6) - Missing `sizes` attributes and `priority` props on images affect performance and loading experience.
2. **Artificial Loading State** (Issue 3.12) - Unnecessary loading simulation in SkillsSection creates artificial delays.
3. **Hardcoded Portfolio Highlight Items** (Issue 3.13) - Using indices for selection is brittle and could break if order changes.
4. **Header Complexity** (Issue 3.16) - Large component with multiple concerns reduces maintainability.
5. **DOM Manipulation** (Issue 3.17) - Direct DOM manipulation creates tight coupling between components.
6. **Accessibility Concerns** (Issue 3.7) - Keyboard shortcuts, focus management, and color contrast issues affect usability.

### Medium Priority Issues
1. **Font Usage Inconsistency** (Issue 1.1) - Inconsistent application of fonts affects visual coherence.
2. **Card Component Variants** (Issue 1.2) - Multiple similar card components with slight differences.
3. **Loading Indicators Inconsistency** (Issue 1.3) - Different loading states used across the application.
4. **Component Memoization** (Issue 2.2) - Potentially unnecessary memoization adding complexity.
5. **Incomplete Sound Feature** (Issue 3.2) - Sound manager with empty URLs and disabled play method.
6. **Analytics Placeholder** (Issue 3.3) - Non-functional analytics with placeholder IDs.
7. **Hardcoded Content Data** (Issue 3.4) - Content hardcoded in TypeScript files making updates difficult.
8. **MDX Component Handling** (Issue 3.5) - Redundant MDX component configuration.
9. **Type Safety Issues** (Issue 3.6) - Use of `any` type in components.
10. **Client Components** (Issue 3.19) - Unnecessary client components that could be server components.

### Low Priority Issues
1. **CSS/Tailwind Performance** (Issue 2.3) - Minor issue with CSS-in-JS in Footer.
2. **Console Logging** (Issue 3.8) - Excessive logging in production builds.
3. **Unused Dependency** (Issue 3.9) - `typed.js` listed as dependency but not used.
4. **Unused Data File** (Issue 3.10) - Unused `src/lib/data/blog.ts` file.
5. **Unused Utility Function** (Issue 3.11) - Unused `throttle` function in utils.ts.
6. **Commented-Out Style Changes** (Issue 3.14) - Comments adding noise to the code.
7. **Unnecessary Alias** (Issue 3.15) - Unnecessary `ShadCard` alias for `Card` component.
8. **Import Paths** (Issue 3.18) - Inconsistent import paths using relative paths instead of aliases.

## Dependencies Between Issues

Key dependencies between issues:

```mermaid
graph TD
    A[Missing Image Assets] --> B[Image Optimization]
    C[Duplicate Portfolio Data] --> D[Hardcoded Portfolio Highlight Items]
    E[Hardcoded Content Data] --> F[MDX Component Handling]
    G[Header Complexity] --> H[DOM Manipulation]
    I[Card Component Variants] --> J[Font Usage Inconsistency]
    K[Loading Indicators Inconsistency] --> L[Artificial Loading State]
```

## Action Plan Sequence

Based on the prioritization and dependencies, here's the recommended sequence for implementing fixes:

### Phase 1: Critical Fixes

1. **Resolve Duplicate Portfolio Data** (Issue 3.1)
   - Determine the single source of truth (likely `portfolio.ts`)
   - Consolidate all necessary data into that file
   - Delete the unused `portfolio.json`
   - Ensure consistent data structure

2. **Add Missing Image Assets** (Issue 2.1)
   - Add available assets to the appropriate directories
   - Source or create missing assets
   - Update image paths in portfolio data
   - Ensure all images are properly optimized

3. **Add Missing CV File** (Issue 3.7)
   - Add the CV file to the public directory
   - Or remove the download button if CV is not available

### Phase 2: High Priority Improvements

1. **Fix Image Optimization Issues** (Issues 2.4, 2.5, 2.6)
   - Add appropriate `sizes` attributes to all `Image` components
   - Set `priority` prop for above-the-fold images
   - Ensure proper lazy loading for below-the-fold images

2. **Refactor Header Component** (Issues 3.16, 3.17)
   - Extract functionalities into separate custom hooks
   - Replace direct DOM manipulation with React state
   - Create smaller sub-components for better organization

3. **Fix Hardcoded Portfolio Highlight Items** (Issue 3.13)
   - Add `isHighlighted` property to `PortfolioItem` interface
   - Update selection logic to use this property instead of indices

4. **Remove Artificial Loading State** (Issue 3.12)
   - Remove loading simulation logic from SkillsSection
   - Replace with AnimateOnScroll for a smoother effect

5. **Address Accessibility Concerns** (Issue 3.7)
   - Review keyboard shortcuts for potential conflicts
   - Improve focus management
   - Verify color contrast ratios
   - Test keyboard navigation

### Phase 3: Medium Priority Improvements

1. **Standardize Font Usage** (Issue 1.1)
   - Define clear strategy for font application
   - Apply consistent font styles across components

2. **Consolidate Card Components** (Issue 1.2)
   - Review all card implementations
   - Standardize on base Card component
   - Extend for specific needs rather than creating separate components

3. **Standardize Loading Indicators** (Issue 1.3)
   - Choose one primary loading style
   - Apply it uniformly across the application

4. **Improve Type Safety** (Issue 3.6)
   - Replace `any` types with proper interfaces
   - Define proper types for all components

5. **Decide on Sound Feature** (Issue 3.2)
   - Either complete the feature by adding sound files
   - Or remove the SoundManager and all calls to it

6. **Fix Analytics** (Issue 3.3)
   - Replace placeholder IDs with actual tracking IDs
   - Or remove the Analytics component if not needed

7. **Optimize MDX Component Handling** (Issue 3.5)
   - Simplify MDX component configuration
   - Remove redundant hooks or imports

8. **Review Component Memoization** (Issue 2.2)
   - Identify actual performance bottlenecks
   - Remove unnecessary memoization

9. **Convert Client Components to Server Components** (Issue 3.19)
   - Review each component with 'use client'
   - Convert to Server Components where possible

10. **Consider Content Management Approach** (Issue 3.4)
    - Evaluate migrating hardcoded content to MDX files
    - Or implement a headless CMS solution

### Phase 4: Low Priority Cleanup

1. **Remove Unused Code**
   - Remove unused dependency (`typed.js`) (Issue 3.9)
   - Delete unused data file (`src/lib/data/blog.ts`) (Issue 3.10)
   - Remove unused utility function (`throttle`) (Issue 3.11)

2. **Code Cleanup**
   - Remove commented-out style changes (Issue 3.14)
   - Remove unnecessary alias (`ShadCard`) (Issue 3.15)
   - Standardize import paths (Issue 3.18)
   - Optimize CSS/Tailwind usage (Issue 2.3)
   - Conditionally disable non-essential console logs (Issue 3.8)

## Implementation Strategy

For each phase:

1. **Assessment**: Thoroughly review the issues and their interdependencies
2. **Planning**: Create detailed tasks for each issue
3. **Implementation**: Make the necessary code changes
4. **Testing**: Verify that the changes resolve the issues without introducing new ones
5. **Review**: Conduct a code review to ensure quality and consistency

This phased approach ensures that the most critical issues are addressed first, while also considering the dependencies between issues to minimize rework.
</file>

<file path="src/app/not-found.tsx">
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Home, Search } from 'lucide-react';
import { Metadata } from 'next';

export const metadata: Metadata = {
  title: '404 - Page Not Found | Rishav Nath Pati',
  description: "Oops! The page you're looking for doesn't seem to exist.",
};

export default function NotFound() {
  return (
    <div className="flex flex-col items-center justify-center min-h-[calc(100vh-200px)] text-center px-4 lg:ml-[300px]">
      <div className="max-w-md">
        <h1 className="text-6xl md:text-9xl font-bold text-primary mb-4 font-raleway">
          404
        </h1>
        <h2 className="text-2xl md:text-3xl font-semibold mb-4 text-foreground font-poppins">
          Page Not Found
        </h2>
        <p className="text-lg text-muted-foreground mb-8">
          Sorry, we couldn't find the page you were looking for. It might have been moved, deleted, or maybe it never existed.
        </p>
        <div className="flex flex-col sm:flex-row justify-center gap-4">
          <Button asChild size="lg">
            <Link href="/">
              <Home className="mr-2 h-5 w-5" /> Go Back Home
            </Link>
          </Button>
          <Button variant="outline" size="lg" asChild>
            <Link href="/portfolio">
              <Search className="mr-2 h-5 w-5" /> Explore Portfolio
            </Link>
          </Button>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/ui/mdx/Card.tsx">
'use client';

import {
  Card as BaseCard,
  CardHeader,
  CardTitle,
  CardContent
} from "@/components/ui/card";

interface MDXCardProps {
  title?: string;
  icon?: React.ReactNode;
  children: React.ReactNode;
}

export function Card({ title, icon, children }: MDXCardProps) {
  return (
    <BaseCard className="my-6">
      {(title || icon) && (
        <CardHeader className="flex flex-row items-center gap-2 pb-2">
          {icon && <div>{icon}</div>}
          {title && <CardTitle>{title}</CardTitle>}
        </CardHeader>
      )}
      <CardContent>{children}</CardContent>
    </BaseCard>
  );
}
</file>

<file path="src/components/ui/mdx/Note.tsx">
'use client';

import { cn } from "@/lib/utils";
import { AlertCircle, Info, CheckCircle2 } from "lucide-react";

interface NoteProps {
  type?: 'info' | 'warning' | 'success';
  children: React.ReactNode;
}

const icons = {
  info: Info,
  warning: AlertCircle,
  success: CheckCircle2,
};

const styles = {
  info: 'border-blue-200 bg-blue-50 dark:border-blue-900/50 dark:bg-blue-900/20 text-blue-900 dark:text-blue-200',
  warning: 'border-yellow-200 bg-yellow-50 dark:border-yellow-900/50 dark:bg-yellow-900/20 text-yellow-900 dark:text-yellow-200',
  success: 'border-green-200 bg-green-50 dark:border-green-900/50 dark:bg-green-900/20 text-green-900 dark:text-green-200',
};

export function Note({ type = 'info', children }: NoteProps) {
  const Icon = icons[type];

  return (
    <div className={cn(
      'my-6 flex gap-2 rounded-lg border p-4',
      styles[type]
    )}>
      <Icon className="h-5 w-5 mt-1 flex-shrink-0" />
      <div>{children}</div>
    </div>
  );
}
</file>

<file path="src/components/ui/mdx/Steps.tsx">
'use client';

interface StepsProps {
  children: React.ReactNode;
}

export function Steps({ children }: StepsProps) {
  return (
    <div className="steps ml-4 border-l border-border pl-8 [counter-reset:step] my-8">
      {children}
    </div>
  );
}

export function Step({ children }: { children: React.ReactNode }) {
  return (
    <div className="step mb-8 relative">
      <div className="absolute -left-[50px] flex h-8 w-8 items-center justify-center rounded-full bg-muted text-muted-foreground font-mono text-sm font-medium before:content-[counter(step)] before:[counter-increment:step]" />
      {children}
    </div>
  );
}
</file>

<file path="src/components/ui/AnimateOnScroll.tsx">
'use client';

import { motion, Variants } from 'framer-motion';
import React from 'react';

interface AnimateOnScrollProps {
  children: React.ReactNode;
  className?: string;
  variants?: Variants;
  delay?: number;
  once?: boolean; // Trigger animation only once
  amount?: number | 'some' | 'all'; // Amount of element visible before triggering
}

const defaultVariants: Variants = {
  hidden: { opacity: 0, y: 20 },
  visible: { opacity: 1, y: 0 },
};

const AnimateOnScroll: React.FC<AnimateOnScrollProps> = ({
  children,
  className,
  variants = defaultVariants,
  delay = 0,
  once = true,
  amount = 0.2, // Trigger when 20% of the element is visible
}) => {
  return (
    <motion.div
      className={className}
      initial="hidden"
      whileInView="visible"
      viewport={{ once, amount }}
      transition={{ duration: 0.5, delay }}
      variants={variants}
    >
      {children}
    </motion.div>
  );
};

export default AnimateOnScroll;
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
</file>

<file path="src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="src/components/ui/toast.tsx">
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="src/components/ui/toaster.tsx">
"use client"

import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"
import { useToast } from "@/components/ui/use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="src/components/ui/use-toast.ts">
// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_VALUE
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="src/components/PortfolioCardSkeleton.tsx">
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";

export function PortfolioCardSkeleton() {
  return (
    <Card className="flex flex-col overflow-hidden bg-black/30 border border-border">
      <CardHeader className="p-0">
        <Skeleton className="aspect-video w-full" />
      </CardHeader>
      <CardContent className="flex-grow p-5">
        <Skeleton className="h-6 w-3/4 mb-2" />
        <Skeleton className="h-4 w-full mb-4" />
        <div className="flex flex-wrap gap-2">
          <Skeleton className="h-5 w-16" />
          <Skeleton className="h-5 w-20" />
          <Skeleton className="h-5 w-14" />
        </div>
      </CardContent>
      <CardFooter className="p-5 bg-muted/30 border-t border-border flex justify-between items-center">
        <Skeleton className="h-8 w-24" />
        <div className="flex items-center space-x-2">
          <Skeleton className="h-8 w-8 rounded-md" />
          <Skeleton className="h-8 w-8 rounded-md" />
        </div>
      </CardFooter>
    </Card>
  );
}
</file>

<file path="src/components/SkipLink.tsx">
export function SkipLink() {
  return (
    <a
      href="#main"
      className="sr-only focus:not-sr-only focus:fixed focus:top-4 focus:left-4 focus:z-[10000] focus:p-4 focus:bg-background focus:text-foreground focus:outline-none focus:ring-2 focus:ring-primary"
    >
      Skip to main content
    </a>
  );
}
</file>

<file path="src/components/tailwind-indicator.tsx">
export function TailwindIndicator() {
  if (process.env.NODE_ENV === "production") return null;

  return (
    <div className="fixed bottom-1 left-1 z-50 flex h-6 w-6 items-center justify-center rounded-full bg-gray-800 p-3 font-mono text-xs text-white">
      <div className="block sm:hidden">xs</div>
      <div className="hidden sm:block md:hidden">sm</div>
      <div className="hidden md:block lg:hidden">md</div>
      <div className="hidden lg:block xl:hidden">lg</div>
      <div className="hidden xl:block 2xl:hidden">xl</div>
      <div className="hidden 2xl:block">2xl</div>
    </div>
  );
}
</file>

<file path="src/components/theme-provider.tsx">
"use client"

import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"
import { type ThemeProviderProps } from "next-themes/dist/types"

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
</file>

<file path="src/lib/config/metadata.ts">
import type { Metadata } from "next";

const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3001';

export const siteMetadata: Metadata = {
  metadataBase: new URL(siteUrl),
  title: "Rishav Nath Pati | Game & Interactive Media Developer",
  description: "Portfolio of Rishav Nath Pati, specializing in Unity 3D/2D/AR/VR, C#, and Machine Learning.",
  openGraph: {
    title: 'Rishav Nath Pati | Game & Interactive Media Developer',
    description: 'Portfolio of Rishav Nath Pati, specializing in Unity 3D/2D/AR/VR, C#, and Machine Learning.',
    url: '/',
    siteName: 'Rishav Nath Pati Portfolio',
    images: [
      {
        url: '/profile-img.jpg',
        width: 800,
        height: 800,
        alt: 'Rishav Nath Pati',
      },
    ],
    locale: 'en_US',
    type: 'website',
  },
  twitter: {
    card: 'summary_large_image',
    title: 'Rishav Nath Pati | Game & Interactive Media Developer',
    description: 'Portfolio of Rishav Nath Pati, specializing in Unity 3D/2D/AR/VR, C#, and Machine Learning.',
    images: ['/profile-img.jpg'],
  },
  robots: {
    index: true,
    follow: true,
    googleBot: {
      index: true,
      follow: true,
      'max-video-preview': -1,
      'max-image-preview': 'large',
      'max-snippet': -1,
    },
  },
  icons: {
    icon: '/favicon.ico',
  },
};
</file>

<file path="src/lib/data/about.ts">
export interface AboutData {
  paragraphs: string[];
  competencies: Competency[];
}

export interface Competency {
  text: string;
}

export const aboutData: AboutData = {
  paragraphs: [
    "I'm a passionate Game and Interactive Media Developer with a deep love for creating immersive digital experiences. My journey in game development started with a fascination for how interactive media can transform ideas into engaging experiences that captivate and inspire users.",
    "Throughout my career, I've focused on bridging the gap between creativity and technology, using my expertise in Unity and various programming languages to bring innovative ideas to life. I believe in the power of games and interactive media to not just entertain, but also educate and create meaningful connections.",
    "What drives me is the opportunity to push the boundaries of what's possible in interactive media. Whether it's developing intuitive AR/VR experiences, creating engaging mobile games, or integrating cutting-edge AI solutions, I'm always excited to explore new technologies and find creative ways to solve complex challenges.",
    "I'm currently exploring opportunities to collaborate on ambitious projects where I can contribute my expertise in game development and interactive media, while continuing to learn and grow in this ever-evolving field."
  ],
  competencies: [
    {
      text: "Innovative problem-solver with a proven track record of turning complex technical challenges into elegant, user-friendly solutions"
    },
    {
      text: "Strong advocate for clean code and optimization, consistently delivering high-performance applications that exceed expectations"
    },
    {
      text: "Experienced in rapid prototyping and agile development, adapting quickly to new technologies and project requirements"
    },
    {
      text: "Dedicated to creating immersive user experiences through a combination of technical expertise and creative design"
    },
    {
      text: "Committed to continuous learning and staying current with emerging technologies in game development and interactive media"
    }
  ]
};
</file>

<file path="src/lib/data/contact.ts">
import { Mail, Terminal, MessageSquare, Send, Laptop, Phone, MapPin } from 'lucide-react';

export interface ContactInfo {
  icon: typeof MessageSquare;
  text: string;
  isPrimary?: boolean;
}

export const contactInfo: ContactInfo[] = [
  {
    icon: MessageSquare,
    text: "Let's create something amazing together!",
    isPrimary: true
  },
  {
    icon: Laptop,
    text: "Open for: Game Dev, XR, AR/VR, AI Integration, Interactive Media"
  },
  {
    icon: Phone,
    text: "Phone: +91 9123877594"
  },
  {
    icon: MapPin,
    text: "Kalyani, West Bengal, India"
  },
  {
    icon: Send,
    text: "Response Time: < 24 hours"
  }
];
</file>

<file path="src/lib/data/experience.ts">
export interface ExperienceItem {
  title: string;
  company: string;
  location: string;
  period: string;
  description: string[];
  skills?: string[];
}

export interface EducationItem {
  degree: string;
  institution: string;
  location: string;
  period: string;
  description: string;
}

export const professionalSummary = `Senior Game Developer specializing in Unity3D and C#, with a proven track record of delivering over 10 published titles across mobile and PC platforms. Extensive experience in developing immersive AR/VR experiences, integrating AI solutions, and optimizing game performance. Demonstrated expertise in full-cycle game development, from concept to deployment, with a focus on creating engaging and technically sound interactive experiences.`;

export const professionalExperience: ExperienceItem[] = [
  {
    title: "Interactive Media Developer",
    company: "Convai",
    location: "San Jose, California",
    period: "July 2022 - Present",
    description: [
      "Lead development of conversational AI integration within Unity Engine, improving user engagement metrics by 40%",
      "Engineered and optimized deep learning model prompts, achieving 30% better response accuracy",
      "Implemented efficient gRPC networking solutions, reducing latency by 25% in multiplayer scenarios",
      "Developed and optimized game systems resulting in 35% improvement in frame rates",
      "Architected scalable systems handling 100K+ daily active users",
      "Created end-to-end speech solutions with 95% accuracy in virtual environments",
      "Mentored junior developers in best practices and design patterns"
    ],
    skills: ["Unity", "C#", "Conversational AI", "gRPC", "System Design", "Game Optimization", "AR/VR"]
  },
  {
    title: "Freelance Software Engineer, Game Developer",
    company: "Self-employed",
    location: "Vellore, Tamil Nadu",
    period: "November 2021 - April 2022",
    description: [
      "Developed and published 3 mobile games with 100K+ combined downloads",
      "Implemented advanced rendering techniques improving visual quality by 50%",
      "Created custom tools and plugins for Unity, reducing development time by 30%"
    ],
    skills: ["Unity", "C#", "Game Development", "Mobile Development", "Performance Optimization"]
  },
  {
    title: "Game Developer",
    company: "IDZ Digital Private Limited",
    location: "Mumbai, Maharashtra",
    period: "May 2021 - November 2021",
    description: [
      "Developed 5 game prototypes with rapid iteration cycles",
      "Implemented core gameplay mechanics and UI systems",
      "Reduced loading times by 40% through asset optimization",
      "Collaborated with artists and designers to implement visual effects"
    ],
    skills: ["Unity", "C#", "Game Design", "Prototyping", "UI/UX", "VFX"]
  }
];

export const education: EducationItem[] = [
  {
    degree: "Master of Computer Applications",
    institution: "Vellore Institute of Technology",
    location: "Vellore, Tamil Nadu, India",
    period: "2022 - 2024",
    description: "Specializing in advanced computing principles with focus on AI and computer vision. Published research on hand gesture recognition achieving 95% accuracy. GPA: 9.2/10"
  },
  {
    degree: "Bachelor of Science in Computer Science",
    institution: "Ramakrishna Mission Residential College",
    location: "Kolkata, West Bengal, India",
    period: "2018 - 2021",
    description: "Focused on theoretical computer science, mathematics, and machine learning. Published research on brain tumor segmentation with 92% detection accuracy. GPA: 9.5/10"
  },
  {
    degree: "School Level Courses",
    institution: "Julien Day School",
    location: "Kalyani, West Bengal, India",
    period: "Upto 2018",
    description: "School Captain (2017-2018). Advanced coursework in Computer Science, Mathematics, and Physics. Developed school's first student management system. Score: 95%"
  }
];
</file>

<file path="src/lib/blog.ts">
import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';

// Define the structure of blog post metadata
export interface BlogPostMeta {
  title: string;
  date: string;
  excerpt: string;
  tags: string[];
  imageUrl: string;
  readTimeMinutes?: number;
  slug: string;
  externalUrl?: string;
}

// Define structure for full post data including content
export interface BlogPost extends BlogPostMeta {
  content: string;
}

const postsDirectory = path.join(process.cwd(), 'src/content/blogs');

// Function to get metadata for all posts, sorted by date
export function getSortedPostsData(): BlogPostMeta[] {
  try {
    const fileNames = fs.readdirSync(postsDirectory).filter(name => name.endsWith('.mdx'));

    const allPostsData = fileNames.map((fileName): BlogPostMeta => {
      const slug = fileName.replace(/\.mdx$/, '');
      const fullPath = path.join(postsDirectory, fileName);
      const fileContents = fs.readFileSync(fullPath, 'utf8');
      const matterResult = matter(fileContents);

      return {
        slug,
        title: matterResult.data.title as string,
        date: matterResult.data.date as string,
        excerpt: matterResult.data.excerpt as string,
        tags: matterResult.data.tags as string[],
        imageUrl: matterResult.data.imageUrl as string,
        readTimeMinutes: matterResult.data.readTimeMinutes as number | undefined,
        externalUrl: matterResult.data.externalUrl as string | undefined,
      };
    });

    return allPostsData.sort((a, b) => {
      return new Date(b.date).getTime() - new Date(a.date).getTime();
    });
  } catch (error) {
    console.error("Error reading blog posts:", error);
    return [];
  }
}

// Function to get all possible slugs for static generation
export function getAllPostSlugs(): { params: { slug: string } }[] {
  try {
    const fileNames = fs.readdirSync(postsDirectory).filter(name => name.endsWith('.mdx'));
    return fileNames.map(fileName => ({
      params: {
        slug: fileName.replace(/\.mdx$/, '')
      }
    }));
  } catch (error) {
    console.error("Error getting post slugs:", error);
    return [];
  }
}

// Function to get specific post data by slug
export async function getPostData(slug: string): Promise<BlogPost | null> {
  const fullPath = path.join(postsDirectory, `${slug}.mdx`);

  try {
    const fileContents = fs.readFileSync(fullPath, 'utf8');
    const matterResult = matter(fileContents);

    const postData: BlogPost = {
      slug,
      title: matterResult.data.title as string,
      date: matterResult.data.date as string,
      excerpt: matterResult.data.excerpt as string,
      tags: matterResult.data.tags as string[],
      imageUrl: matterResult.data.imageUrl as string,
      readTimeMinutes: matterResult.data.readTimeMinutes as number | undefined,
      externalUrl: matterResult.data.externalUrl as string | undefined,
      content: matterResult.content,
    };

    return postData;
  } catch (error) {
    console.error(`Error reading blog post ${slug}:`, error);
    return null;
  }
}
</file>

<file path="src/lib/mdx-components.tsx">
import { Card } from '@/components/ui/mdx/Card';
import { Note } from '@/components/ui/mdx/Note';
import { Steps, Step } from '@/components/ui/mdx/Steps';
import type { MDXComponents } from 'mdx/types';

// Keep the original function signature but simplify the implementation
export function useMDXComponents(components: MDXComponents): MDXComponents {
  return {
    Card,
    Note,
    Steps,
    Step,
    ...components,
  };
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="public/sitemap.xml">
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">

  <url>
    <loc>https://yourdomain.com/</loc>
    <priority>1.0</priority>
    <changefreq>monthly</changefreq>
  </url>
  <url>
    <loc>https://yourdomain.com/blog</loc>
    <priority>0.8</priority>
    <changefreq>monthly</changefreq>
  </url>
  <url>
    <loc>https://yourdomain.com/portfolio</loc>
    <priority>0.8</priority>
    <changefreq>monthly</changefreq>
  </url>
  <url>
    <loc>https://yourdomain.com/portfolio/unity-game-1</loc>
    <priority>0.8</priority>
    <changefreq>monthly</changefreq>
  </url>
  <url>
    <loc>https://yourdomain.com/portfolio/ar-experience</loc>
    <priority>0.8</priority>
    <changefreq>monthly</changefreq>
  </url>
  <url>
    <loc>https://yourdomain.com/portfolio/interactive-vr</loc>
    <priority>0.8</priority>
    <changefreq>monthly</changefreq>
  </url>
  <url>
    <loc>https://yourdomain.com/blog/mac-terminal-setup</loc>
    <priority>0.8</priority>
    <changefreq>weekly</changefreq>
  </url>
</urlset>
</file>

<file path="src/components/sections/AnimatedSections.tsx">
'use client';

import { Suspense } from 'react';
import dynamic from 'next/dynamic';
import AnimateOnScroll from '@/components/ui/AnimateOnScroll';
import { BlogPostMeta } from '@/lib/blog';

// Dynamic imports for all sections
// Import skeleton components
import {
  AboutSectionSkeleton,
  ExperienceSectionSkeleton,
  SkillsSectionSkeleton,
  PortfolioHighlightsSkeleton,
  BlogHighlightsSkeleton,
  ContactCTASkeleton
} from '@/components/SectionSkeleton';

const AboutSection = dynamic(() => import('./AboutSection').then(mod => ({ default: mod.AboutSection })), {
  loading: () => <AboutSectionSkeleton />
});

const ExperienceSection = dynamic(() => import('./ExperienceSection').then(mod => ({ default: mod.ExperienceSection })), {
  loading: () => <ExperienceSectionSkeleton />
});

const SkillsSection = dynamic(() => import('./SkillsSection').then(mod => ({ default: mod.SkillsSection })), {
  loading: () => <SkillsSectionSkeleton />
});

const PortfolioHighlights = dynamic(() => import('./PortfolioHighlights').then(mod => ({ default: mod.PortfolioHighlights })), {
  loading: () => <PortfolioHighlightsSkeleton />
});

const BlogHighlights = dynamic(() => import('./BlogHighlights').then(mod => ({ default: mod.BlogHighlights })), {
  loading: () => <BlogHighlightsSkeleton />
});

const ContactCTA = dynamic(() => import('./ContactCTA').then(mod => ({ default: mod.ContactCTA })), {
  loading: () => <ContactCTASkeleton />
});

// Define props interface
interface AnimatedSectionsProps {
  recentPosts: BlogPostMeta[];
}

// Memoize the component to prevent unnecessary re-renders
function AnimatedSectionsComponent({ recentPosts }: AnimatedSectionsProps) {
  return (
    <>
      <Suspense fallback={<AboutSectionSkeleton />}>
        <AnimateOnScroll>
          <AboutSection />
        </AnimateOnScroll>
      </Suspense>

      <Suspense fallback={<ExperienceSectionSkeleton />}>
        <AnimateOnScroll delay={0.15}>
          <ExperienceSection />
        </AnimateOnScroll>
      </Suspense>

      <Suspense fallback={<SkillsSectionSkeleton />}>
        <AnimateOnScroll delay={0.3}>
          <SkillsSection />
        </AnimateOnScroll>
      </Suspense>

      <Suspense fallback={<PortfolioHighlightsSkeleton />}>
        <AnimateOnScroll delay={0.45}>
          <PortfolioHighlights />
        </AnimateOnScroll>
      </Suspense>

      <Suspense fallback={<BlogHighlightsSkeleton />}>
        <AnimateOnScroll delay={0.6}>
          <BlogHighlights recentPosts={recentPosts} />
        </AnimateOnScroll>
      </Suspense>

      <Suspense fallback={<ContactCTASkeleton />}>
        <AnimateOnScroll delay={0.75}>
          <ContactCTA />
        </AnimateOnScroll>
      </Suspense>
    </>
  );
}

// This component doesn't need memoization as it's only rendered once
// and its props (recentPosts) rarely change
export const AnimatedSections = AnimatedSectionsComponent;
</file>

<file path="src/components/ui/console-provider.tsx">
'use client';

import { createContext, useContext, useCallback, useState, useEffect, ReactNode } from 'react'; // Added useEffect
// Console component is no longer imported here

// Export LogMessage type so it can be imported elsewhere
export interface LogMessage {
  type: 'info' | 'warning' | 'error' | 'success';
  message: string;
  timestamp: string;
  id: number;
}

interface ConsoleContextType {
  logs: LogMessage[];
  log: (message: string) => void;
  warn: (message: string) => void;
  error: (message: string) => void;
  success: (message: string) => void;
}

const ConsoleContext = createContext<ConsoleContextType | null>(null);

interface ConsoleProviderProps {
  children: ReactNode;
}

 // Removed logCallback logic

 // Counter for unique log IDs, outside component state
 let logIdCounter = 0;

 export function ConsoleProvider({ children }: ConsoleProviderProps) {
   const [logs, setLogs] = useState<LogMessage[]>([]);
   // Removed nextId state

   const addLog = useCallback((message: string, type: LogMessage['type']) => {
     const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
     // Removed currentId and setNextId logic
     setLogs(prev => {
       // Use and increment the counter directly for the ID
       const newLog = { message, type, timestamp, id: logIdCounter++ };
       const updatedLogs = [...prev, newLog];
       // Limit log length
       if (updatedLogs.length > 50) return updatedLogs.slice(-50);
       return updatedLogs;
     });
   }, []); // No dependency needed for the counter

   const log = useCallback((message: string) => addLog(message, 'info'), [addLog]);
  const warn = useCallback((message: string) => addLog(message, 'warning'), [addLog]);
  const error = useCallback((message: string) => addLog(message, 'error'), [addLog]);
  const success = useCallback((message: string) => addLog(message, 'success'), [addLog]);

  // Add initial logs after mount using useEffect
  useEffect(() => {
    log('System initialized');
    success('Assets loaded successfully');
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // Empty dependency array ensures this runs only once on mount


  return (
    // Provide logs state in context value
    <ConsoleContext.Provider value={{ logs, log, warn, error, success }}>
      {children}
      {/* Console component is rendered directly where needed (e.g., Header.tsx) */}
    </ConsoleContext.Provider>
  );
}

export function useConsole() {
  const context = useContext(ConsoleContext);
  if (!context) {
    throw new Error('useConsole must be used within a ConsoleProvider');
  }
  return context;
}
</file>

<file path="src/components/ui/loading-overlay.tsx">
'use client';

import { useEffect, useState } from 'react';

interface LoadingOverlayProps {
  isLoading: boolean;
  text?: string;
}

export function LoadingOverlay({ isLoading, text = 'Loading...' }: LoadingOverlayProps) {
  const [progress, setProgress] = useState(0);
  const [dots, setDots] = useState('');

  useEffect(() => {
    if (!isLoading || typeof window === 'undefined') {
      setProgress(0);
      return;
    }

    let animationFrameId: number;
    let lastTime = Date.now();
    let currentProgress = 0;
    
    // Use a single RAF loop instead of multiple intervals
    const updateProgress = () => {
      const now = Date.now();
      const deltaTime = now - lastTime;
      
      // Update progress less frequently (every 150ms)
      if (deltaTime > 150) {
        lastTime = now;
        
        // Update dots every ~600ms
        if (deltaTime > 600) {
          setDots(prev => prev.length >= 3 ? '' : prev + '.');
        }
        
        // Update progress
        if (currentProgress < 100) {
          // More predictable progress increments
          currentProgress += 5 + Math.random() * 10;
          if (currentProgress > 100) currentProgress = 100;
          setProgress(Math.min(100, currentProgress));
        }
      }
      
      if (currentProgress < 100) {
        animationFrameId = requestAnimationFrame(updateProgress);
      }
    };
    
    animationFrameId = requestAnimationFrame(updateProgress);
    
    return () => {
      cancelAnimationFrame(animationFrameId);
    };
  }, [isLoading]);

  if (!isLoading) return null;

  return (
    <div
      className="absolute inset-0 bg-black/30 flex items-center justify-center z-50"
      role="dialog"
      aria-modal="true"
      aria-labelledby="loading-title"
    >
      <div
        className="bg-black/50 border border-primary/20 p-4 rounded-lg max-w-xs w-full font-mono"
        tabIndex={-1}
        aria-live="polite"
      >
        <div className="flex items-center justify-between mb-3">
          <span id="loading-title" className="text-primary text-sm">{text}{dots}</span>
          <span className="text-primary text-sm" aria-live="polite" aria-atomic="true">
            {Math.min(100, Math.round(progress))}%
          </span>
        </div>
        
        <div className="h-2 bg-black/40 rounded-full overflow-hidden" role="progressbar" aria-valuenow={Math.round(progress)} aria-valuemin={0} aria-valuemax={100}>
          <div
            className="h-full bg-primary relative"
            style={{ width: `${progress}%` }}
          />
        </div>

        <div className="mt-3 text-xs text-muted-foreground" aria-live="polite">
          {progress < 100 ? 'Loading...' : 'Complete'}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/BlogCardSkeleton.tsx">
import { Card, CardContent, CardHeader } from "./ui/card"; // Use relative path
import { Skeleton } from "./ui/skeleton"; // Use relative path

export function BlogCardSkeleton() {
  return (
    <Card className="flex flex-col overflow-hidden bg-black/30 border border-border"> {/* Match card styling */}
      <CardHeader className="p-0">
        <Skeleton className="aspect-video w-full" />
      </CardHeader>
      <CardContent className="flex-grow p-5">
        {/* Skeleton for Date/Read Time */}
        <div className="flex items-center space-x-4 text-xs mb-2">
          <Skeleton className="h-4 w-24" /> {/* Date */}
          <Skeleton className="h-4 w-20" /> {/* Read time */}
        </div>
        {/* Skeleton for Title */}
        <Skeleton className="h-6 w-full mb-2" /> {/* Title line 1 */}
        <Skeleton className="h-6 w-5/6 mb-4" /> {/* Title line 2 */}
        {/* Skeleton for Excerpt */}
        <Skeleton className="h-4 w-full mb-1" /> {/* Excerpt line 1 */}
        <Skeleton className="h-4 w-full mb-1" /> {/* Excerpt line 2 */}
        <Skeleton className="h-4 w-3/4 mb-4" /> {/* Excerpt line 3 */}
        {/* Skeleton for Tags */}
        <div className="flex flex-wrap gap-2">
          <Skeleton className="h-5 w-16 rounded-md" /> {/* Use rounded-md like Badge */}
          <Skeleton className="h-5 w-20 rounded-md" />
          <Skeleton className="h-5 w-14 rounded-md" />
        </div>
      </CardContent>
      {/* No CardFooter */}
    </Card>
  );
}
</file>

<file path="src/lib/data/hero.ts">
export const typedStrings = [
  'a Software Engineer',
  'an Interactive Media Developer @ Convai',
  'a Unity GameDev | 2D | 3D | AR/VR |',
];
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function throttle<T extends (...args: unknown[]) => any>(
  func: T,
  limit: number
): (...args: Parameters<T>) => void {
  let inThrottle: boolean;
  let lastResult: ReturnType<T>;

  return function(this: ThisParameterType<T>, ...args: Parameters<T>): void {
    if (!inThrottle) {
      inThrottle = true;
      setTimeout(() => (inThrottle = false), limit);
      lastResult = func.apply(this, args);
    }
  };
}
</file>

<file path="next.config.mjs">
import createMDX from '@next/mdx';
import remarkGfm from 'remark-gfm';
import rehypePrettyCode from 'rehype-pretty-code';

/** @type {import('next').NextConfig} */
const nextConfig = {
  pageExtensions: ['js', 'jsx', 'mdx', 'ts', 'tsx'],
  compress: true,
  poweredByHeader: false,
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'placehold.co',
        port: '',
        pathname: '/**',
      },
    ],
    formats: ['image/avif', 'image/webp'],
    deviceSizes: [640, 750, 828, 1080, 1200],
    imageSizes: [16, 32, 48, 64, 96, 128, 256],
  },
  async headers() {
    return [
      {
        source: '/:path*',
        headers: [
          {
            key: 'Cache-Control',
            value: 'public, max-age=31536000, immutable',
          },
        ],
      },
      {
        source: '/_next/image/:path*',
        headers: [
          {
            key: 'Cache-Control',
            value: 'public, max-age=31536000, immutable',
          },
        ],
      },
    ];
  },
};

const withMDX = createMDX({
  options: {
    remarkPlugins: [remarkGfm],
    rehypePlugins: [
      [
        rehypePrettyCode,
        {
          theme: 'one-dark-pro',
          keepBackground: true,
          defaultLang: 'typescript',
          // Optimize code blocks
          grid: false,
          lineNumbers: false,
          filterMetaString: (string) => string.replace(/scale=\d*\.?\d+/, ''),
        },
      ],
    ],
  },
});

export default withMDX(nextConfig);
</file>

<file path="public/robots.txt">
# Allow all web crawlers
User-agent: *
Allow: /

# Sitemap location - IMPORTANT: Replace 'https://yourdomain.com' with your actual domain before deployment
Sitemap: https://yourdomain.com/sitemap.xml
</file>

<file path="scripts/generate-sitemap.mjs">
import fs from 'fs';
import path from 'path';
import { globby } from 'globby';

// Replace with your actual domain before deployment
const SITE_URL = 'https://yourdomain.com';

async function generateSitemap() {
  console.log('Generating sitemap...');

  const pagesDir = path.resolve(process.cwd(), 'src/app');
  const contentDir = path.resolve(process.cwd(), 'src/content');

  // 1. Get static pages from app router
  const pages = await globby([
    `${pagesDir}/**/page.tsx`,
    `!${pagesDir}/layout.tsx`,
    `!${pagesDir}/template.tsx`,
    `!${pagesDir}/not-found.tsx`,
    `!${pagesDir}/api/**`,
    `!${pagesDir}/**/\\[*\\]/**`,
  ]);

  const staticPageUrls = pages.map((page) => {
    const route = page
      .replace(pagesDir, '')
      .replace('/page.tsx', '')
      .replace(/^\/index$/, '/');
    return route === '' ? '/' : route;
  });

  // 2. Get dynamic portfolio pages
  const portfolioDir = path.join(pagesDir, 'portfolio/[slug]');
  // Import portfolio data from TypeScript file
  const { portfolioItems } = await import('../src/lib/data/portfolio.ts');
  const portfolioUrls = portfolioItems.map(item => `/portfolio/${item.slug}`);

  // 3. Get dynamic blog pages
  const blogPostsDir = path.join(contentDir, 'blogs');
  const blogFiles = await globby(`${blogPostsDir}/**/*.mdx`);
  const blogUrls = blogFiles.map((file) => {
    const slug = path.basename(file, path.extname(file));
    return `/blog/${slug}`;
  });

  // Combine all URLs
  const allUrls = [
    '/',
    ...staticPageUrls.filter(url => url !== '/'),
    ...portfolioUrls,
    ...blogUrls,
  ];
  const uniqueUrls = [...new Set(allUrls)];

  // Create sitemap XML content
  const sitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${uniqueUrls
  .map((url) => {
    const priority = url === '/' ? '1.0' : '0.8';
    const changefreq = url.startsWith('/blog/') ? 'weekly' : 'monthly';
    return `
  <url>
    <loc>${`${SITE_URL}${url}`}</loc>
    <priority>${priority}</priority>
    <changefreq>${changefreq}</changefreq>
  </url>`;
  })
  .join('')}
</urlset>`;

  // Write sitemap file to public directory
  const sitemapPath = path.join(process.cwd(), 'public/sitemap.xml');
  fs.writeFileSync(sitemapPath, sitemap);

  console.log(`Sitemap generated successfully at ${sitemapPath} with ${uniqueUrls.length} URLs.`);
}

generateSitemap().catch((error) => {
  console.error('Error generating sitemap:', error);
  process.exit(1);
});
</file>

<file path="src/components/ui/console.tsx">
'use client';

import { memo } from 'react'; // Removed useEffect, useState, useCallback
import { Terminal } from 'lucide-react';
// Import context hook and LogMessage type
import { useConsole } from './console-provider';
import type { LogMessage } from './console-provider'; // Use type import

// Removed ConsoleProps interface, no props needed

// Keep the memoization here as the console component could re-render frequently
// when logs are added, and we want to prevent unnecessary re-renders
export const Console = memo(function Console() {
  // Get logs directly from context
  const { logs } = useConsole();

  // Removed internal state (logs, nextId)
  // Removed addLog callback
  // Removed useEffect hook

  const getMessageColor = (type: LogMessage['type']) => {
    switch (type) {
      case 'error': return 'text-red-500';
      case 'warning': return 'text-yellow-500';
      case 'success': return 'text-green-500';
      default: return 'text-blue-500';
    }
  };

  // Removed the isMinimized conditional rendering block

  return (
    // Removed fixed positioning, added w-full, adjusted max-h
    <div className="w-full max-h-32 bg-black/20 backdrop-blur-sm border border-border rounded-lg overflow-hidden font-mono text-sm">
      {/* Removed internal header */}
      
      {/* Adjusted padding and max-height for log area */}
      <div className="p-2 h-full overflow-y-auto space-y-1">
        {/* Use memo to prevent unnecessary re-renders */}
        {logs.slice(-15).map((log) => (
          // Use the unique log.id for the key prop
          <div key={log.id} className="flex items-start gap-2">
            <span className="text-muted-foreground text-xs shrink-0 w-[70px]">{log.timestamp}</span>
            <span className={`${getMessageColor(log.type)} break-words`}>{log.message}</span>
          </div>
        ))}
      </div>
    </div>
  );
});
</file>

<file path="src/components/Footer.tsx">
'use client';

import { Terminal, Heart, Coffee } from 'lucide-react';

export function Footer() {
  return (
    <footer id="footer" className="bg-black/30 backdrop-blur-sm py-6 text-center">
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-center gap-2 text-sm text-muted-foreground font-mono">
          <Terminal size={14} className="text-primary" />
          <span>echo "Made with</span>
          <Heart size={14} className="text-red-500 animate-pulse" />
          <span>and</span>
          <Coffee size={14} className="text-amber-500" />
          <span>in India"</span>
        </div>
        <div className="mt-2 text-xs text-muted-foreground/60 font-mono">
          <span className="text-primary">&gt; </span>
          <span className="typing-animation">Feel free to fork, star, or contribute!</span>
        </div>
        <div className="mt-4 text-sm text-muted-foreground font-mono">
          © Copyright Rishav Nath Pati
        </div>
      </div>

      <style jsx>{`
        @keyframes typing {
          from { width: 0 }
          to { width: 100% }
        }
        
        .typing-animation {
          display: inline-block;
          overflow: hidden;
          white-space: nowrap;
          animation: typing 3s steps(40, end);
        }
      `}</style>
    </footer>
  );
}
</file>

<file path="src/content/blogs/mac-terminal-setup.mdx">
---
title: 'Ultimate Mac Terminal Setup Guide'
date: '2024-03-15'
excerpt: 'A comprehensive guide to setting up a modern, efficient terminal environment on macOS with iTerm2, Oh My Zsh, and essential tools.'
tags: ['Development', 'Terminal', 'macOS', 'CLI', 'Productivity']
imageUrl: '/blog/thumbnails/mac-terminal.png'
readTimeMinutes: 15
slug: 'mac-terminal-setup'
---

import { Steps, Step } from '@/components/ui/mdx/Steps';
 import { Note } from '@/components/ui/mdx/Note';
 import { Card } from '@/components/ui/mdx/Card';
 import { Terminal, Package, Shell, Wrench, Plug } from 'lucide-react'; // Replaced Tool with Wrench, Plugin with Plug
 
 A powerful terminal setup is essential for any developer working on macOS. This comprehensive guide will walk you through creating a modern, efficient terminal environment using iTerm2, Oh My Zsh, and other essential tools.

<Note>
This guide assumes you're using macOS and are comfortable with basic terminal operations. If you're new to the terminal, don't worry – we'll go through each step in detail.
</Note>

<Card title="What You'll Learn" icon={<Terminal className="h-5 w-5" />}>
- Setting up iTerm2 with optimal configurations
- Package management with Homebrew
- Shell customization using Oh My Zsh and Powerlevel10k
- Essential development tools for productivity
- Must-have Zsh plugins for better workflow
</Card>

## Setting Up iTerm2

<Card title="Why Choose iTerm2?" icon={<Terminal className="h-5 w-5" />}>
The default macOS Terminal is functional, but iTerm2 offers significant improvements:

- ✨ Split panes (Cmd+D vertical, Cmd+Shift+D horizontal)
- 🔑 Hotkey window access
- 🔍 Better search & autocomplete
- 🎨 Customizable triggers and profiles
- 🎯 Improved color support
</Card>

<Steps>
<Step>
### Install iTerm2

```bash
brew install --cask iterm2
```
</Step>

<Step>
### Configure Key Settings

1. **Natural Text Editing**
   - Open iTerm2 Preferences
   - Navigate to Profiles → Keys
   - Load Preset... → Natural Text Editing

2. **Enable GPU Rendering**
   - Go to Advanced Settings
   - Search for "GPU"
   - Enable GPU renderer

3. **Unlimited History**
   - Go to Profiles → Terminal
   - Check "Unlimited scrollback"
</Step>
</Steps>

## Package Management with Homebrew

<Card title="About Homebrew" icon={<Package className="h-5 w-5" />}>
Homebrew is the missing package manager for macOS, making it easy to install and manage software packages from the command line.
</Card>

<Steps>
<Step>
### Install Homebrew

```bash
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
```
</Step>

<Step>
### Configure PATH

Add Homebrew to your PATH by adding these lines to your `~/.zprofile`:

```bash
echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
eval "$(/opt/homebrew/bin/brew shellenv)"
```
</Step>
</Steps>

## Shell Customization

<Card title="Oh My Zsh & Powerlevel10k" icon={<Shell className="h-5 w-5" />}>
Transform your terminal with a powerful shell framework and a beautiful theme that provides:
- Rich command-line completion
- Useful aliases and functions
- Git integration
- Customizable prompts
</Card>

<Steps>
<Step>
### Install Prerequisites

```bash
brew install git
```
</Step>

<Step>
### Install Oh My Zsh

```bash
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
```
</Step>

<Step>
### Set Up Powerlevel10k

1. Install the theme:
```bash
git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
```

2. Configure theme in `~/.zshrc`:
```bash
ZSH_THEME="powerlevel10k/powerlevel10k"
```
</Step>

<Step>
### Install Required Font

```bash
brew tap homebrew/cask-fonts
brew install --cask font-meslo-lg-nerd-font
```

Then set MesloLGS NF as your font in iTerm2 (Preferences → Profiles → Text → Font).
</Step>
</Steps>

 ## Essential Development Tools
 
 <Card title="Modern CLI Tools" icon={<Wrench className="h-5 w-5" />}>
 Replace traditional Unix tools with modern alternatives that provide better features and user experience.
 </Card>

```bash
# File Operations
brew install eza         # Modern ls replacement
brew install bat         # Better cat with syntax highlighting
brew install fd         # Faster find alternative

# Search Tools
brew install ripgrep     # Fast grep replacement
brew install fzf         # Fuzzy finder

# Git Enhancements
brew install delta       # Better git diff

# System Tools
brew install tldr        # Simplified man pages
brew install jq          # JSON processor
brew install htop        # Interactive process viewer
brew install ncdu        # Disk usage analyzer
```

<Note type="info">
These modern alternatives are designed to be drop-in replacements for traditional Unix tools, with better features and more intuitive interfaces.
</Note>

 ## Zsh Plugins
 
 <Card title="Essential Plugins" icon={<Plug className="h-5 w-5" />}>
 Enhance your shell experience with plugins that provide auto-suggestions, syntax highlighting, and improved history search.
 </Card>

<Steps>
<Step>
### Install Plugins

```bash
# Auto-suggestions
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

# Syntax highlighting
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting

# History substring search
git clone https://github.com/zsh-users/zsh-history-substring-search ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-history-substring-search
```
</Step>

<Step>
### Configure Plugins

Add these plugins to your `~/.zshrc`:

```bash
plugins=(
    git                             # Git shortcuts
    zsh-autosuggestions            # Fish-like suggestions
    zsh-syntax-highlighting        # Command syntax highlighting
    zsh-history-substring-search   # Better history search
    web-search                     # Quick web searches
    copypath                       # Copy current directory
    dirhistory                     # Directory navigation
    sudo                          # Double ESC to add sudo
)
```
</Step>
</Steps>

<Note type="warning">
Remember to run `source ~/.zshrc` after making any changes to your configuration file.
</Note>

## Next Steps

<Card>
Now that you have a powerful terminal setup, consider:
- Customizing your Powerlevel10k theme
- Exploring additional Zsh plugins
- Setting up custom aliases and functions
- Configuring keyboard shortcuts
</Card>

<Note type="success">
Congratulations! You now have a modern, efficient terminal environment that will significantly boost your productivity. Take some time to explore each tool's features and customize the setup to match your workflow.
</Note>
</file>

<file path="src/app/portfolio/[slug]/page.tsx">
import { notFound } from 'next/navigation';
import { Metadata } from 'next';
import Link from 'next/link';
import Image from 'next/image';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { ArrowLeft, Github, ExternalLink } from 'lucide-react';
import { portfolioItems } from '@/lib/data/portfolio';
import { ProseTerminal } from '@/components/ui/prose-terminal';

type Props = {
  params: { slug: string };
};

export async function generateStaticParams() {
  return portfolioItems.map((item) => ({
    slug: item.slug,
  }));
}

export async function generateMetadata(props: Props): Promise<Metadata> {
  const project = portfolioItems.find(item => item.slug === props.params.slug);

  if (!project) {
    return { title: 'Project Not Found' };
  }

  return {
    title: `${project.title} | Rishav Nath Pati Portfolio`,
    description: project.description,
    openGraph: {
      title: project.title,
      description: project.description,
      images: [{ url: project.imageUrl, alt: project.title }],
      type: 'article',
    },
    twitter: {
      card: 'summary_large_image',
      title: project.title,
      description: project.description,
      images: [project.imageUrl],
    },
  };
}

export default async function PortfolioDetailPage(props: Props) {
  const project = portfolioItems.find(item => item.slug === props.params.slug);

  if (!project) {
    notFound();
  }

  // Get related projects (same category, excluding current project)
  const relatedProjects = portfolioItems
    .filter(item => item.category === project.category && item.slug !== project.slug)
    .slice(0, 3);

  return (
    <div className="container mx-auto px-4 py-16 lg:py-24">
      <div className="mb-8">
        <Button variant="outline" size="sm" asChild>
          <Link href="/portfolio">
            <ArrowLeft className="mr-2 h-4 w-4" /> Back to Portfolio
          </Link>
        </Button>
      </div>

       <article className="max-w-4xl mx-auto">
         <header className="mb-8">
            <h1 className="text-4xl lg:text-5xl font-bold mb-4 font-mono text-foreground">
              {project.title}
            </h1>
            <div className="flex flex-wrap gap-2 mb-6">
              {project.tags.map((tag) => (
                <Badge key={tag} variant="outline" className="font-mono text-xs">
                  {tag}
                </Badge>
             ))}
           </div>
         </header>

         <div className="aspect-video relative mb-8 rounded-lg overflow-hidden border border-border">
           <Image
             src={project.imageUrl}
             alt={project.title}
             fill
             className="object-cover"
             priority
            />
          </div>

          <ProseTerminal className="mb-8">
            <p>{project.description}</p>
          </ProseTerminal>

         <div className="flex flex-wrap gap-4 mb-12">
           {project.githubUrl && (
             <Button asChild className="font-mono">
               <a href={project.githubUrl} target="_blank" rel="noopener noreferrer">
                 <Github className="mr-2 h-5 w-5" /> View on GitHub
               </a>
             </Button>
           )}
           {project.liveUrl && (
             <Button variant="outline" asChild className="font-mono">
               <a href={project.liveUrl} target="_blank" rel="noopener noreferrer">
                 <ExternalLink className="mr-2 h-5 w-5" /> Live Demo
               </a>
            </Button>
          )}
        </div>

         {relatedProjects.length > 0 && (
           <section className="border-t border-border pt-12">
             <h2 className="text-2xl font-bold mb-6 font-mono">Related Projects</h2>
             <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
               {relatedProjects.map((item) => (
                <Link
                  key={item.slug}
                  href={`/portfolio/${item.slug}`}
                  className="group block"
                >
                  <div className="aspect-video relative rounded-lg overflow-hidden border border-border mb-3">
                    <Image
                      src={item.imageUrl}
                      alt={item.title}
                      fill
                       className="object-cover transition-transform duration-300 group-hover:scale-105"
                     />
                   </div>
                   <h3 className="font-semibold text-lg mb-2 group-hover:text-primary transition-colors font-mono">
                     {item.title}
                   </h3>
                   <p className="text-sm text-foreground line-clamp-2 font-mono">
                     {item.description}
                   </p>
                </Link>
              ))}
            </div>
          </section>
        )}
      </article>
    </div>
  );
}
</file>

<file path="src/app/page.tsx">
// No 'use client' directive needed here

import { HeroSection } from '@/components/sections/HeroSection';
import { AnimatedSections } from '@/components/sections/AnimatedSections'; // Import the new client component
import { getSortedPostsData } from '@/lib/blog'; // Import data fetching function
// Removed individual section imports as they are now handled by AnimatedSections

export default function Home() {
  // Fetch recent posts data here
  const recentPosts = getSortedPostsData().slice(0, 3);

  return (
    <div className="flex flex-col">
      <HeroSection />
      {/* Render all animated sections via the client component, passing posts data */}
      <AnimatedSections recentPosts={recentPosts} />

      {/* Add padding below the last section */}
      <div className="h-20"></div>
    </div>
  );
}
</file>

<file path="src/lib/data/blog.ts">
export interface BlogPostHighlight {
  slug: string;
  title: string;
  date: string;
  excerpt: string;
  imageUrl: string;
  tags: string[];
  readTimeMinutes?: number;
  externalUrl?: string;
}

export const blogPostsData: BlogPostHighlight[] = [
  {
    slug: 'mac-terminal-setup',
    title: 'Ultimate Mac Terminal Setup Guide',
    date: '2024-03-15',
    excerpt: 'A comprehensive guide to setting up a modern, efficient terminal environment on macOS with iTerm2, Oh My Zsh, and essential tools.',
    imageUrl: '/blog/thumbnails/mac-terminal.png',
    tags: ['Development', 'Terminal', 'macOS'],
    readTimeMinutes: 15,
  },
  {
    slug: 'beatrex-ball-dev-journey',
    title: 'Beatrex Ball: A Unity Game Development Journey',
    date: '2023-06-15',
    excerpt: 'Deep dive into the development process of Beatrex Ball, exploring the technical challenges and solutions in creating this rhythm-based mobile game.',
    imageUrl: '/blog/thumbnails/beatrex-ball-journey.png',
    tags: ['GameDev', 'Unity', 'Mobile'],
    readTimeMinutes: 8,
  },
  {
    slug: 'hand-gesture-recognition-research',
    title: 'Real-time Hand Gesture Recognition Research',
    date: '2023-05-20',
    excerpt: 'Research publication on developing an efficient hand gesture recognition system using deep learning and computer vision techniques.',
    imageUrl: '/blog/thumbnails/hand-gesture-recognition.png',
    tags: ['ML', 'Computer Vision', 'Research'],
    readTimeMinutes: 12,
  },
  {
    slug: 'hand-gesture-gui-mediapipe',
    title: 'Realtime Hand Gesture Controlled GUI (Medium)',
    date: '2023-04-15',
    excerpt: 'Learn how to create a hand gesture-controlled interface using computer vision and machine learning with MediaPipe and Python.',
    imageUrl: '/blog/thumbnails/hand-gesture-gui-tutorial.png',
    tags: ['CV', 'Python', 'MediaPipe'],
    readTimeMinutes: 10,
    externalUrl: 'https://medium.com/@patirishavnath/realtime-hand-gesture-controlled-gui-using-mediapipe-and-python-c80f3a295fb',
  },
  {
    slug: 'brain-tumor-segmentation-unet',
    title: 'Brain Tumor Segmentation Using U-Net (Medium)',
    date: '2023-03-20',
    excerpt: 'Explore how deep learning, specifically the U-Net architecture, can be used for accurate brain tumor detection and segmentation.',
    imageUrl: '/blog/thumbnails/brain-tumor-segmentation.png',
    tags: ['Deep Learning', 'Medical Imaging', 'U-Net'],
    readTimeMinutes: 15,
    externalUrl: 'https://medium.com/@patirishavnath/brain-tumor-segmentation-using-u-net-architecture-d6c32bc9fa82',
  },
];

export const highlightedBlogPosts: BlogPostHighlight[] = blogPostsData
  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
  .slice(0, 3);
</file>

<file path="tailwind.config.ts">
import type { Config } from 'tailwindcss';

const config: Config = {
  content: ['./src/**/*.{ts,tsx}'],
  prefix: '',
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px',
      },
    },
    extend: {
      
      fontFamily: {
        sans: ['var(--font-geist-sans)', 'sans-serif'],
        mono: ['var(--font-geist-mono)', 'monospace'],
      },
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'bounce-slow': {
          '0%, 100%': {
            transform: 'translateY(0)',
          },
          '50%': {
            transform: 'translateY(25%)',
          },
        },
      },
      animation: {
        'bounce-slow': 'bounce-slow 2s ease-in-out infinite',
      },
    },
  },
  plugins: [require('@tailwindcss/typography')],
  future: {
    hoverOnlyWhenSupported: true,
  }
} satisfies Config;

export default config;
</file>

<file path="src/app/blog/page.tsx">
import Link from 'next/link';
import Image from 'next/image';
import { Metadata } from 'next';
 import { getSortedPostsData } from '@/lib/blog';
 import { Suspense } from 'react'; // Re-import Suspense
 import { BlogCardSkeleton } from '../../components/BlogCardSkeleton'; // Re-import Skeleton with relative path
 import {
   Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "../../components/ui/card"; // Using relative path for now
import { Badge } from "@/components/ui/badge";
import { CalendarDays, Clock } from 'lucide-react';

// Helper function (can be moved to utils if needed)
const formatDate = (dateString: string): string => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

// Define the BlogGrid component containing the mapping logic
function BlogGrid() {
  const allPosts = getSortedPostsData();

  if (allPosts.length === 0) {
    return <p className="text-center text-foreground font-mono">No blog posts found.</p>;
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {allPosts.map((post) => (
        <Card
          key={post.slug}
          className="flex flex-col overflow-hidden transition-transform duration-300 ease-in-out hover:-translate-y-1 hover:shadow-lg bg-black/30 border border-border group" // Added border
        >
          <CardHeader className="p-0">
            <Link href={post.externalUrl || `/blog/${post.slug}`} target={post.externalUrl ? '_blank' : '_self'} rel={post.externalUrl ? 'noopener noreferrer' : ''} aria-label={`Read more about ${post.title}`}>
              <div className="aspect-video overflow-hidden">
                <Image
                  src={post.imageUrl}
                  alt={`Thumbnail for ${post.title}`}
                  width={600}
                  height={338}
                  className="object-cover w-full h-full transition-transform duration-300 ease-in-out group-hover:scale-105"
                  loading="lazy"
                  sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                />
              </div>
            </Link>
          </CardHeader>
          <CardContent className="flex-grow p-5">
            <div className="flex items-center space-x-4 text-xs text-muted-foreground mb-2 font-mono"> {/* Keep date/time muted, add mono */}
              <span className="flex items-center gap-1.5">
                <CalendarDays className="w-3.5 h-3.5" /> {formatDate(post.date)}
              </span>
              {post.readTimeMinutes && (
                <span className="flex items-center gap-1.5">
                  <Clock className="w-3.5 h-3.5" /> {post.readTimeMinutes} min read
                </span>
              )}
            </div>
            {/* Use font-mono, text-foreground */}
            <CardTitle className="text-xl font-semibold mb-2 font-mono line-clamp-2 group-hover:text-primary transition-colors">
              <Link href={post.externalUrl || `/blog/${post.slug}`} target={post.externalUrl ? '_blank' : '_self'} rel={post.externalUrl ? 'noopener noreferrer' : ''}>
                {post.title}
              </Link>
            </CardTitle>
            {/* Use font-mono, text-foreground */}
            <CardDescription className="text-foreground mb-4 text-sm line-clamp-3 font-mono">
              {post.excerpt}
            </CardDescription>
            <div className="flex flex-wrap gap-2">
              {/* Use outline variant, font-mono */}
              {post.tags?.slice(0, 3).map((tag) => (
                <Badge key={tag} variant="outline" className="font-mono text-xs">{tag}</Badge>
              ))}
              {post.tags && post.tags.length > 3 && <Badge variant="outline" className="font-mono text-xs">...</Badge>}
            </div>
          </CardContent>
          {/* No CardFooter needed */}
        </Card>
      ))}
    </div>
   );
 }
 
 // Fallback component displaying multiple skeletons
 function BlogSkeletonFallback() {
   return (
     <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
       {Array.from({ length: 6 }).map((_, index) => (
         <BlogCardSkeleton key={index} />
       ))}
     </div>
   );
 }
export const metadata: Metadata = {
  title: 'Blog | Rishav Nath Pati',
  description: 'Read articles and insights on game development, interactive media, AI, and technology by Rishav Nath Pati.',
};


export default function BlogListPage() {
  return (
    <div className="container mx-auto px-4 py-16 lg:py-24">
      <div className="max-w-3xl mx-auto text-center mb-12 lg:mb-16">
        {/* Use font-mono, text-foreground */}
        <h1 className="text-4xl lg:text-5xl font-bold mb-4 font-mono text-foreground">
          Blog Posts
        </h1>
        {/* Use font-mono, text-foreground */}
        <p className="text-lg lg:text-xl text-foreground leading-relaxed font-mono">
          Exploring ideas and sharing knowledge on topics I'm passionate about.
       </p>
       </div>
 
       {/* Re-add Suspense wrapper */}
       <Suspense fallback={<BlogSkeletonFallback />}>
         <BlogGrid />
       </Suspense>
     </div>
   );
}
</file>

<file path="src/components/easter-eggs/KonamiCode.tsx">
'use client';

import { useEffect, useState, useCallback } from 'react';
import { useConsole } from '@/components/ui/console-provider';

// Game dev-style cheat codes
const CHEAT_CODES = {
  konami: {
    sequence: ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'b', 'a'],
    name: 'Konami Code',
    effect: 'Celebration Mode'
  },
  debug: {
    sequence: ['d', 'e', 'b', 'u', 'g'],
    name: 'Debug Mode',
    effect: 'Console Visibility'
  }
  // Removed Unity cheat code since we're using forced dark theme now
};

export function KonamiCode() {
  const [input, setInput] = useState<string[]>([]);
  const { log, success, warn } = useConsole();
  const maxSequenceLength = Math.max(...Object.values(CHEAT_CODES).map(code => code.sequence.length));

  useEffect(() => {
    if (typeof window === 'undefined') return;
    
    let lastKeyTime = 0;
    const keyDebounceTime = 100; // ms
    
    const handleKeyDown = (e: KeyboardEvent) => {
      const now = Date.now();
      // Debounce key presses to avoid too many state updates
      if (now - lastKeyTime < keyDebounceTime) return;
      lastKeyTime = now;
      
      const key = e.key.toLowerCase();
      
      // Optimize array operations with direct manipulation
      const newInput = [...input, key];
      if (newInput.length > maxSequenceLength) {
        newInput.shift();
      }
      
      setInput(newInput);

      // Check for any matching cheat codes
      for (const [codeName, code] of Object.entries(CHEAT_CODES)) {
        const sequence = code.sequence.map(k => k.toLowerCase());
        if (newInput.slice(-sequence.length).join(',') === sequence.join(',')) {
          activateCheatCode(codeName as keyof typeof CHEAT_CODES);
          setInput([]); // Reset input
          break; // Exit loop once a match is found
        }
      }
    };

    window.addEventListener('keydown', handleKeyDown, { passive: true });
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [input, maxSequenceLength]);

  const celebrateKonamiCode = useCallback(() => {
    // Simple celebration effect using DOM elements
    const colors = ['#ff0000', '#00ff00', '#0000ff'];

    // Create achievement popup
    const message = document.createElement('div');
    message.textContent = '🎮 Achievement: Konami!';
    message.style.cssText = `
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0, 0, 0, 0.9);
      color: ${colors[1]};
      padding: 1rem;
      border-radius: 0.5rem;
      border: 1px solid ${colors[1]};
      font-family: monospace;
      z-index: 9999;
      transition: opacity 0.3s ease;
    `;

    document.body.appendChild(message);

    // Fade out and remove after 1.5s
    setTimeout(() => {
      message.style.opacity = '0';
      setTimeout(() => message.remove(), 300);
    }, 1500);
  }, []); // No dependencies needed for this effect

  const activateCheatCode = useCallback((codeName: keyof typeof CHEAT_CODES) => {
    const code = CHEAT_CODES[codeName];
    log(`Cheat code detected: ${code.name}`);
    success(`Activating ${code.effect}...`);

    switch (codeName) {
      case 'konami':
        celebrateKonamiCode();
        break;
      case 'debug':
        // Toggle console visibility
        warn('Debug mode activated - console will remain visible');
        break;
    }
  }, [log, success, warn, celebrateKonamiCode]);

  return null;
}
</file>

<file path="src/components/sections/ContactCTA.tsx">
import React from 'react';
import { Button } from '@/components/ui/button';
import { Mail, Terminal } from 'lucide-react';
import { contactInfo, type ContactInfo } from '@/lib/data/contact';

// Contact item component
function ContactItem({ info }: { info: ContactInfo }) {
  const Icon = info.icon;
  
  return (
    <div className="flex items-center gap-2 mb-3 group">
      <Icon className={`w-4 h-4 text-primary transition-transform group-hover:scale-110 ${
        info.isPrimary ? 'animate-pulse' : ''
      }`} />
      <span className={`${
        info.isPrimary ? 'text-foreground' : 'text-muted-foreground'
      } transition-colors group-hover:text-primary`}>
        {info.text}
      </span>
    </div>
  );
}

function ContactCTAComponent() {
  // Use data directly - these are static imports that don't change

  return (
    <section
      id="contact-cta"
      className="py-20 lg:py-28 bg-black/20 backdrop-blur-sm"
    >
      <div className="container mx-auto px-4">
        <div className="max-w-4xl mx-auto">
          {/* Section Header */}
          <div className="flex items-center gap-3 mb-6 group">
            <Terminal className="w-6 h-6 text-primary group-hover:scale-110 transition-transform" />
            <h2 className="text-2xl font-bold font-mono text-foreground group-hover:text-primary transition-colors">
              contact
            </h2>
          </div>

          <div className="bg-black/30 rounded-lg border border-border p-6 hover:border-primary/50 transition-colors">
            <div className="flex items-center gap-2 mb-6 group">
              <Terminal className="w-5 h-5 text-primary group-hover:scale-110 transition-transform" />
              <span className="font-mono text-sm group-hover:text-primary transition-colors">contact.sh</span>
            </div>

            <div className="space-y-6">
              <div className="font-mono">
                <div className="text-muted-foreground mb-2 group">
                  <span className="group-hover:text-primary transition-colors">$ echo "status"</span>
                </div>
                <p className="text-foreground mb-4 pl-4 group hover:bg-primary/5 rounded transition-colors">
                  <span className="text-green-500 animate-pulse">●</span>
                  <span className="ml-2 group-hover:text-primary transition-colors">
                    Available for freelance projects and collaborations
                  </span>
                </p>

                <div className="text-muted-foreground mb-2 group">
                  <span className="group-hover:text-primary transition-colors">$ cat contact_info.txt</span>
                </div>
                <div className="bg-black/20 rounded border border-border/50 p-4 mb-6 hover:border-primary/50 transition-colors">
                  {contactInfo.map((info, index) => (
                    <ContactItem key={index} info={info} />
                  ))}
                </div>

                <div className="text-muted-foreground mb-2 group">
                  <span className="group-hover:text-primary transition-colors">$ ./send_message.sh</span>
                </div>
                <div className="pl-4">
                  <Button 
                    size="lg" 
                    asChild 
                    className="font-mono transition-transform hover:scale-105 hover:shadow-lg"
                  >
                    <a 
                      href="mailto:patirishavnath@gmail.com"
                      className="flex items-center"
                    >
                      <Mail className="mr-2 h-5 w-5 transition-transform group-hover:rotate-12" />
                      <span className="relative after:absolute after:bottom-0 after:left-0 after:h-[2px] after:w-0 after:bg-primary after:transition-all hover:after:w-full">
                        initialize_conversation.js
                      </span>
                    </a>
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

// Export component directly
export const ContactCTA = ContactCTAComponent;
</file>

<file path="src/components/ScrollToTop.tsx">
'use client';

import { useState, useEffect, useRef } from 'react';
import { ArrowUp } from 'lucide-react';
import { Button } from '@/components/ui/button';

export function ScrollToTop() {
  const [isVisible, setIsVisible] = useState(false);
  const [scrollProgress, setScrollProgress] = useState(0);
  const animationFrameId = useRef<number | null>(null);

  useEffect(() => {
    const handleScroll = () => {
      if (animationFrameId.current) {
        cancelAnimationFrame(animationFrameId.current);
      }

      animationFrameId.current = requestAnimationFrame(() => {
        const scrolled = document.documentElement.scrollTop;
        const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
        const newProgress = height > 0 ? Math.round((scrolled / height) * 100) : 0;
        const newVisibility = scrolled > 300;

        setScrollProgress(newProgress);

        if (newVisibility !== isVisible) {
          setIsVisible(newVisibility);
        }
        
        animationFrameId.current = null;
      });
    };

    window.addEventListener('scroll', handleScroll, { passive: true });

    handleScroll();

    return () => {
      window.removeEventListener('scroll', handleScroll);
      if (animationFrameId.current) {
        cancelAnimationFrame(animationFrameId.current);
      }
    };
  }, [isVisible]);

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth',
    });
  };

  if (!isVisible) return null;

  return (
    <div
      className="fixed bottom-8 right-8 z-50 cursor-pointer group"
      onClick={scrollToTop}
      title="Click to scroll to top"
      aria-label="Scroll to top"
    >
      <div className="relative h-12 w-12">
        <svg
          className="absolute inset-0"
          viewBox="0 0 100 100"
        >
          {/* Background circle */}
          <circle
            className="text-muted stroke-current"
            strokeWidth="4"
            fill="transparent"
            r="44"
            cx="50"
            cy="50"
          />
          {/* Progress circle */}
          <circle
            className="text-primary stroke-current"
            strokeWidth="4"
            strokeLinecap="round"
            fill="transparent"
            r="44"
            cx="50"
            cy="50"
            transform="rotate(-90 50 50)"
            style={{
              strokeDasharray: 276.46,
              strokeDashoffset: 276.46 * (1 - scrollProgress / 100),
            }}
          />
          {/* Up arrow */}
          <g className="stroke-current text-foreground group-hover:text-primary transition-colors">
            <line
              x1="50"
              y1="65"
              x2="50"
              y2="35"
              strokeWidth="4"
              strokeLinecap="round"
            />
            <line
              x1="35"
              y1="50"
              x2="50"
              y2="35"
              strokeWidth="4"
              strokeLinecap="round"
            />
            <line
              x1="65"
              y1="50"
              x2="50"
              y2="35"
              strokeWidth="4"
              strokeLinecap="round"
            />
          </g>
        </svg>
      </div>
    </div>
  );
}
</file>

<file path="src/lib/data/portfolio.ts">
export interface PortfolioItem {
  slug: string;
  title: string;
  description: string;
  imageUrl: string;
  tags: string[];
  detailsUrl?: string;
  liveUrl?: string;
  githubUrl?: string;
  category: 'Games' | 'Machine Learning' | 'Publications' | 'Web';
  date?: string;
  isHighlighted?: boolean;
}

export const portfolioItems: PortfolioItem[] = [
  {
    slug: 'beatrex-ball',
    title: 'Beatrex Ball Game',
    description: 'A rhythm-based mobile game developed with Unity. Features dynamic gameplay that synchronizes with music beats for an immersive gaming experience. This project showcases my expertise in game mechanics, sound integration, and responsive UI design.',
    imageUrl: '/portfolio/games/beatrex-ball.jpg',
    tags: ['Unity', 'C#', 'Mobile Game', 'Rhythm', 'iOS', 'Android'],
    detailsUrl: '/portfolio/beatrex-ball',
    githubUrl: 'https://github.com/rishavnathpati/BeatRex-Ball',
    category: 'Games',
    date: '2023-06-15',
    isHighlighted: true
  },
  {
    slug: 'itch-io-collection',
    title: 'Collection of games on Itch.io',
    description: 'A diverse collection of games published on the Itch.io platform, showcasing various game mechanics and design principles implemented across different projects. These games demonstrate my versatility in developing across various genres from casual to educational games.',
    imageUrl: '/portfolio/games/itch-io-collection.jpg',
    tags: ['Unity', 'C#', 'Game Design', 'Game Development', 'Casual Games', 'Hyper-casual'],
    detailsUrl: '/portfolio/itch-io-collection',
    liveUrl: 'https://rishavnathpati.itch.io/',
    category: 'Games',
    date: '2023-05-20',
    isHighlighted: false
  },
  {
    slug: 'journey-under-the-sea',
    title: 'Journey Under the Sea Game',
    description: 'An immersive underwater adventure game with stunning visuals and engaging gameplay that takes players on an exploration journey beneath the ocean. This project highlights my ability to create atmospheric environments and engaging player experiences.',
    imageUrl: '/portfolio/games/journey-under-the-sea.jpg',
    tags: ['Unity', 'C#', 'Game Development', '3D', 'Adventure', 'Immersive Experience'],
    detailsUrl: '/portfolio/journey-under-the-sea',
    category: 'Games',
    date: '2023-02-10',
    isHighlighted: false
  },
  {
    slug: 'hand-gesture-gui',
    title: 'Hand Gesture Controlled GUI',
    description: 'Computer vision project utilizing MediaPipe and OpenCV to create a real-time hand gesture recognition system that allows controlling graphical interfaces with hand movements. This project demonstrates my expertise in combining computer vision with interactive applications.',
    imageUrl: '/portfolio/ml/hand-gesture-gui.jpg',
    tags: ['Python', 'OpenCV', 'MediaPipe', 'Computer Vision', 'HCI', 'Machine Learning'],
    detailsUrl: '/portfolio/hand-gesture-gui',
    githubUrl: 'https://github.com/rishavnathpati/Hand-Gesture-Control',
    category: 'Machine Learning',
    date: '2023-04-15',
    isHighlighted: true
  },
  {
    slug: 'yoga-asana-trainer',
    title: 'Yoga Asana Trainer',
    description: 'AI-powered application that guides users through yoga poses and provides real-time feedback on posture and alignment using computer vision and pose estimation techniques. This project combines my interest in wellness with technical expertise in machine learning.',
    imageUrl: '/portfolio/ml/yoga-asana-trainer.jpg',
    tags: ['Python', 'TensorFlow', 'MediaPipe', 'AI', 'Fitness Tech', 'Pose Estimation'],
    detailsUrl: '/portfolio/yoga-asana-trainer',
    githubUrl: 'https://github.com/rishavnathpati/Yoga-Asana-Trainer',
    category: 'Machine Learning',
    date: '2022-11-28',
    isHighlighted: false
  },
  {
    slug: 'brain-tumor-segmentation',
    title: 'Brain Tumor Extraction Publication',
    description: 'Research publication on brain tumor segmentation using U-Net architecture for automated detection and segmentation of tumors in MRI scans, improving diagnostic accuracy. This paper highlights my ability to apply deep learning techniques to solve complex medical imaging problems.',
    imageUrl: '/portfolio/publications/brain-tumor-publication.jpg',
    tags: ['Deep Learning', 'U-Net', 'Medical Imaging', 'Python', 'Research', 'Publication'],
    detailsUrl: '/portfolio/brain-tumor-publication',
    category: 'Publications',
    date: '2023-03-20',
    isHighlighted: true
  },
  {
    slug: 'convai-integration',
    title: 'Conversational AI in Unity',
    description: 'Developed end-to-end speech solutions and integrated conversational AI within Unity environments. This project showcases my work at Convai, where I designed and implemented AI-driven interactive character systems using gRPC networking and advanced prompt engineering.',
    imageUrl: '/portfolio/games/convai-integration.jpg',
    tags: ['Unity', 'C#', 'AI', 'Conversational AI', 'gRPC', 'Speech Recognition'],
    detailsUrl: '/portfolio/convai-integration',
    category: 'Games',
    date: '2023-09-15',
    isHighlighted: true
  },
];
export const highlightedPortfolioItems: PortfolioItem[] = portfolioItems.filter(item => item.isHighlighted);
</file>

<file path="src/lib/data/skills.ts">
export interface Skill {
  name: string;
  level?: number;  // 1-5 for proficiency level
  icon?: string;   // For custom icons or emoji representations
  description?: string;  // Skill description for tooltips
  xp?: number;     // Experience points (percentage to next level)
}

export interface SkillCategory {
  title: string;
  icon: string;    // Terminal command or category identifier
  description: string;  // Category description
  skills: Skill[];
}

export const skillCategories: SkillCategory[] = [
  {
    title: 'Core Development',
    icon: 'main.cs',
    description: 'Primary development skills and tools',
    skills: [
      { 
        name: 'Unity 3D/2D/AR/VR',
        level: 3,
        icon: '🎮',
        description: 'Expert in Unity game engine, including 2D/3D development, AR/VR, and custom tooling',
        xp: 60
      },
      { 
        name: 'C#',
        level: 3,
        description: 'Advanced C# programming with focus on game development and system architecture',
        xp: 50
      },
      { 
        name: 'Java',
        level: 3,
        icon: '☕',
        description: 'Java programming with focus on application development',
        xp: 55
      },
      { 
        name: 'Design Patterns and Principles',
        level: 3,
        description: 'Implementation of software design patterns and best practices',
        xp: 55
      },
      { 
        name: 'Software Architecture',
        level: 3,
        description: 'System design, patterns, and scalable architecture',
        xp: 50
      },
      { 
        name: 'Problem Solving',
        level: 5,
        description: 'Algorithmic thinking and complex problem resolution',
        xp: 95
      },
    ],
  },
  {
    title: 'Data & AI',
    icon: 'ai.py',
    description: 'Artificial Intelligence and Machine Learning',
    skills: [
      { 
        name: 'Python',
        level: 3,
        icon: '🐍',
        description: 'Python programming for AI/ML applications and data science',
        xp: 55
      },
      { 
        name: 'Machine Learning / Deep Learning',
        level: 2,
        icon: '🤖',
        description: 'Machine learning and deep learning concepts and applications',
        xp: 35
      },
      { 
        name: 'TensorFlow',
        level: 2,
        icon: '🧠',
        description: 'Machine learning framework for AI development',
        xp: 35
      },
      { 
        name: 'OpenCV',
        level: 3,
        icon: '👁️',
        description: 'Computer vision and image processing',
        xp: 70
      },
    ],
  },
  {
    title: 'Web Development',
    icon: 'web.config',
    description: 'Modern web development stack',
    skills: [
      { 
        name: 'Git',
        level: 3,
        icon: '🔄',
        description: 'Version control and collaboration workflows',
        xp: 50
      },
      { 
        name: 'React',
        level: 4,
        icon: '⚛️',
        description: 'Component-based UI development with React ecosystem',
        xp: 85
      },
      { 
        name: 'Next.js',
        level: 4,
        description: 'Full-stack React framework with SSR/SSG capabilities',
        xp: 75
      },
      { 
        name: 'Node.js',
        level: 3,
        description: 'Server-side JavaScript runtime and API development',
        xp: 65
      },
      { 
        name: 'HTML/CSS',
        level: 4,
        description: 'Semantic markup and modern CSS techniques',
        xp: 90
      },
      { 
        name: 'Tailwind',
        level: 4,
        description: 'Utility-first CSS framework for rapid UI development',
        xp: 85
      },
    ],
  },
  {
    title: 'XR Development',
    icon: 'xr.unity',
    description: 'Extended Reality and immersive experiences',
    skills: [
      { 
        name: 'AR Foundation',
        level: 4,
        icon: '📱',
        description: 'Cross-platform AR development with Unity',
        xp: 80
      },
      { 
        name: 'XR Toolkit',
        level: 4,
        icon: '🥽',
        description: 'Virtual and mixed reality development tools',
        xp: 75
      },
      { 
        name: 'Conversational AI',
        level: 3,
        description: 'Integration of AI-powered conversation systems',
        xp: 60
      },
      { 
        name: 'gRPC',
        level: 3,
        description: 'High-performance RPC framework for services',
        xp: 65
      },
    ],
  },
];
</file>

<file path="package.json">
{
  "name": "my-portfolio",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "npm run sitemap && next build",
    "start": "next start",
    "lint": "next lint",
    "sitemap": "node ./scripts/generate-sitemap.mjs"
  },
  "dependencies": {
    "@mdx-js/loader": "^3.1.0",
    "@mdx-js/react": "^3.1.0",
    "@next/mdx": "^15.2.4",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-toast": "^1.2.6",
    "@tailwindcss/typography": "^0.5.16",
    "@types/mdx": "^2.0.13",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^12.6.5",
    "geist": "^1.3.1",
    "gray-matter": "^4.0.3",
    "lucide-react": "^0.485.0",
    "next": "15.2.4",
    "next-mdx-remote": "^5.0.0",
    "next-themes": "^0.4.6",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "rehype-pretty-code": "^0.13.2",
    "remark-gfm": "^4.0.1",
    "shiki": "^1.29.2",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7",
    "typed.js": "^2.1.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.4",
    "globby": "^14.1.0",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
</file>

<file path="src/app/blog/[slug]/page.tsx">
import { getPostData, getAllPostSlugs } from '@/lib/blog';
import { notFound } from 'next/navigation';
import { Metadata } from 'next';
import Link from 'next/link';
import Image from 'next/image'; // Import Image
import { MDXRemote } from 'next-mdx-remote/rsc';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { CalendarDays, Clock, ArrowLeft } from 'lucide-react';
import rehypePrettyCode from 'rehype-pretty-code';
import { ProseTerminal } from '@/components/ui/prose-terminal';

// Import individual MDX components directly
import { Card as MdxCard } from '@/components/ui/mdx/Card'; // Alias to avoid naming conflict
import { Note } from '@/components/ui/mdx/Note';
import { Steps, Step } from '@/components/ui/mdx/Steps';
// Import Lucide icons used within MDX (Corrected: Wrench, Plug)
import { Terminal, Package, Shell, Wrench, Plug } from 'lucide-react';
  
  type Props = {
  params: { slug: string };
};

// Generate static paths for all blog posts
export async function generateStaticParams() {
  const paths = getAllPostSlugs();
  // Ensure the returned format matches { slug: string }[]
  return paths.map(path => ({ slug: path.params.slug }));
}

// Generate metadata for the page
export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const post = await getPostData(params.slug);

  if (!post) {
    return { title: 'Post Not Found' };
  }

  // Use NEXT_PUBLIC_SITE_URL for base URL if available
  const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000';
  const ogImageUrl = post.imageUrl.startsWith('/') ? `${siteUrl}${post.imageUrl}` : post.imageUrl;


  return {
    metadataBase: new URL(siteUrl), // Set metadataBase
    title: `${post.title} | Rishav Nath Pati Blog`,
    description: post.excerpt,
    openGraph: {
      title: post.title,
      description: post.excerpt,
      url: `/blog/${params.slug}`, // Add URL
      images: [{ url: ogImageUrl, alt: post.title }],
      type: 'article',
      publishedTime: post.date,
      authors: ['Rishav Nath Pati'],
      tags: post.tags,
    },
    twitter: {
      card: 'summary_large_image',
      title: post.title,
      description: post.excerpt,
      images: [ogImageUrl],
    },
  };
}

// Helper function
const formatDate = (dateString: string): string => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

// Define types for rehype plugins
type RehypePlugin = any;
type RehypePluginWithOptions<T> = [RehypePlugin, T];

// Type for rehype-pretty-code options
interface PrettyCodeOptions {
  theme: string;
  keepBackground: boolean;
}

// Options for rehype-pretty-code
const prettyCodeOptions: PrettyCodeOptions = {
  theme: 'one-dark-pro', // Or your preferred theme
  keepBackground: true,
};

export default async function BlogPostPage({ params }: Props) {
  const post = await getPostData(params.slug);

  if (!post) {
     notFound();
   }
 
    // Define the components mapping for MDXRemote
    const components = {
      Card: MdxCard, // Use the aliased import
      Note,
      Steps,
      Step,
      // Add Lucide icons used in MDX
      Terminal,
      Package,
      Shell,
      Wrench,
      Plug,
      // Add any other default HTML elements you want to override or style here
      // e.g., img: (props) => <Image {...props} />,
    };
  
    return (
     <div className="container mx-auto px-4 py-16 lg:py-24 max-w-4xl">
      {/* Back Button */}
      <div className="mb-8">
        <Button variant="outline" size="sm" asChild className="font-mono">
          <Link href="/blog">
            <ArrowLeft className="mr-2 h-4 w-4" /> Back to Blog
          </Link>
        </Button>
      </div>

      <article>
        {/* Header Section */}
        <header className="mb-10 border-b border-border pb-8">
          <h1 className="text-4xl lg:text-5xl font-bold mb-4 font-mono text-foreground leading-tight">
            {post.title}
          </h1>
          <div className="flex flex-wrap items-center gap-x-6 gap-y-2 text-sm text-muted-foreground mb-4 font-mono">
            <span className="flex items-center gap-1.5">
              <CalendarDays className="w-4 h-4" /> {formatDate(post.date)}
            </span>
            {post.readTimeMinutes && (
              <span className="flex items-center gap-1.5">
                <Clock className="w-4 h-4" /> {post.readTimeMinutes} min read
              </span>
            )}
          </div>
          <div className="flex flex-wrap gap-2">
            {post.tags?.map((tag) => (
              <Badge key={tag} variant="outline" className="font-mono text-xs">{tag}</Badge>
            ))}
          </div>
        </header>

        {/* MDX Content Area */}
        <ProseTerminal className="
           prose-code:before:content-none prose-code:after:content-none
           prose-pre:my-8 prose-pre:rounded-lg prose-pre:shadow-lg
           prose-img:rounded-lg prose-img:shadow-md">
          <MDXRemote
            source={post.content}
            options={{
              mdxOptions: {
                remarkPlugins: [], // Add remark plugins if needed
                rehypePlugins: [[rehypePrettyCode, prettyCodeOptions] as RehypePluginWithOptions<PrettyCodeOptions>],
              },
             }}
             // Pass the correctly defined components object
             components={components}
           />
         </ProseTerminal>
      </article>
    </div>
  );
}
</file>

<file path="src/app/portfolio/page.tsx">
import Link from 'next/link';
import Image from 'next/image';
import { Metadata } from 'next';
import { Suspense } from 'react'; // Import Suspense
 import { PortfolioCardSkeleton } from '@/components/PortfolioCardSkeleton'; // Import Skeleton
 import {
   Card,
   CardContent,
   CardDescription,
   CardFooter,
   CardHeader,
   CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { portfolioItems } from "@/lib/data/portfolio";
import { ArrowRight, Github, ExternalLink } from 'lucide-react';

// Define the PortfolioGrid component containing the mapping logic
 function PortfolioGrid() {
   return (
     <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
       {portfolioItems.map((item, index) => (
         <Card
           key={item.slug}
           className="flex flex-col overflow-hidden transition-transform duration-300 ease-in-out hover:-translate-y-1 hover:shadow-lg bg-black/30 border border-border group"
         >
          <CardHeader className="p-0">
            <Link href={item.detailsUrl ?? '#'} aria-label={`View details for ${item.title}`}>
              <div className="aspect-video overflow-hidden">
                <Image
                  src={item.imageUrl}
                  alt={item.title}
                  width={600}
                  height={338}
                  className="object-cover w-full h-full transition-transform duration-300 ease-in-out group-hover:scale-105"
                  loading="lazy" // Keep lazy loading for items on this page
                  sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                />
              </div>
             </Link>
           </CardHeader>
           <CardContent className="flex-grow p-5">
             {/* Changed font */}
             <CardTitle className="text-xl font-semibold mb-2 font-mono group-hover:text-primary transition-colors">
               <Link href={item.detailsUrl ?? '#'}>
                 {item.title}
              </Link>
            </CardTitle>
            {/* Changed font and text color */}
            <CardDescription className="text-foreground mb-4 text-sm line-clamp-3 font-mono">
              {item.description}
             </CardDescription>
             <div className="flex flex-wrap gap-2">
               {item.tags.slice(0, 4).map((tag) => (
                 /* Changed variant and added font */
                 <Badge key={tag} variant="outline" className="font-mono text-xs">
                   {tag}
                 </Badge>
               ))}
               {/* Changed variant and added font */}
               {item.tags.length > 4 && <Badge variant="outline" className="font-mono text-xs">...</Badge>}
             </div>
           </CardContent>
           <CardFooter className="p-5 bg-black/30 border-t border-border flex justify-between items-center">
             {item.detailsUrl ? (
               <Button variant="ghost" size="sm" asChild>
                 {/* Added font-mono */}
                 <Link href={item.detailsUrl} className="text-sm font-mono">
                   Details <ArrowRight className="ml-1 h-4 w-4" />
                 </Link>
              </Button>
            ) : <div></div>}
            <div className="flex items-center space-x-2">
              {item.githubUrl && (
                <Button variant="outline" size="icon" className="h-8 w-8" asChild>
                  <a href={item.githubUrl} target="_blank" rel="noopener noreferrer" aria-label="GitHub Repository">
                    <Github className="h-4 w-4" />
                  </a>
                </Button>
              )}
              {item.liveUrl && (
                <Button variant="outline" size="icon" className="h-8 w-8" asChild>
                  <a href={item.liveUrl} target="_blank" rel="noopener noreferrer" aria-label="Live Demo">
                    <ExternalLink className="h-4 w-4" />
                  </a>
                </Button>
              )}
             </div>
           </CardFooter>
         </Card>
       ))}
     </div>
  );
}

export const metadata: Metadata = {
  title: 'Portfolio | Rishav Nath Pati',
  description: 'Explore the full portfolio of games, machine learning projects, and publications by Rishav Nath Pati.',
};

 export default function PortfolioPage() {
   return (
     <div className="container mx-auto px-4 py-16 lg:py-24">
       <div className="max-w-3xl mx-auto text-center mb-12 lg:mb-16">
         {/* Changed font */}
         <h1 className="text-4xl lg:text-5xl font-bold mb-4 font-mono text-foreground">
           My Portfolio
         </h1>
         {/* Changed font and text color */}
         <p className="text-lg lg:text-xl text-foreground leading-relaxed font-mono">
           A collection of projects demonstrating my skills across game development, machine learning, interactive media, and research.
         </p>
      </div>

      {/* Wrap the grid in Suspense */}
      <Suspense fallback={<PortfolioSkeletonFallback />}>
        <PortfolioGrid />
      </Suspense>
    </div>
  );
}

// Fallback component displaying multiple skeletons
function PortfolioSkeletonFallback() {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {Array.from({ length: 6 }).map((_, index) => (
        <PortfolioCardSkeleton key={index} />
      ))}
    </div>
  );
}
</file>

<file path="src/components/sections/BlogHighlights.tsx">
import Link from 'next/link';
import { Button } from "@/components/ui/button";
import { BlogPostMeta } from "@/lib/blog";
import { ArrowRight, BookOpen, Terminal } from 'lucide-react';
import BlogCard from './blog/BlogCard';

interface BlogHighlightsProps {
  recentPosts: BlogPostMeta[];
}

function BlogHighlightsComponent({ recentPosts }: BlogHighlightsProps) {
  return (
    <section id="blogs" className="py-20 lg:py-28 bg-black/20 backdrop-blur-sm">
      <div className="container mx-auto px-4">
        <div className="max-w-4xl mx-auto mb-12">
          {/* Section Header */}
          <div className="flex items-center gap-3 mb-6 group">
            <BookOpen className="w-6 h-6 text-primary group-hover:scale-110 transition-transform" />
            <h2 className="text-2xl font-bold font-mono text-foreground group-hover:text-primary transition-colors">
              blog
            </h2>
          </div>

          {/* Main Content Card */}
          <div className="bg-black/30 rounded-lg border border-border p-6 hover:border-primary/50 transition-colors">
            {/* Primary terminal command */}
            <div className="flex items-center gap-2 mb-6 text-muted-foreground group">
              <Terminal size={18} className="group-hover:text-primary transition-colors" />
              <span className="font-mono text-sm group-hover:text-primary transition-colors">$ cat tech_blog.md</span>
            </div>
            
            {/* Secondary terminal command */}
            <div className="flex items-center gap-2 mb-6 text-muted-foreground group">
              <Terminal size={18} className="group-hover:text-primary transition-colors" />
              <span className="font-mono text-sm group-hover:text-primary transition-colors">$ ls recent_posts/</span>
            </div>

            {/* Grid for Blog Post Cards */}
            <div className="grid grid-cols-1 gap-6">
              {recentPosts.map((post) => (
                <BlogCard key={post.slug} post={post} />
              ))}
            </div>

            {/* View All Button */}
            <div className="mt-8 text-center">
              <Button
                size="lg"
                className="font-mono transition-transform hover:scale-105"
                asChild
              >
                <Link href="/blog">
                  $ cd ./all_posts <ArrowRight className="ml-2 h-5 w-5" />
                </Link>
              </Button>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

export const BlogHighlights = BlogHighlightsComponent;
</file>

<file path="src/components/sections/ExperienceSection.tsx">
import React from 'react';
import { Briefcase, Terminal, GraduationCap, Calendar } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import {
  professionalExperience,
  education,
  professionalSummary,
  type ExperienceItem,
  type EducationItem
} from '@/lib/data/experience';

// Experience Item component
function ExperienceItem({ experience }: { experience: ExperienceItem }) {
  return (
    <div className="border-l border-border pl-5 relative group">
      <div className="absolute w-2 h-2 bg-primary rounded-full -left-1 top-2 transition-transform group-hover:scale-125"></div>
      <div className="flex flex-col sm:flex-row sm:justify-between mb-2">
        <h4 className="text-lg font-semibold text-foreground font-mono group-hover:text-primary transition-colors">
          {experience.title}
        </h4>
        <div className="flex items-center text-sm text-primary">
          <Calendar className="w-3 h-3 mr-1" />
          <span>{experience.period}</span>
        </div>
      </div>
      <div className="text-sm text-muted-foreground mb-2">
        {experience.company} | {experience.location}
      </div>
      <ul className="list-disc pl-4 space-y-1 mb-3 text-sm font-mono text-foreground">
        {experience.description.map((desc, i) => (
          <li key={i} className="transition-colors hover:text-primary">{desc}</li>
        ))}
      </ul>
      {experience.skills && (
        <div className="flex flex-wrap gap-2 mt-3">
          {experience.skills.map((skill) => (
            <Badge
              key={skill}
              variant="outline"
              className="text-xs font-mono transition-colors hover:bg-primary/10"
            >
              {skill}
            </Badge>
          ))}
        </div>
      )}
    </div>
  );
}

// Education Item component
function EducationItem({ education }: { education: EducationItem }) {
  return (
    <div className="border-l border-border pl-5 relative group">
      <div className="absolute w-2 h-2 bg-primary rounded-full -left-1 top-2 transition-transform group-hover:scale-125"></div>
      <div className="flex flex-col sm:flex-row sm:justify-between mb-2">
        <h4 className="text-lg font-semibold text-foreground font-mono group-hover:text-primary transition-colors">
          {education.degree}
        </h4>
        <div className="flex items-center text-sm text-primary">
          <Calendar className="w-3 h-3 mr-1" />
          <span>{education.period}</span>
        </div>
      </div>
      <div className="text-sm text-muted-foreground mb-2">
        {education.institution} | {education.location}
      </div>
      <p className="text-sm font-mono transition-colors hover:text-primary">
        {education.description}
      </p>
    </div>
  );
}

function ExperienceSectionComponent() {
  // Use data directly - these are static imports that don't change

  return (
    <section id="experience" className="py-20 lg:py-28 bg-black/20 backdrop-blur-sm">
      <div className="container mx-auto px-4">
        <div className="max-w-4xl mx-auto">
          <div className="flex items-center gap-3 mb-8 group">
            <Terminal className="w-6 h-6 text-primary group-hover:scale-110 transition-transform" />
            <h2 className="text-2xl font-bold font-mono text-foreground group-hover:text-primary transition-colors">
              experience
            </h2>
          </div>

          <div className="bg-black/40 rounded-lg border border-border p-6 mb-12 hover:border-primary/50 transition-colors">
            <div className="flex items-center gap-2 mb-6 group">
              <Terminal size={18} className="group-hover:text-primary transition-colors" />
              <span className="font-mono text-sm group-hover:text-primary transition-colors">$ cat resume.md</span>
            </div>

            <div className="space-y-8 text-foreground font-mono">
              <div className="bg-black/20 rounded-lg border border-border/50 p-4 group hover:border-primary/50 transition-colors">
                <p className="leading-relaxed group-hover:text-primary transition-colors">
                  {professionalSummary}
                </p>
              </div>

              {/* Professional Experience */}
              <div>
                <div className="flex items-center gap-2 mb-6 group">
                  <Briefcase className="w-5 h-5 text-primary group-hover:scale-110 transition-transform" />
                  <h3 className="text-xl font-bold font-mono text-foreground group-hover:text-primary transition-colors">
                    Professional Experience
                  </h3>
                </div>
                <div className="space-y-8">
                  {professionalExperience.map((exp, index) => (
                    <ExperienceItem key={index} experience={exp} />
                  ))}
                </div>
              </div>

              {/* Education */}
              <div>
                <div className="flex items-center gap-2 mb-6 group">
                  <GraduationCap className="w-5 h-5 text-primary group-hover:scale-110 transition-transform" />
                  <h3 className="text-xl font-bold font-mono text-foreground group-hover:text-primary transition-colors">
                    Education
                  </h3>
                </div>
                <div className="space-y-8">
                  {education.map((edu, index) => (
                    <EducationItem key={index} education={edu} />
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

// Export component directly
export const ExperienceSection = ExperienceSectionComponent;
</file>

<file path="src/components/sections/PortfolioHighlights.tsx">
'use client';

import { useState, memo } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardHeader,
  CardContent,
  CardFooter,
  CardTitle,
  CardDescription
} from "@/components/ui/card";
import { highlightedPortfolioItems } from "@/lib/data/portfolio";
import { ArrowRight, Github, ExternalLink, FolderGit2, GitBranch, Star, GitFork, ChevronDown, ChevronUp, Terminal } from 'lucide-react';

// Memoized portfolio card component
const PortfolioCard = memo(function PortfolioCard({ 
  item, 
  isExpanded, 
  onToggle 
}: { 
  item: typeof highlightedPortfolioItems[0];
  isExpanded: boolean;
  onToggle: () => void;
}) {
  return (
    <Card
      className={`overflow-hidden transition-all duration-300 ${
        isExpanded ? 'md:col-span-2' : ''
      } hover:border-primary/50 bg-black/20 border-border/50`}
    >
      <div
        className="border-b border-border/50 cursor-pointer transition-colors hover:bg-black/30"
        onClick={onToggle}
      >
        <CardHeader className="p-4">
          <div className="flex items-start justify-between gap-4">
            <div className="flex-grow">
              <div className="flex items-center gap-2 mb-2">
                <GitBranch className="w-4 h-4 text-primary" />
                <CardTitle className="font-mono text-lg text-foreground hover:text-primary transition-colors">
                  {item.title}
                </CardTitle>
              </div>
              <CardDescription className={`text-sm text-foreground font-mono transition-all duration-300 ${
                isExpanded ? 'line-clamp-none' : 'line-clamp-2'
              }`}>
                {item.description}
              </CardDescription>
            </div>
            <div className="flex flex-col items-end gap-3">
              <div className="flex items-center gap-3 text-foreground">
                <div className="flex items-center gap-1">
                  <Star className="w-4 h-4" />
                  <span className="text-sm font-mono">24</span>
                </div>
                <div className="flex items-center gap-1">
                  <GitFork className="w-4 h-4" />
                  <span className="text-sm font-mono">8</span>
                </div>
              </div>
              <div className="transition-transform duration-300">
                {isExpanded ? (
                  <ChevronUp className="w-4 h-4 text-primary" />
                ) : (
                  <ChevronDown className="w-4 h-4 text-muted-foreground" />
                )}
              </div>
            </div>
          </div>
        </CardHeader>
      </div>

      {/* Expandable content with smooth height transition */}
      <div
        className={`transition-[max-height,opacity] duration-300 ease-in-out overflow-hidden ${
          isExpanded ? 'max-h-[1000px] opacity-100' : 'max-h-0 opacity-0'
        }`}
      >
        <div className="aspect-video overflow-hidden border-b border-border/50">
          <Image
            src={item.imageUrl}
            alt={item.title}
            width={800}
            height={450}
            className="object-cover w-full h-full transition-transform duration-300 hover:scale-105"
            priority={isExpanded}
            loading={isExpanded ? undefined : "lazy"}
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 800px"
            quality={75}
          />
        </div>
        <CardContent className="p-4">
          <div className="flex flex-wrap gap-2 mb-4">
            {item.tags.map((tag) => (
              <Badge
                key={tag}
                variant="outline"
                className="font-mono text-xs transition-colors hover:bg-primary/10"
              >
                {tag}
              </Badge>
            ))}
          </div>
        </CardContent>
        <CardFooter className="p-4 flex justify-between items-center">
          <Button
            variant="ghost"
            size="sm"
            asChild
            className="font-mono text-xs hover:bg-primary/10"
          >
            <Link href={item.detailsUrl || '#'}>
              view_details.md <ArrowRight className="ml-1 h-3 w-3" />
            </Link>
          </Button>
          <div className="flex items-center gap-2">
            {item.githubUrl && (
              <Button
                variant="outline"
                size="icon"
                className="h-8 w-8 transition-colors hover:border-primary"
                asChild
              >
                <a
                  href={item.githubUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  aria-label="GitHub Repository"
                >
                  <Github className="h-4 w-4" />
                </a>
              </Button>
            )}
            {item.liveUrl && (
              <Button
                variant="outline"
                size="icon"
                className="h-8 w-8 transition-colors hover:border-primary"
                asChild
              >
                <a
                  href={item.liveUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  aria-label="Live Demo"
                >
                  <ExternalLink className="h-4 w-4" />
                </a>
              </Button>
            )}
          </div>
        </CardFooter>
      </div>
    </Card>
  );
});

function PortfolioHighlightsComponent() {
  const [expandedItem, setExpandedItem] = useState<string | null>(null);
  
  // Use data directly - these are static imports that don't change

  return (
    <section id="portfolio" className="py-20 lg:py-28 bg-black/20 backdrop-blur-sm">
      <div className="container mx-auto px-4">
        <div className="max-w-4xl mx-auto mb-12">
          <div className="flex items-center gap-3 mb-6">
            <FolderGit2 className="w-6 h-6 text-primary" />
            <h2 className="text-2xl font-bold font-mono text-foreground">
              portfolio
            </h2>
          </div>

          <div className="bg-black/30 rounded-lg border border-border p-6">
            {/* Terminal-like header */}
            <div className="flex items-center gap-2 mb-6 text-muted-foreground group">
              <Terminal size={18} className="group-hover:text-primary transition-colors" />
              <span className="font-mono text-sm group-hover:text-primary transition-colors">$ ls featured_repos</span>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {highlightedPortfolioItems.map((item) => (
                <PortfolioCard
                  key={item.slug}
                  item={item}
                  isExpanded={expandedItem === item.slug}
                  onToggle={() => setExpandedItem(expandedItem === item.slug ? null : item.slug)}
                />
              ))}
            </div>

            <div className="mt-8 text-center">
              <Button 
                size="lg" 
                className="font-mono transition-transform hover:translate-x-1" 
                asChild
              >
                <Link href="/portfolio">
                  $ cd ./all_projects <ArrowRight className="ml-2 h-5 w-5" />
                </Link>
              </Button>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

// Keep the PortfolioCard memoized as it's used in a list and has complex rendering
// But the parent component doesn't need memoization since it has its own state management
export const PortfolioHighlights = PortfolioHighlightsComponent;
</file>

<file path="src/components/sections/AboutSection.tsx">
import React from 'react';
import { Terminal } from "lucide-react";
import { aboutData, type Competency } from '@/lib/data/about';

// Competency component
function CompetencyItem({ competency }: { competency: Competency }) {
  return (
    <li className="group transition-transform hover:translate-x-1">
      <div className="flex items-start gap-2 group-hover:bg-primary/5 p-2 rounded-lg transition-colors">
        <span className="text-primary group-hover:scale-110 transition-transform">•</span>
        <span className="group-hover:text-primary transition-colors">{competency.text}</span>
      </div>
    </li>
  );
}

function AboutSectionComponent() {
  // Use data directly - these are static imports that don't change
  const { paragraphs, competencies } = aboutData;

  return (
    <section id="about" className="py-20 lg:py-28 bg-black/20 backdrop-blur-sm">
      <div className="container mx-auto px-4">
        <div className="max-w-4xl mx-auto">
          {/* Header - Using a more generic section title */}
          <div className="flex items-center gap-3 mb-8 group">
            <Terminal className="w-6 h-6 text-primary group-hover:scale-110 transition-transform" />
            <h2 className="text-2xl font-bold font-mono text-foreground group-hover:text-primary transition-colors">
              about_me
            </h2>
          </div>

          {/* Content */}
          <div className="bg-black/30 rounded-lg border border-border p-8 hover:border-primary/50 transition-colors">
            {/* Terminal-like header inside the box */}
            <div className="flex items-center gap-2 mb-6 text-muted-foreground group">
              <Terminal size={18} className="group-hover:text-primary transition-colors" />
              <span className="font-mono text-sm group-hover:text-primary transition-colors">$ cat about.md</span>
            </div>
            <div className="space-y-6 font-mono">
              {/* Paragraphs */}
              {paragraphs.map((text, index) => (
                <p 
                  key={index}
                  className="group"
                >
                  <span className="block p-2 rounded-lg transition-colors group-hover:bg-primary/5 group-hover:text-primary">
                    {text}
                  </span>
                </p>
              ))}

              {/* Competencies */}
              <div className="mt-12">
                <h3 className="text-lg font-bold mb-4 text-primary group flex items-center gap-2">
                  <span className="group-hover:rotate-3 transition-transform inline-block">$</span>
                  <span className="group-hover:text-primary/80 transition-colors">key_competencies</span>
                </h3>
                <ul className="space-y-4">
                  {competencies.map((competency, index) => (
                    <CompetencyItem key={index} competency={competency} />
                  ))}
                </ul>
              </div>

              {/* Download CV Button */}
              <div className="mt-8">
                <a
                  href="/cv.pdf"
                  download
                  className="inline-flex items-center px-4 py-2 bg-primary/10 hover:bg-primary/20 border border-primary/20 rounded-lg transition-all hover:scale-105 hover:shadow-lg group gap-2"
                >
                  <span className="font-mono text-sm group-hover:text-primary transition-colors">
                    cv.pdf
                  </span>
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

// Export component directly
export const AboutSection = AboutSectionComponent;
</file>

<file path="src/components/sections/HeroSection.tsx">
'use client';

import { memo, useRef, useCallback, useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { ArrowDown, Terminal, Gamepad2 } from 'lucide-react';
import { typedStrings } from '@/lib/data/hero';
import Typed from 'typed.js';

// Memoized button component
const ActionButton = memo(function ActionButton({ 
  href, 
  variant = 'default',
  children 
}: { 
  href: string;
  variant?: 'default' | 'outline';
  children: React.ReactNode;
}) {
  return (
    <Button 
      asChild 
      variant={variant}
      size="lg" 
      className="font-mono relative overflow-hidden group"
    >
      <Link href={href}>
        <span className="relative z-10">{children}</span>
        <div className={`absolute inset-0 ${
          variant === 'default' ? 'bg-primary/10' : 'bg-primary/5'
        } transform translate-y-full group-hover:translate-y-0 transition-transform duration-200`} />
      </Link>
    </Button>
  );
});

function HeroSectionComponent() {
  const heroContentRef = useRef<HTMLDivElement>(null);
  const tiltRef = useRef<HTMLDivElement>(null);
  const typedElementRef = useRef<HTMLSpanElement>(null);
  const typedInstanceRef = useRef<Typed | null>(null);
  const [isHoveringGamepad, setIsHoveringGamepad] = useState(false);
  
  // Memoized hover handlers
  const handleGamepadEnter = useCallback(() => setIsHoveringGamepad(true), []);
  const handleGamepadLeave = useCallback(() => setIsHoveringGamepad(false), []);

  // Initialize Typed.js
  useEffect(() => {
    if (typedElementRef.current) {
      typedInstanceRef.current = new Typed(typedElementRef.current, {
        strings: typedStrings,
        typeSpeed: 70,
        backSpeed: 50,
        backDelay: 3000,
        startDelay: 1000,
        loop: true,
        smartBackspace: false,
      });
    }
    
    // Cleanup on unmount
    return () => {
      if (typedInstanceRef.current) {
        typedInstanceRef.current.destroy();
      }
    };
  }, []);
  
  // Manual tilt effect implementation
  const handleTiltMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {
    if (!tiltRef.current) return;
    
    const rect = tiltRef.current.getBoundingClientRect();
    const x = (e.clientX - rect.left) / rect.width - 0.5; // -0.5 to 0.5
    const y = (e.clientY - rect.top) / rect.height - 0.5; // -0.5 to 0.5
    
    tiltRef.current.style.transform = `perspective(1000px) rotateY(${x * 5}deg) rotateX(${-y * 5}deg) scale(1.02)`;
  }, []);
  
  const handleTiltMouseLeave = useCallback(() => {
    if (!tiltRef.current) return;
    tiltRef.current.style.transform = 'perspective(1000px) rotateY(0deg) rotateX(0deg) scale(1)';
  }, []);

  return (
    <section
      id="hero"
      className="min-h-screen w-full flex flex-col justify-center items-center px-4 relative overflow-hidden"
    >
      <div 
        ref={heroContentRef}
        className="z-10 max-w-4xl w-full backdrop-blur-sm" 
      >
        {/* Section Header */}
        <div className="flex items-center gap-3 mb-6 group">
          <Terminal className="w-6 h-6 text-primary group-hover:scale-110 transition-transform" />
          <h2 className="text-2xl font-bold font-mono text-foreground group-hover:text-primary transition-colors">
            home
          </h2>
        </div>
        
        <div 
          ref={tiltRef}
          className="bg-black/60 rounded-lg border border-border p-6 mb-8 relative overflow-hidden group hover:border-primary/50 transition-colors"
          onMouseMove={handleTiltMouseMove}
          onMouseLeave={handleTiltMouseLeave}
        >
          {/* Animated gradient background */}
          <div
            className="absolute inset-0 bg-gradient-to-br from-primary/10 to-transparent pointer-events-none transition-opacity group-hover:opacity-75"
            style={{
              maskImage: 'radial-gradient(circle at center, black, transparent)',
              WebkitMaskImage: 'radial-gradient(circle at center, black, transparent)'
            }}
          />
          
          <div className="relative">
            <div className="flex items-center gap-2 mb-4 text-foreground/80 group">
              <Terminal size={20} className="group-hover:text-primary transition-colors" />
              <span className="text-sm font-mono group-hover:text-primary transition-colors">portfolio.sh</span>
            </div>
            
            <div className="font-mono">
              <div className="flex items-center gap-2 mb-2 group">
                <p className="text-foreground/80 group-hover:text-primary transition-colors">$ whoami</p>
                <Gamepad2
                  size={20}
                  className={`text-primary transition-all duration-300 cursor-pointer ${
                    isHoveringGamepad ? 'rotate-12 scale-110' : ''
                  }`}
                  onMouseEnter={handleGamepadEnter}
                  onMouseLeave={handleGamepadLeave}
                />
              </div>
              <h1 className="text-3xl sm:text-4xl md:text-5xl font-bold mb-4 text-primary bg-clip-text hover:text-primary/90 transition-colors">
                Rishav Nath Pati
              </h1>
              <p className="text-foreground/80 mb-2 group-hover:text-primary transition-colors">$ current_role</p>
              <p className="text-lg sm:text-xl md:text-2xl mb-6 font-mono">
                I'm <span ref={typedElementRef} className="text-foreground"></span>
              </p>
              <p className="text-foreground/80 mb-2 group-hover:text-primary transition-colors">$ next_action</p>
              <div className="flex flex-col sm:flex-row gap-4">
                <div>
                  <ActionButton href="#portfolio">view_portfolio.sh</ActionButton>
                </div>
                <div>
                  <ActionButton href="#contact-cta" variant="outline">contact_me.sh</ActionButton>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="absolute bottom-10 left-1/2 transform -translate-x-1/2 z-10">
        <Link
          href="#about"
          aria-label="Scroll down to about section"
          className="group focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-background rounded-full p-1"
        >
          <ArrowDown className="w-6 h-6 text-foreground/80 group-hover:text-primary transition-colors animate-bounce-slow" />
        </Link>
      </div>
    </section>
  );
}

// Keep the ActionButton memoized as it's a simple UI component
// Keep the useCallback hooks as they're used for event handlers
// But the parent component doesn't need memoization as it's only rendered once
export const HeroSection = HeroSectionComponent;
</file>

<file path="src/components/sections/SkillsSection.tsx">
import { skillCategories } from "@/lib/data/skills";
import { Terminal } from "lucide-react";
import {
  AnimatedSkillCategory,
  AnimatedDescription,
  AnimatedTerminalCommand
} from "./skills/AnimatedSkillCategory";

function SkillsSectionComponent() {
  return (
    <section id="skills" className="py-20 lg:py-28 bg-black/20 backdrop-blur-sm relative">
      <div className="container mx-auto px-4">
        <div className="max-w-4xl mx-auto">
          <div className="flex items-center gap-3 mb-8">
            <Terminal className="w-6 h-6 text-primary" />
            <h2 className="text-2xl font-bold font-mono text-foreground">
              skills
            </h2>
          </div>

          <div className="bg-black/30 rounded-lg border border-border p-8 relative overflow-hidden">
            {/* Terminal commands */}
            <AnimatedTerminalCommand delay={0.1}>
              <div className="flex items-center gap-2 mb-6 text-muted-foreground group">
                <Terminal size={18} className="group-hover:text-primary transition-colors" />
                <span className="font-mono text-sm group-hover:text-primary transition-colors">$ cat tech_stack.json</span>
              </div>
            </AnimatedTerminalCommand>
            
            <AnimatedTerminalCommand delay={0.2}>
              <div className="flex items-center gap-2 mb-6 text-muted-foreground group">
                <Terminal size={18} className="group-hover:text-primary transition-colors" />
                <span className="font-mono text-sm group-hover:text-primary transition-colors">$ cat skills_overview.md</span>
              </div>
            </AnimatedTerminalCommand>

            {/* Description */}
            <AnimatedDescription>
              <p className="text-foreground leading-relaxed mb-10 font-mono">
                As a Game and Interactive Media Developer with over 5 years of experience in Computer Science and 3+ years
                specializing in Unity, I bring a wealth of expertise to mobile games, AR/VR, and beyond. My passion lies in
                crafting immersive experiences that captivate users through engaging gameplay, stunning visuals, and intuitive UI design.
              </p>
            </AnimatedDescription>

            {/* Skills grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-10">
              {skillCategories.map((category, index) => (
                <AnimatedSkillCategory
                  key={category.title}
                  category={category}
                  index={index}
                />
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

export const SkillsSection = SkillsSectionComponent;
</file>

<file path="src/components/Header.tsx">
'use client';

import { useState, useRef, useEffect } from 'react';
import { usePathname } from 'next/navigation';
import { useConsole } from '@/components/ui/console-provider';
import { Console } from '@/components/ui/console';
import { ProfileCard } from '@/components/header/ProfileCard';
import { NavigationLinks } from '@/components/header/NavigationLinks';
import { MobileNavToggle } from '@/components/header/MobileNavToggle';
import { useActiveSectionObserver } from '@/hooks/useActiveSectionObserver';
import { useKeyboardNavShortcuts } from '@/hooks/useKeyboardNavShortcuts';
import { useNavigationSound } from '@/hooks/useNavigationSound';
import { navItems, socialLinks } from '@/components/header/headerConstants';

export function Header() {
  const [isMobileNavOpen, setIsMobileNavOpen] = useState(false);
  const pathname = usePathname();
  const { log, success } = useConsole();
  const { playNavigationSound } = useNavigationSound();
  
  // Use our custom hooks
  const { activeSection } = useActiveSectionObserver(navItems);
  
  useKeyboardNavShortcuts({
    navItems,
    onNavigate: playNavigationSound
  });

  // Ref for the first navigation link to manage focus
  const firstNavLinkRef = useRef<HTMLAnchorElement>(null);
  
  // Handle focus trap in mobile navigation
  useEffect(() => {
    if (isMobileNavOpen) {
      // Set focus to the first navigation link when menu opens
      setTimeout(() => {
        if (firstNavLinkRef.current) {
          firstNavLinkRef.current.focus();
        }
      }, 100);
    }
  }, [isMobileNavOpen]);

  const toggleMobileNav = () => {
    setIsMobileNavOpen(!isMobileNavOpen);
  };

  const handleLinkClick = (e: React.MouseEvent<HTMLAnchorElement>, href: string, command: string) => {
    if (isMobileNavOpen) {
      setIsMobileNavOpen(false);
      log('Minimizing terminal');
    }

    success(`Executing: ${command}`);
    playNavigationSound();

    if (pathname !== '/' && href.startsWith('#')) {
      e.preventDefault();
      log('Redirecting to home directory');
      window.location.href = '/' + href;
    }
  };

  return (
    <>
      <MobileNavToggle 
        isOpen={isMobileNavOpen} 
        onToggle={toggleMobileNav} 
      />

      <header
        id="header"
        className={`fixed top-0 left-0 w-72 h-screen border-r border-border bg-black/30 backdrop-blur-sm transition-transform duration-300 z-50 ${
          isMobileNavOpen ? 'translate-x-0' : '-translate-x-full'
        } lg:translate-x-0`}
      >
        <div className="p-6 flex flex-col h-full">
          <ProfileCard socialLinks={socialLinks} />
          <NavigationLinks
            navItems={navItems}
            activeSection={activeSection}
            onLinkClick={handleLinkClick}
            firstNavLinkRef={firstNavLinkRef}
          />
          />
          
          {/* Render Console component here, pushed to the bottom */}
          <div className="mt-auto">
            <Console />
          </div>
        </div>
      </header>
    </>
  );
}
</file>

<file path="src/app/globals.css">
@import "tailwindcss";
 /* @import "tw-animate-css"; Removed - Package not found and likely replaced by tailwindcss-animate */

 @custom-variant dark (&:is(.dark *));

 /* Respect user's motion preferences */
 @media (prefers-reduced-motion: reduce) {

   *,
   ::before,
   ::after {
     animation-duration: 0.01ms !important;
     animation-iteration-count: 1 !important;
     transition-duration: 0.01ms !important;
     scroll-behavior: auto !important;
   }
 }

 /* Apply reduced motion when .reduce-motion class is present */
 .reduce-motion *:not(.force-animation) {
   animation: none !important;
   transition: none !important;
   transform: none !important;
 }

 /* Game dev-inspired animations */
 @keyframes fadeInOut {
   0% {
     opacity: 0;
     transform: translate(-50%, -50%) scale(0.95);
   }

   10% {
     opacity: 1;
     transform: translate(-50%, -50%) scale(1);
   }

   90% {
     opacity: 1;
     transform: translate(-50%, -50%) scale(1);
   }

   100% {
     opacity: 0;
     transform: translate(-50%, -50%) scale(0.95);
   }
 }

 @keyframes float {
   0% {
     transform: translateY(0px);
   }

   50% {
     transform: translateY(-10px);
   }

   100% {
     transform: translateY(0px);
   }
 }

 @keyframes spin {
   from {
     transform: rotate(0deg);
   }

   to {
     transform: rotate(360deg);
   }
 }

 @keyframes rainbow {
   0% {
     filter: hue-rotate(0deg);
   }

   100% {
     filter: hue-rotate(360deg);
   }
 }

 @keyframes pulse {
   0% {
     transform: scale(1);
     opacity: 1;
   }

   50% {
     transform: scale(1.05);
     opacity: 0.8;
   }

   100% {
     transform: scale(1);
     opacity: 1;
   }
 }


 @keyframes scanline {
   0% {
     transform: translateY(-100%);
   }

   100% {
     transform: translateY(100%);
   }
 }

 /* Game-style keyboard shortcut styles */
 kbd {
   font-family: ui-monospace, monospace;
   background: rgba(0, 255, 255, 0.1);
   border: 1px solid rgba(0, 255, 255, 0.2);
   border-bottom: 3px solid rgba(0, 255, 255, 0.2);
   border-radius: 3px;
   padding: 2px 6px;
   text-shadow: 0 0 5px rgba(0, 255, 255, 0.5);
   position: relative;
   overflow: hidden;
 }

 /* Custom animation classes */
 .animate-blink {
   animation: blink 0.8s infinite;
 }

 .animate-bounce-slow {
   animation: bounce-slow 2s infinite ease-in-out;
 }

 .animate-float {
   animation: float 3s infinite ease-in-out;
 }

 .animate-pulse-glow {
   animation: pulse-glow 2s infinite ease-in-out;
 }

 /* Force animation even when reduced motion is preferred */
 .force-animation {
   animation-play-state: running !important;
 }

 /* Responsive animations */
 @media (prefers-reduced-motion: reduce) {
   * {
     animation-duration: 0.01ms !important;
     animation-iteration-count: 1 !important;
     transition-duration: 0.01ms !important;
     scroll-behavior: auto !important;
   }

   .force-animation {
     animation-duration: inherit !important;
     animation-iteration-count: inherit !important;
     transition-duration: inherit !important;
   }
 }

 kbd::after {
   content: '';
   position: absolute;
   top: 0;
   left: 0;
   right: 0;
   height: 1px;
   background: linear-gradient(90deg, transparent, rgba(0, 255, 255, 0.2), transparent);
   animation: scanline 2s linear infinite;
 }

 /* Active section highlight effect */
 .nav-link.active {
   opacity: 0.8;
   transform: scale(1.05);
 }

 /* Loading state effect */

 .float {
   animation: float 3s ease-in-out infinite;
 }

 .spin {
   animation: spin 10s linear infinite;
 }

 .rainbow {
   animation: rainbow 5s linear infinite;
 }

 @keyframes blink {

   0%,
   100% {
     opacity: 1;
   }

   50% {
     opacity: 0;
   }
 }

 .animate-blink {
   animation: blink 1s infinite;
 }

 /* Skill section animations */
 @keyframes fadeIn {
   from {
     opacity: 0;
     transform: translateY(10px);
   }

   to {
     opacity: 1;
     transform: translateY(0);
   }
 }

 @keyframes skillLoad {
   0% {
     width: 0;
     opacity: 0.5;
   }

   50% {
     opacity: 1;
   }

   100% {
     width: 100%;
   }
 }

 @keyframes skillPulse {
   0% {
     transform: scale(1);
   }

   50% {
     transform: scale(1.05);
   }

   100% {
     transform: scale(1);
   }
 }

 /* Apply animations to skill elements only when they enter viewport */
 .skill-item {
   opacity: 0;
   transform: translateY(10px);
 }

 .skill-item.visible {
   opacity: 1;
   transform: translateY(0);
   transition: opacity 0.5s ease, transform 0.5s ease;
 }

 /* Game-inspired skill animations */
 @keyframes skillSelect {
   0% {
     transform: scale(1);
     box-shadow: 0 0 0 0 rgba(var(--primary), 0.4);
   }

   50% {
     transform: scale(1.02);
     box-shadow: 0 0 0 10px rgba(var(--primary), 0);
   }

   100% {
     transform: scale(1);
     box-shadow: 0 0 0 0 rgba(var(--primary), 0);
   }
 }

 @keyframes skillGlow {
   0% {
     filter: brightness(1) drop-shadow(0 0 2px rgba(var(--primary), 0.2));
   }

   50% {
     filter: brightness(1.2) drop-shadow(0 0 4px rgba(var(--primary), 0.4));
   }

   100% {
     filter: brightness(1) drop-shadow(0 0 2px rgba(var(--primary), 0.2));
   }
 }

 /* Apply animations to selected skills - reduced intensity */
 [data-selected="true"] {
   transform: scale(1.02);
   transition: transform 0.3s ease;
 }

 [data-selected="true"] .skill-icon {
   filter: brightness(1.1);
   transition: filter 0.3s ease;
 }

 @theme inline {
   --color-background: var(--background);
   --color-foreground: var(--foreground);
   --font-sans: var(--font-geist-sans);
   --font-mono: var(--font-geist-mono);
   --color-sidebar-ring: var(--sidebar-ring);
   --color-sidebar-border: var(--sidebar-border);
   --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
   --color-sidebar-accent: var(--sidebar-accent);
   --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
   --color-sidebar-primary: var(--sidebar-primary);
   --color-sidebar-foreground: var(--sidebar-foreground);
   --color-sidebar: var(--sidebar);
   --color-chart-5: var(--chart-5);
   --color-chart-4: var(--chart-4);
   --color-chart-3: var(--chart-3);
   --color-chart-2: var(--chart-2);
   --color-chart-1: var(--chart-1);
   --color-ring: var(--ring);
   --color-input: var(--input);
   --color-border: var(--border);
   --color-destructive: var(--destructive);
   --color-accent-foreground: var(--accent-foreground);
   --color-accent: var(--accent);
   --color-muted-foreground: var(--muted-foreground);
   --color-muted: var(--muted);
   --color-secondary-foreground: var(--secondary-foreground);
   --color-secondary: var(--secondary);
   --color-primary-foreground: var(--primary-foreground);
   --color-primary: var(--primary);
   --color-popover-foreground: var(--popover-foreground);
   --color-popover: var(--popover);
   --color-card-foreground: var(--card-foreground);
   --color-card: var(--card);
   --radius-sm: calc(var(--radius) - 4px);
   --radius-md: calc(var(--radius) - 2px);
   --radius-lg: var(--radius);
   --radius-xl: calc(var(--radius) + 4px);
 }
/* Only dark theme - forcing dark mode */
:root {
  --radius: 0.5rem;
  /* Slightly reduced radius for a more technical look */
  --background: oklch(0.1 0 0);
  /* Deeper black for better contrast */
  --foreground: oklch(0.95 0 0);
  --card: oklch(0.15 0 0);
  /* Slightly lighter than background */
  --card-foreground: oklch(0.95 0 0);
  --popover: oklch(0.15 0 0);
  --popover-foreground: oklch(0.95 0 0);
  --primary: oklch(0.75 0.15 200);
  /* Brighter blue for better visibility and contrast */
  --primary-foreground: oklch(0.1 0 0);
  --secondary: oklch(0.2 0 0);
  --secondary-foreground: oklch(0.95 0 0);
  --muted: oklch(0.2 0 0);
  --muted-foreground: oklch(0.75 0 0);
  /* Increased brightness for better contrast (WCAG AA) */
  --accent: oklch(0.2 0 0);
  --accent-foreground: oklch(0.95 0 0);
  --destructive: oklch(0.7 0.2 25);
  --border: oklch(0.3 0 0);
  /* More visible borders */
  --input: oklch(0.2 0 0);
  --ring: oklch(0.75 0.15 200);
  /* Match primary color */
  --chart-1: oklch(0.65 0.2 250);
  --chart-2: oklch(0.75 0.15 180);
  --chart-3: oklch(0.75 0.18 80);
  --chart-4: oklch(0.7 0.25 300);
  --chart-5: oklch(0.7 0.25 20);
  --sidebar: oklch(0.15 0 0);
  --sidebar-foreground: oklch(0.95 0 0);
  --sidebar-primary: oklch(0.75 0.15 200);
  /* Match primary color */
  --sidebar-primary-foreground: oklch(0.95 0 0);
  --sidebar-accent: oklch(0.2 0 0);
  --sidebar-accent-foreground: oklch(0.95 0 0);
  --sidebar-border: oklch(0.3 0 0);
  /* Match border color */
  --sidebar-ring: oklch(0.75 0.15 200);
  /* Match primary color */
}

 /* Removed .dark class as we're forcing dark mode only */

 @tailwind base;
 @tailwind components;
 @tailwind utilities;

 /* Removed redundant HSL theme definition from @layer base */

 @layer base {
   * {
     @apply border-border;
   }
 
   html {
     scroll-padding-top: 80px;
   }
 
   body {
     @apply bg-background text-foreground;
     @apply font-sans;
     min-height: 100vh;
   }
 
   /* Headings will inherit the body font (Geist Sans) by default */
   /* If specific heading font needed, apply here e.g., @apply font-sans; */
 
   /* Style links except navigation links */
   a:not(.nav-link) {
     @apply text-primary underline-offset-4 hover:text-primary/80 hover:underline;
   }
   
   /* Improved focus styles for better accessibility */
   :focus-visible {
     @apply outline-none ring-2 ring-primary ring-offset-2 ring-offset-background;
   }
   
   /* Ensure buttons have proper focus styles */
   button:focus-visible {
     @apply outline-none ring-2 ring-primary ring-offset-2 ring-offset-background;
   }
 }

 /* Code block styles */
 pre {
   overflow-x: auto;
   padding: 0 !important;
   margin: 1.5rem 0 !important;
   /* Use theme variables for background and border */
   background-color: hsl(var(--card)) !important;
   /* Or rgba(0,0,0,0.2) if preferred */
   border: 1px solid hsl(var(--border)) !important;
   border-radius: 0.5rem !important;
 }

 pre>code {
   display: grid;
   min-width: 100%;
   font-size: 0.9rem !important;
   line-height: 1.6 !important;
   font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace !important;
   padding: 1rem !important;
   background-color: transparent !important;
 }

 pre code .line {
   padding: 0 1rem;
   border-left: 2px solid transparent;
   min-height: 1.6rem;
   display: inline-block;
   width: 100%;
 }

 pre code .line.highlighted {
   background-color: rgba(200, 200, 255, 0.1);
   border-left: 2px solid #3b82f6;
 }

 pre code .word {
   background-color: rgba(200, 200, 255, 0.15);
   padding: 0.25rem;
   border-radius: 0.25rem;
 }

 /* Inline code styling */
 :not(pre)>code {
   /* Use theme colors */
   background-color: rgba(0, 0, 0, 0.3) !important;
   /* Similar to bg-black/30 */
   color: hsl(var(--primary)) !important;
   padding: 0.2em 0.4em !important;
   border-radius: 3px !important;
   font-size: 0.875em !important;
   font-weight: 400 !important;
   word-break: break-word;
 }

 /* Language badge */
 pre[data-language]::before {
   content: attr(data-language);
   display: block;
   position: relative;
   top: 0;
   right: 0;
   color: hsl(var(--muted-foreground));
   /* Use theme variable */
   font-size: 0.75rem;
   font-family: ui-monospace, monospace;
   text-transform: uppercase;
   padding: 0.5rem 1rem;
   border-bottom: 1px solid hsl(var(--border));
   /* Use theme variable */
 }

 /* Syntax highlighting colors */
 .token.comment,
 .token.prolog,
 .token.doctype,
 .token.cdata {
   color: #6a9955;
 }

 .token.punctuation {
   color: #d4d4d4;
 }

 .token.property,
 .token.tag,
 .token.boolean,
 .token.number,
 .token.constant,
 .token.symbol,
 .token.deleted {
   color: #b5cea8;
 }

 .token.selector,
 .token.attr-name,
 .token.string,
 .token.char,
 .token.builtin,
 .token.inserted {
   color: #ce9178;
 }

 .token.operator,
 .token.entity,
 .token.url,
 .language-css .token.string,
 .style .token.string {
   color: #d4d4d4;
 }

 .token.atrule,
 .token.attr-value,
 .token.keyword {
   color: #569cd6;
 }

 .token.function,
 .token.class-name {
   color: #dcdcaa;
 }

 .token.regex,
 .token.important,
 .token.variable {
   color: #d16969;
 }

 /* Update animation classes to work with reduced motion */
 .animate-float {
   animation: float 3s ease-in-out infinite;
 }

 .animate-spin {
   animation: spin 10s linear infinite;
 }

 .animate-rainbow {
   animation: rainbow 5s linear infinite;
 }

 /* Force animations even when reduced motion is enabled */
 .force-animation {
   animation-duration: inherit !important;
   transition-duration: inherit !important;
 }
</file>

<file path="src/app/layout.tsx">
import { Suspense } from "react";
import { GeistSans } from 'geist/font/sans';
import { GeistMono } from 'geist/font/mono';
import "./globals.css";
import { ThemeProvider } from "@/components/theme-provider";
import { TailwindIndicator } from "@/components/tailwind-indicator";
import { Toaster } from "@/components/ui/toaster";
import { Header } from "@/components/Header";
import { Footer } from "@/components/Footer";
import { KonamiCode } from "@/components/easter-eggs/KonamiCode";
import { ScrollToTop } from "@/components/ScrollToTop";
import { SkipLink } from "@/components/SkipLink";
import { KeyboardShortcutsHelp } from "@/components/KeyboardShortcutsHelp";
import { ConsoleProvider } from "@/components/ui/console-provider";
import { siteMetadata } from "@/lib/config/metadata";

// Configure fonts
const fontSans = GeistSans;
const fontMono = GeistMono;

// Export metadata
export const metadata = siteMetadata;

// Import the PageSkeleton component
import { PageSkeleton } from "@/components/PageSkeleton";

// Loading fallback component
function LoadingFallback() {
  return <PageSkeleton />;
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html 
      lang="en" 
      className={`${fontSans.variable} ${fontMono.variable}`} 
      suppressHydrationWarning
    >
      <head />
      <body className="font-sans bg-background text-foreground">
        <ThemeProvider
          attribute="class"
          defaultTheme="dark"
          enableSystem={false}
          forcedTheme="dark"
          disableTransitionOnChange
        >
          <Suspense fallback={<LoadingFallback />}>
              <ConsoleProvider>
                {/* Accessibility */}
                <SkipLink />

                {/* Navigation */}
                <Header />

                {/* Utility components */}
                <Suspense fallback={null}>
                  <ScrollToTop />
                  <KeyboardShortcutsHelp />
                </Suspense>

                {/* Main content */}
                <main 
                  id="main" 
                  className="lg:ml-[300px] relative z-[2]" 
                  tabIndex={-1}
                >
                  {children}
                  <Footer />
                </main>

                {/* Utilities */}
                <Toaster />
                
                {/* Development utilities */}
                {process.env.NODE_ENV === 'development' && (
                  <TailwindIndicator />
                )}

                {/* Easter eggs */}
                <Suspense fallback={null}>
                  <KonamiCode />
                </Suspense>
              </ConsoleProvider>
          </Suspense>
        </ThemeProvider>
      </body>
    </html>
  );
}
</file>

</files>
